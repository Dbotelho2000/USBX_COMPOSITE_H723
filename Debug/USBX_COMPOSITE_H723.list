
USBX_COMPOSITE_H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001064c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0801091c  0801091c  0002091c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010ab8  08010ab8  00020ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010abc  08010abc  00020abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  24000000  08010ac0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005450  240000d4  08010b94  000300d4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24005524  08010b94  00035524  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00030102  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006d0fa  00000000  00000000  00030145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000100a3  00000000  00000000  0009d23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024e0  00000000  00000000  000ad2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000190b  00000000  00000000  000af7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00049272  00000000  00000000  000b10d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005e242  00000000  00000000  000fa345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c9f6  00000000  00000000  00158587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006914  00000000  00000000  002b4f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000109  00000000  00000000  002bb894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d4 	.word	0x240000d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010904 	.word	0x08010904

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d8 	.word	0x240000d8
 800030c:	08010904 	.word	0x08010904

08000310 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000310:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000312:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000316:	4919      	ldr	r1, [pc, #100]	; (800037c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000318:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800031c:	4818      	ldr	r0, [pc, #96]	; (8000380 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800031e:	4917      	ldr	r1, [pc, #92]	; (800037c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000320:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000322:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000324:	4817      	ldr	r0, [pc, #92]	; (8000384 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000326:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000328:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800032c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800032e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000332:	4915      	ldr	r1, [pc, #84]	; (8000388 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000334:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000336:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800033a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800033c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000340:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000344:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000348:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800034c:	490f      	ldr	r1, [pc, #60]	; (800038c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800034e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000352:	4770      	bx	lr

08000354 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000354:	f7ff bffe 	b.w	8000354 <__tx_BadHandler>

08000358 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000358:	f7ff bffe 	b.w	8000358 <__tx_HardfaultHandler>

0800035c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800035c:	f7ff bffe 	b.w	800035c <__tx_SVCallHandler>

08000360 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000360:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000362:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000368:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800036a:	f000 f891 	bl	8000490 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800036e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000372:	4770      	bx	lr

08000374 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000374:	f7ff bffe 	b.w	8000374 <__tx_NMIHandler>

08000378 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000378:	f7ff bffe 	b.w	8000378 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800037c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000380:	240046e8 	.word	0x240046e8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000384:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000388:	0053ec5f 	.word	0x0053ec5f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800038c:	40ff0000 	.word	0x40ff0000

08000390 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000390:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000394:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000396:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000398:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800039c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80003a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80003a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80003a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80003aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80003ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80003b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80003b6:	f3bf 8f6f 	isb	sy

080003ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80003ba:	e7fe      	b.n	80003ba <__tx_wait_here>

080003bc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003bc:	4821      	ldr	r0, [pc, #132]	; (8000444 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80003c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80003c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80003c6:	b191      	cbz	r1, 80003ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80003c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80003ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80003ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003d6:	d101      	bne.n	80003dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003dc:	4c1b      	ldr	r4, [pc, #108]	; (800044c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003e8:	b10d      	cbz	r5, 80003ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003ec:	6023      	str	r3, [r4, #0]

080003ee <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003ee:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003f2:	b1b1      	cbz	r1, 8000422 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003f4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003f6:	b662      	cpsie	i

080003f8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fa:	4c14      	ldr	r4, [pc, #80]	; (800044c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000402:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000404:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000406:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800040a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800040e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000412:	d101      	bne.n	8000418 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000414:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000418 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000418:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800041c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000420:	4770      	bx	lr

08000422 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000422:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000424:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000426:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000428:	b909      	cbnz	r1, 800042e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800042a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800042c:	e7f9      	b.n	8000422 <__tx_ts_wait>

0800042e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800042e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000432:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000436:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800043a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800043c:	e7dc      	b.n	80003f8 <__tx_ts_restore>

0800043e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800043e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000440:	24004784 	.word	0x24004784
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000444:	240046ec 	.word	0x240046ec
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000448:	240046f0 	.word	0x240046f0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800044c:	24004cf0 	.word	0x24004cf0

08000450 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000450:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000452:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000456:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800045a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800045e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000460:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000464:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000466:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000468:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800046a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800046c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800046e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000470:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000472:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000474:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000476:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000478:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800047c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000482:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000484:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800048a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800048c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800048e:	4770      	bx	lr

08000490 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000490:	4922      	ldr	r1, [pc, #136]	; (800051c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000492:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000494:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000498:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800049c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800049e:	b13a      	cbz	r2, 80004b0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80004a0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80004a4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80004a6:	b91a      	cbnz	r2, 80004b0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80004aa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80004ae:	6018      	str	r0, [r3, #0]

080004b0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004b0:	491d      	ldr	r1, [pc, #116]	; (8000528 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80004b2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80004b4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80004b6:	b122      	cbz	r2, 80004c2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80004ba:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80004be:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80004c0:	e008      	b.n	80004d4 <__tx_timer_done>

080004c2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80004c2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80004c8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80004ca:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80004cc:	d101      	bne.n	80004d2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004d0:	6818      	ldr	r0, [r3, #0]

080004d2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004d2:	6008      	str	r0, [r1, #0]

080004d4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004d6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004d8:	b912      	cbnz	r2, 80004e0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004da:	4914      	ldr	r1, [pc, #80]	; (800052c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004dc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004de:	b1d0      	cbz	r0, 8000516 <__tx_timer_nothing_expired>

080004e0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004e0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004e4:	4911      	ldr	r1, [pc, #68]	; (800052c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004e6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004e8:	b108      	cbz	r0, 80004ee <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ea:	f009 fb8f 	bl	8009c0c <_tx_timer_expiration_process>

080004ee <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004f0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004f2:	b172      	cbz	r2, 8000512 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004f4:	f009 fafc 	bl	8009af0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004fa:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004fc:	b949      	cbnz	r1, 8000512 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004fe:	480f      	ldr	r0, [pc, #60]	; (800053c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000500:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000502:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000504:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000506:	480f      	ldr	r0, [pc, #60]	; (8000544 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800050c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800050e:	d000      	beq.n	8000512 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000510:	6002      	str	r2, [r0, #0]

08000512 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000512:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000516 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000516:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800051a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800051c:	24004790 	.word	0x24004790
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000520:	24004cf0 	.word	0x24004cf0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000524:	24004794 	.word	0x24004794
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000528:	24004820 	.word	0x24004820
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800052c:	24004824 	.word	0x24004824
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000530:	2400481c 	.word	0x2400481c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000534:	24004818 	.word	0x24004818
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000538:	24004784 	.word	0x24004784
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800053c:	240046ec 	.word	0x240046ec
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000540:	240046f0 	.word	0x240046f0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000544:	e000ed04 	.word	0xe000ed04

08000548 <strlen>:
 8000548:	4603      	mov	r3, r0
 800054a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800054e:	2a00      	cmp	r2, #0
 8000550:	d1fb      	bne.n	800054a <strlen+0x2>
 8000552:	1a18      	subs	r0, r3, r0
 8000554:	3801      	subs	r0, #1
 8000556:	4770      	bx	lr

08000558 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000564:	2334      	movs	r3, #52	; 0x34
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056c:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <tx_application_define+0x6c>)
 800056e:	4916      	ldr	r1, [pc, #88]	; (80005c8 <tx_application_define+0x70>)
 8000570:	4816      	ldr	r0, [pc, #88]	; (80005cc <tx_application_define+0x74>)
 8000572:	f009 fdf5 	bl	800a160 <_txe_byte_pool_create>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d109      	bne.n	8000590 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <tx_application_define+0x74>)
 800057e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000580:	68b8      	ldr	r0, [r7, #8]
 8000582:	f000 f82b 	bl	80005dc <App_ThreadX_Init>
 8000586:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d000      	beq.n	8000590 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800058e:	e7fe      	b.n	800058e <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000590:	2334      	movs	r3, #52	; 0x34
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <tx_application_define+0x78>)
 800059a:	490e      	ldr	r1, [pc, #56]	; (80005d4 <tx_application_define+0x7c>)
 800059c:	480e      	ldr	r0, [pc, #56]	; (80005d8 <tx_application_define+0x80>)
 800059e:	f009 fddf 	bl	800a160 <_txe_byte_pool_create>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d109      	bne.n	80005bc <tx_application_define+0x64>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <tx_application_define+0x80>)
 80005aa:	60bb      	str	r3, [r7, #8]
    status = MX_USBX_Device_Init(memory_ptr);
 80005ac:	68b8      	ldr	r0, [r7, #8]
 80005ae:	f00e feb9 	bl	800f324 <MX_USBX_Device_Init>
 80005b2:	60f8      	str	r0, [r7, #12]
    if (status != UX_SUCCESS)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d000      	beq.n	80005bc <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_USBX_Device_Init_Error */
      while(1)
 80005ba:	e7fe      	b.n	80005ba <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	240000f0 	.word	0x240000f0
 80005c8:	0801091c 	.word	0x0801091c
 80005cc:	240004f0 	.word	0x240004f0
 80005d0:	24000524 	.word	0x24000524
 80005d4:	08010930 	.word	0x08010930
 80005d8:	24004124 	.word	0x24004124

080005dc <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80005e8:	68fb      	ldr	r3, [r7, #12]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80005fa:	f007 fa35 	bl	8007a68 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b39      	ldr	r3, [pc, #228]	; (8000700 <MX_GPIO_Init+0xfc>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000620:	4a37      	ldr	r2, [pc, #220]	; (8000700 <MX_GPIO_Init+0xfc>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800062a:	4b35      	ldr	r3, [pc, #212]	; (8000700 <MX_GPIO_Init+0xfc>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <MX_GPIO_Init+0xfc>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063e:	4a30      	ldr	r2, [pc, #192]	; (8000700 <MX_GPIO_Init+0xfc>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_GPIO_Init+0xfc>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <MX_GPIO_Init+0xfc>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065c:	4a28      	ldr	r2, [pc, #160]	; (8000700 <MX_GPIO_Init+0xfc>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_GPIO_Init+0xfc>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <MX_GPIO_Init+0xfc>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067a:	4a21      	ldr	r2, [pc, #132]	; (8000700 <MX_GPIO_Init+0xfc>)
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_GPIO_Init+0xfc>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2101      	movs	r1, #1
 8000696:	481b      	ldr	r0, [pc, #108]	; (8000704 <MX_GPIO_Init+0x100>)
 8000698:	f000 fde2 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2102      	movs	r1, #2
 80006a0:	4819      	ldr	r0, [pc, #100]	; (8000708 <MX_GPIO_Init+0x104>)
 80006a2:	f000 fddd 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80006a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	4814      	ldr	r0, [pc, #80]	; (800070c <MX_GPIO_Init+0x108>)
 80006bc:	f000 fc10 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006c0:	2301      	movs	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <MX_GPIO_Init+0x100>)
 80006d8:	f000 fc02 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_GPIO_Init+0x104>)
 80006f4:	f000 fbf4 	bl	8000ee0 <HAL_GPIO_Init>

}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58024400 	.word	0x58024400
 8000704:	58020400 	.word	0x58020400
 8000708:	58021000 	.word	0x58021000
 800070c:	58020800 	.word	0x58020800

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fa84 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f806 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff72 	bl	8000604 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000720:	f7ff ff69 	bl	80005f6 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x14>
	...

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09c      	sub	sp, #112	; 0x70
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	224c      	movs	r2, #76	; 0x4c
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f010 f8b8 	bl	80108ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2220      	movs	r2, #32
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f010 f8b2 	bl	80108ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000748:	2002      	movs	r0, #2
 800074a:	f002 f8db 	bl	8002904 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <SystemClock_Config+0xe0>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <SystemClock_Config+0xe0>)
 8000758:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <SystemClock_Config+0xe0>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076a:	bf00      	nop
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <SystemClock_Config+0xe0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000778:	d1f8      	bne.n	800076c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800077a:	2322      	movs	r3, #34	; 0x22
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800077e:	2301      	movs	r3, #1
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000786:	2301      	movs	r3, #1
 8000788:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078e:	2300      	movs	r3, #0
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000792:	2320      	movs	r3, #32
 8000794:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000796:	f240 1313 	movw	r3, #275	; 0x113
 800079a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 f8ed 	bl	8002998 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007c4:	f000 f834 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	233f      	movs	r3, #63	; 0x3f
 80007ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2303      	movs	r3, #3
 80007ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007d4:	2308      	movs	r3, #8
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d8:	2340      	movs	r3, #64	; 0x40
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2103      	movs	r1, #3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fcac 	bl	800314c <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007fa:	f000 f819 	bl	8000830 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3770      	adds	r7, #112	; 0x70
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	58024800 	.word	0x58024800

0800080c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d101      	bne.n	8000822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081e:	f000 fa3b 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40001000 	.word	0x40001000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_MspInit+0x30>)
 8000844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000848:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x30>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x30>)
 8000854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	58024400 	.word	0x58024400

08000870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b090      	sub	sp, #64	; 0x40
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b0f      	cmp	r3, #15
 800087c:	d827      	bhi.n	80008ce <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800087e:	2200      	movs	r2, #0
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	2036      	movs	r0, #54	; 0x36
 8000884:	f000 fb04 	bl	8000e90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000888:	2036      	movs	r0, #54	; 0x36
 800088a:	f000 fb1b 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800088e:	4a29      	ldr	r2, [pc, #164]	; (8000934 <HAL_InitTick+0xc4>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <HAL_InitTick+0xc8>)
 8000896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800089a:	4a27      	ldr	r2, [pc, #156]	; (8000938 <HAL_InitTick+0xc8>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <HAL_InitTick+0xc8>)
 80008a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b2:	f107 0210 	add.w	r2, r7, #16
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 ffbb 	bl	8003838 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d106      	bne.n	80008da <HAL_InitTick+0x6a>
 80008cc:	e001      	b.n	80008d2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e02b      	b.n	800092a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008d2:	f002 ff9b 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 80008d6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80008d8:	e004      	b.n	80008e4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008da:	f002 ff97 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 80008de:	4603      	mov	r3, r0
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <HAL_InitTick+0xcc>)
 80008e8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ec:	0c9b      	lsrs	r3, r3, #18
 80008ee:	3b01      	subs	r3, #1
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <HAL_InitTick+0xd0>)
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <HAL_InitTick+0xd4>)
 80008f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_InitTick+0xd0>)
 80008fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000900:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_InitTick+0xd0>)
 8000902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000904:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_InitTick+0xd0>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_InitTick+0xd0>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <HAL_InitTick+0xd0>)
 8000914:	f004 fad6 	bl	8004ec4 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d104      	bne.n	8000928 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <HAL_InitTick+0xd0>)
 8000920:	f004 fb32 	bl	8004f88 <HAL_TIM_Base_Start_IT>
 8000924:	4603      	mov	r3, r0
 8000926:	e000      	b.n	800092a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000928:	2301      	movs	r3, #1
}
 800092a:	4618      	mov	r0, r3
 800092c:	3740      	adds	r7, #64	; 0x40
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	24000008 	.word	0x24000008
 8000938:	58024400 	.word	0x58024400
 800093c:	431bde83 	.word	0x431bde83
 8000940:	24004158 	.word	0x24004158
 8000944:	40001000 	.word	0x40001000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM6_DAC_IRQHandler+0x10>)
 800097a:	f004 fb8b 	bl	8005094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	24004158 	.word	0x24004158

08000988 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <OTG_HS_IRQHandler+0x10>)
 800098e:	f000 fe14 	bl	80015ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	240041a4 	.word	0x240041a4

0800099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <SystemInit+0xd0>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <SystemInit+0xd0>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009b0:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <SystemInit+0xd4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f003 030f 	and.w	r3, r3, #15
 80009b8:	2b06      	cmp	r3, #6
 80009ba:	d807      	bhi.n	80009cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <SystemInit+0xd4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f023 030f 	bic.w	r3, r3, #15
 80009c4:	4a2a      	ldr	r2, [pc, #168]	; (8000a70 <SystemInit+0xd4>)
 80009c6:	f043 0307 	orr.w	r3, r3, #7
 80009ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <SystemInit+0xd8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <SystemInit+0xd8>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <SystemInit+0xd8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <SystemInit+0xd8>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4924      	ldr	r1, [pc, #144]	; (8000a74 <SystemInit+0xd8>)
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <SystemInit+0xdc>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <SystemInit+0xd4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d007      	beq.n	8000a06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <SystemInit+0xd4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f023 030f 	bic.w	r3, r3, #15
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <SystemInit+0xd4>)
 8000a00:	f043 0307 	orr.w	r3, r3, #7
 8000a04:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <SystemInit+0xd8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <SystemInit+0xd8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <SystemInit+0xd8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <SystemInit+0xd8>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <SystemInit+0xe0>)
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <SystemInit+0xd8>)
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <SystemInit+0xe4>)
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <SystemInit+0xd8>)
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <SystemInit+0xe8>)
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <SystemInit+0xd8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <SystemInit+0xd8>)
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <SystemInit+0xe8>)
 8000a34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <SystemInit+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <SystemInit+0xd8>)
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <SystemInit+0xe8>)
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <SystemInit+0xd8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <SystemInit+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <SystemInit+0xd8>)
 8000a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <SystemInit+0xd8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <SystemInit+0xec>)
 8000a5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a60:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	52002000 	.word	0x52002000
 8000a74:	58024400 	.word	0x58024400
 8000a78:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a7c:	02020200 	.word	0x02020200
 8000a80:	01ff0000 	.word	0x01ff0000
 8000a84:	01010280 	.word	0x01010280
 8000a88:	52004000 	.word	0x52004000

08000a8c <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000a94:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a98:	2209      	movs	r2, #9
 8000a9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ad4:	f000 fbdd 	bl	8001292 <HAL_PCD_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ade:	f7ff fea7 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	240041a4 	.word	0x240041a4
 8000aec:	40040000 	.word	0x40040000

08000af0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0b8      	sub	sp, #224	; 0xe0
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	22b8      	movs	r2, #184	; 0xb8
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00f fecb 	bl	80108ac <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a29      	ldr	r2, [pc, #164]	; (8000bc0 <HAL_PCD_MspInit+0xd0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d14b      	bne.n	8000bb8 <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000b2c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 febf 	bl	80038bc <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000b44:	f7ff fe74 	bl	8000830 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000b48:	f001 ff16 	bl	8002978 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_PCD_MspInit+0xd4>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <HAL_PCD_MspInit+0xd4>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_PCD_MspInit+0xd4>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b82:	4619      	mov	r1, r3
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <HAL_PCD_MspInit+0xd8>)
 8000b86:	f000 f9ab 	bl	8000ee0 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_PCD_MspInit+0xd4>)
 8000b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b90:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <HAL_PCD_MspInit+0xd4>)
 8000b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_PCD_MspInit+0xd4>)
 8000b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	204d      	movs	r0, #77	; 0x4d
 8000bae:	f000 f96f 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000bb2:	204d      	movs	r0, #77	; 0x4d
 8000bb4:	f000 f986 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8000bb8:	bf00      	nop
 8000bba:	37e0      	adds	r7, #224	; 0xe0
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40040000 	.word	0x40040000
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	58020000 	.word	0x58020000

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd0:	f7ff fee4 	bl	800099c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	; (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f00f fe5f 	bl	80108bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fd87 	bl	8000710 <main>
  bx  lr
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000c08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c0c:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 8000c10:	08010ac0 	.word	0x08010ac0
  ldr r2, =_sbss
 8000c14:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8000c18:	24005524 	.word	0x24005524

08000c1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC3_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c26:	2003      	movs	r0, #3
 8000c28:	f000 f927 	bl	8000e7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c2c:	f002 fc44 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8000c30:	4602      	mov	r2, r0
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_Init+0x68>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	4913      	ldr	r1, [pc, #76]	; (8000c8c <HAL_Init+0x6c>)
 8000c3e:	5ccb      	ldrb	r3, [r1, r3]
 8000c40:	f003 031f 	and.w	r3, r3, #31
 8000c44:	fa22 f303 	lsr.w	r3, r2, r3
 8000c48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_Init+0x68>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_Init+0x6c>)
 8000c54:	5cd3      	ldrb	r3, [r2, r3]
 8000c56:	f003 031f 	and.w	r3, r3, #31
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_Init+0x70>)
 8000c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <HAL_Init+0x74>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fe00 	bl	8000870 <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e002      	b.n	8000c80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7a:	f7ff fddf 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	08010a8c 	.word	0x08010a8c
 8000c90:	24000004 	.word	0x24000004
 8000c94:	24000000 	.word	0x24000000

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2400000c 	.word	0x2400000c
 8000cbc:	240046b0 	.word	0x240046b0

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	240046b0 	.word	0x240046b0

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2400000c 	.word	0x2400000c

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <__NVIC_SetPriorityGrouping+0x40>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x40>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00
 8000d64:	05fa0000 	.word	0x05fa0000

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff4c 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff63 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb3 	bl	8000e14 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff82 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff56 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000eee:	4b86      	ldr	r3, [pc, #536]	; (8001108 <HAL_GPIO_Init+0x228>)
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ef2:	e18c      	b.n	800120e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 817e 	beq.w	8001208 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d005      	beq.n	8000f24 <HAL_GPIO_Init+0x44>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d017      	beq.n	8000fc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d123      	bne.n	8001016 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	69b9      	ldr	r1, [r7, #24]
 8001012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0203 	and.w	r2, r3, #3
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80d8 	beq.w	8001208 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <HAL_GPIO_Init+0x22c>)
 800105a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800105e:	4a2b      	ldr	r2, [pc, #172]	; (800110c <HAL_GPIO_Init+0x22c>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_GPIO_Init+0x22c>)
 800106a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a26      	ldr	r2, [pc, #152]	; (8001110 <HAL_GPIO_Init+0x230>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_GPIO_Init+0x234>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d04a      	beq.n	8001138 <HAL_GPIO_Init+0x258>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <HAL_GPIO_Init+0x238>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d02b      	beq.n	8001102 <HAL_GPIO_Init+0x222>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_GPIO_Init+0x23c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d025      	beq.n	80010fe <HAL_GPIO_Init+0x21e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <HAL_GPIO_Init+0x240>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d01f      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_GPIO_Init+0x244>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d019      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a18      	ldr	r2, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x248>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_GPIO_Init+0x24c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d00d      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a16      	ldr	r2, [pc, #88]	; (8001130 <HAL_GPIO_Init+0x250>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x20a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a15      	ldr	r2, [pc, #84]	; (8001134 <HAL_GPIO_Init+0x254>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_GPIO_Init+0x206>
 80010e2:	2309      	movs	r3, #9
 80010e4:	e029      	b.n	800113a <HAL_GPIO_Init+0x25a>
 80010e6:	230a      	movs	r3, #10
 80010e8:	e027      	b.n	800113a <HAL_GPIO_Init+0x25a>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e025      	b.n	800113a <HAL_GPIO_Init+0x25a>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e023      	b.n	800113a <HAL_GPIO_Init+0x25a>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e021      	b.n	800113a <HAL_GPIO_Init+0x25a>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e01f      	b.n	800113a <HAL_GPIO_Init+0x25a>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e01d      	b.n	800113a <HAL_GPIO_Init+0x25a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e01b      	b.n	800113a <HAL_GPIO_Init+0x25a>
 8001102:	2301      	movs	r3, #1
 8001104:	e019      	b.n	800113a <HAL_GPIO_Init+0x25a>
 8001106:	bf00      	nop
 8001108:	58000080 	.word	0x58000080
 800110c:	58024400 	.word	0x58024400
 8001110:	58000400 	.word	0x58000400
 8001114:	58020000 	.word	0x58020000
 8001118:	58020400 	.word	0x58020400
 800111c:	58020800 	.word	0x58020800
 8001120:	58020c00 	.word	0x58020c00
 8001124:	58021000 	.word	0x58021000
 8001128:	58021400 	.word	0x58021400
 800112c:	58021800 	.word	0x58021800
 8001130:	58021c00 	.word	0x58021c00
 8001134:	58022400 	.word	0x58022400
 8001138:	2300      	movs	r3, #0
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4093      	lsls	r3, r2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114a:	4938      	ldr	r1, [pc, #224]	; (800122c <HAL_GPIO_Init+0x34c>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800117e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	3301      	adds	r3, #1
 800120c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	f47f ae6b 	bne.w	8000ef4 <HAL_GPIO_Init+0x14>
  }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3724      	adds	r7, #36	; 0x24
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	58000400 	.word	0x58000400

08001230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e001      	b.n	8001252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001294:	b08f      	sub	sp, #60	; 0x3c
 8001296:	af0a      	add	r7, sp, #40	; 0x28
 8001298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e116      	b.n	80014d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d106      	bne.n	80012c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fc16 	bl	8000af0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2203      	movs	r2, #3
 80012c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fa03 	bl	80056ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	687e      	ldr	r6, [r7, #4]
 80012f0:	466d      	mov	r5, sp
 80012f2:	f106 0410 	add.w	r4, r6, #16
 80012f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001302:	e885 0003 	stmia.w	r5, {r0, r1}
 8001306:	1d33      	adds	r3, r6, #4
 8001308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f004 f8ce 	bl	80054ac <USB_CoreInit>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2202      	movs	r2, #2
 800131a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0d7      	b.n	80014d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f004 f9f1 	bl	8005710 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e04a      	b.n	80013ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	333d      	adds	r3, #61	; 0x3d
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	333c      	adds	r3, #60	; 0x3c
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	b298      	uxth	r0, r3
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3356      	adds	r3, #86	; 0x56
 8001370:	4602      	mov	r2, r0
 8001372:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	3340      	adds	r3, #64	; 0x40
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3344      	adds	r3, #68	; 0x44
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	3348      	adds	r3, #72	; 0x48
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	334c      	adds	r3, #76	; 0x4c
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3301      	adds	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3af      	bcc.n	8001334 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e044      	b.n	8001464 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	3301      	adds	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3b5      	bcc.n	80013da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	687e      	ldr	r6, [r7, #4]
 8001476:	466d      	mov	r5, sp
 8001478:	f106 0410 	add.w	r4, r6, #16
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001484:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001488:	e885 0003 	stmia.w	r5, {r0, r1}
 800148c:	1d33      	adds	r3, r6, #4
 800148e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001490:	6838      	ldr	r0, [r7, #0]
 8001492:	f004 f989 	bl	80057a8 <USB_DevInit>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e014      	b.n	80014d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d102      	bne.n	80014c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f001 f9ef 	bl	80028a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f005 f9cb 	bl	8006866 <USB_DevDisconnect>

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_PCD_Start+0x1c>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e022      	b.n	800153c <HAL_PCD_Start+0x62>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800150e:	2b01      	cmp	r3, #1
 8001510:	d105      	bne.n	800151e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f004 f8d2 	bl	80056cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f005 f979 	bl	8006824 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_PCD_Stop+0x1c>
 800155c:	2302      	movs	r3, #2
 800155e:	e028      	b.n	80015b2 <HAL_PCD_Stop+0x6e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f004 f8be 	bl	80056ee <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f005 f975 	bl	8006866 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2110      	movs	r1, #16
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fa6e 	bl	8005a64 <USB_FlushTxFifo>

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8001598:	2b01      	cmp	r3, #1
 800159a:	d105      	bne.n	80015a8 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015ba:	b590      	push	{r4, r7, lr}
 80015bc:	b08d      	sub	sp, #52	; 0x34
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f005 f9fc 	bl	80069ce <USB_GetMode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f040 84b7 	bne.w	8001f4c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f005 f960 	bl	80068a8 <USB_ReadInterrupts>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 84ad 	beq.w	8001f4a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f005 f94d 	bl	80068a8 <USB_ReadInterrupts>
 800160e:	4603      	mov	r3, r0
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b02      	cmp	r3, #2
 8001616:	d107      	bne.n	8001628 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f002 0202 	and.w	r2, r2, #2
 8001626:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f005 f93b 	bl	80068a8 <USB_ReadInterrupts>
 8001632:	4603      	mov	r3, r0
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b10      	cmp	r3, #16
 800163a:	d161      	bne.n	8001700 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0210 	bic.w	r2, r2, #16
 800164a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f003 020f 	and.w	r2, r3, #15
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4413      	add	r3, r2
 8001668:	3304      	adds	r3, #4
 800166a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	0c5b      	lsrs	r3, r3, #17
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	2b02      	cmp	r3, #2
 8001676:	d124      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d035      	beq.n	80016f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800168e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	6a38      	ldr	r0, [r7, #32]
 8001698:	f004 ff72 	bl	8006580 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a8:	441a      	add	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ba:	441a      	add	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	e016      	b.n	80016f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	0c5b      	lsrs	r3, r3, #17
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d110      	bne.n	80016f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016d4:	2208      	movs	r2, #8
 80016d6:	4619      	mov	r1, r3
 80016d8:	6a38      	ldr	r0, [r7, #32]
 80016da:	f004 ff51 	bl	8006580 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ea:	441a      	add	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0210 	orr.w	r2, r2, #16
 80016fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f005 f8cf 	bl	80068a8 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001710:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001714:	f040 80a7 	bne.w	8001866 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f005 f8d4 	bl	80068ce <USB_ReadDevAllOutEpInterrupt>
 8001726:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001728:	e099      	b.n	800185e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 808e 	beq.w	8001852 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f005 f8f8 	bl	8006936 <USB_ReadDevOutEPInterrupt>
 8001746:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00c      	beq.n	800176c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175e:	461a      	mov	r2, r3
 8001760:	2301      	movs	r3, #1
 8001762:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 ff16 	bl	8002598 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00c      	beq.n	8001790 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001782:	461a      	mov	r2, r3
 8001784:	2308      	movs	r3, #8
 8001786:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 ffec 	bl	8002768 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a6:	461a      	mov	r2, r3
 80017a8:	2310      	movs	r3, #16
 80017aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d030      	beq.n	8001818 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d109      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	3304      	adds	r3, #4
 80017ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	78db      	ldrb	r3, [r3, #3]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d108      	bne.n	8001806 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2200      	movs	r2, #0
 80017f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4619      	mov	r1, r3
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fba6 	bl	8001f52 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001812:	461a      	mov	r2, r3
 8001814:	2302      	movs	r3, #2
 8001816:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	015a      	lsls	r2, r3, #5
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	4413      	add	r3, r2
 800182a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182e:	461a      	mov	r2, r3
 8001830:	2320      	movs	r3, #32
 8001832:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184a:	461a      	mov	r2, r3
 800184c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001850:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	3301      	adds	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800185e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	f47f af62 	bne.w	800172a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f005 f81c 	bl	80068a8 <USB_ReadInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800187a:	f040 80db 	bne.w	8001a34 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f005 f83d 	bl	8006902 <USB_ReadDevAllInEpInterrupt>
 8001888:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800188e:	e0cd      	b.n	8001a2c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80c2 	beq.w	8001a20 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 f863 	bl	8006972 <USB_ReadDevInEPInterrupt>
 80018ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d057      	beq.n	8001968 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	2201      	movs	r2, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69f9      	ldr	r1, [r7, #28]
 80018d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018d8:	4013      	ands	r3, r2
 80018da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	015a      	lsls	r2, r3, #5
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e8:	461a      	mov	r2, r3
 80018ea:	2301      	movs	r3, #1
 80018ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d132      	bne.n	800195c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3348      	adds	r3, #72	; 0x48
 8001906:	6819      	ldr	r1, [r3, #0]
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4403      	add	r3, r0
 8001916:	3344      	adds	r3, #68	; 0x44
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4419      	add	r1, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4403      	add	r3, r0
 800192a:	3348      	adds	r3, #72	; 0x48
 800192c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	2b00      	cmp	r3, #0
 8001932:	d113      	bne.n	800195c <HAL_PCD_IRQHandler+0x3a2>
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	334c      	adds	r3, #76	; 0x4c
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d108      	bne.n	800195c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001954:	461a      	mov	r2, r3
 8001956:	2101      	movs	r1, #1
 8001958:	f005 f86c 	bl	8006a34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f00c ff92 	bl	800e88c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800197e:	461a      	mov	r2, r3
 8001980:	2308      	movs	r3, #8
 8001982:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800199a:	461a      	mov	r2, r3
 800199c:	2310      	movs	r3, #16
 800199e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b6:	461a      	mov	r2, r3
 80019b8:	2340      	movs	r3, #64	; 0x40
 80019ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d023      	beq.n	8001a0e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019c8:	6a38      	ldr	r0, [r7, #32]
 80019ca:	f004 f84b 	bl	8005a64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	3304      	adds	r3, #4
 80019e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2200      	movs	r2, #0
 80019ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fab7 	bl	8001f6a <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fd2f 	bl	800247e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	3301      	adds	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f47f af2e 	bne.w	8001890 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f004 ff35 	bl	80068a8 <USB_ReadInterrupts>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a48:	d122      	bne.n	8001a90 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a70:	2100      	movs	r1, #0
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 ff3a 	bl	80028ec <HAL_PCDEx_LPM_Callback>
 8001a78:	e002      	b.n	8001a80 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f00d f8b8 	bl	800ebf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f004 ff07 	bl	80068a8 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aa4:	d112      	bne.n	8001acc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f00d f884 	bl	800ebc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 fee9 	bl	80068a8 <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ae0:	d121      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001af0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	f003 020f 	and.w	r2, r3, #15
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b16:	2101      	movs	r1, #1
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fee7 	bl	80028ec <HAL_PCDEx_LPM_Callback>
 8001b1e:	e002      	b.n	8001b26 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f00d f84f 	bl	800ebc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 febc 	bl	80068a8 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3a:	f040 80b7 	bne.w	8001cac <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2110      	movs	r1, #16
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 ff83 	bl	8005a64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b62:	e046      	b.n	8001bf2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b70:	461a      	mov	r2, r3
 8001b72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b76:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b88:	0151      	lsls	r1, r2, #5
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	440a      	add	r2, r1
 8001b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001baa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bbc:	0151      	lsls	r1, r2, #5
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	440a      	add	r2, r1
 8001bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bdc:	0151      	lsls	r1, r2, #5
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	440a      	add	r2, r1
 8001be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001be6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bee:	3301      	adds	r3, #1
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3b3      	bcc.n	8001b64 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c0e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d016      	beq.n	8001c46 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c28:	f043 030b 	orr.w	r3, r3, #11
 8001c2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c3e:	f043 030b 	orr.w	r3, r3, #11
 8001c42:	6453      	str	r3, [r2, #68]	; 0x44
 8001c44:	e015      	b.n	8001c72 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c54:	4619      	mov	r1, r3
 8001c56:	f242 032b 	movw	r3, #8235	; 0x202b
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c6c:	f043 030b 	orr.w	r3, r3, #11
 8001c70:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c84:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c96:	461a      	mov	r2, r3
 8001c98:	f004 fecc 	bl	8006a34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 fdf9 	bl	80068a8 <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc0:	d124      	bne.n	8001d0c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 fe90 	bl	80069ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 ff44 	bl	8005b5e <USB_GetDevSpeed>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681c      	ldr	r4, [r3, #0]
 8001ce2:	f001 fd63 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8001ce6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f003 fc49 	bl	8005588 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f00c ff00 	bl	800eafc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 fdc9 	bl	80068a8 <USB_ReadInterrupts>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d10a      	bne.n	8001d36 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f00c ff7b 	bl	800ec1c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f002 0208 	and.w	r2, r2, #8
 8001d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 fdb4 	bl	80068a8 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d46:	2b80      	cmp	r3, #128	; 0x80
 8001d48:	d122      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d56:	2301      	movs	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5a:	e014      	b.n	8001d86 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fb21 	bl	80023c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	3301      	adds	r3, #1
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3e5      	bcc.n	8001d5c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 fd87 	bl	80068a8 <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da4:	d13b      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001da6:	2301      	movs	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	e02b      	b.n	8001e04 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3340      	adds	r3, #64	; 0x40
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d115      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001dd2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da12      	bge.n	8001dfe <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	333f      	adds	r3, #63	; 0x3f
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4619      	mov	r1, r3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fae2 	bl	80023c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	3301      	adds	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3ce      	bcc.n	8001dac <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 fd40 	bl	80068a8 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e32:	d155      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
 8001e38:	e045      	b.n	8001ec6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d12e      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da2b      	bge.n	8001ec0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e74:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d121      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebc:	6053      	str	r3, [r2, #4]
            break;
 8001ebe:	e007      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3b4      	bcc.n	8001e3a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 fcdf 	bl	80068a8 <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef4:	d10a      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f00c fe30 	bl	800eb5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fcc9 	bl	80068a8 <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d115      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f00c fe28 	bl	800eb88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	e000      	b.n	8001f4c <HAL_PCD_IRQHandler+0x992>
      return;
 8001f4a:	bf00      	nop
    }
  }
}
 8001f4c:	3734      	adds	r7, #52	; 0x34
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}

08001f52 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_PCD_SetAddress+0x1a>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e013      	b.n	8001fc4 <HAL_PCD_SetAddress+0x42>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 fc0f 	bl	80067d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	70fb      	strb	r3, [r7, #3]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	803b      	strh	r3, [r7, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da0f      	bge.n	8002012 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 020f 	and.w	r2, r3, #15
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3338      	adds	r3, #56	; 0x38
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	705a      	strb	r2, [r3, #1]
 8002010:	e00f      	b.n	8002032 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	b2da      	uxtb	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800203e:	883a      	ldrh	r2, [r7, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	78ba      	ldrb	r2, [r7, #2]
 8002048:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d102      	bne.n	8002068 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_PCD_EP_Open+0xaa>
 8002072:	2302      	movs	r3, #2
 8002074:	e00e      	b.n	8002094 <HAL_PCD_EP_Open+0xc8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68f9      	ldr	r1, [r7, #12]
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fd8f 	bl	8005ba8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002092:	7afb      	ldrb	r3, [r7, #11]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da0f      	bge.n	80020d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 020f 	and.w	r2, r3, #15
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	3338      	adds	r3, #56	; 0x38
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	3304      	adds	r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	705a      	strb	r2, [r3, #1]
 80020ce:	e00f      	b.n	80020f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	3304      	adds	r3, #4
 80020e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_PCD_EP_Close+0x6e>
 8002106:	2302      	movs	r3, #2
 8002108:	e00e      	b.n	8002128 <HAL_PCD_EP_Close+0x8c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fdcd 	bl	8005cb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	460b      	mov	r3, r1
 800213e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	f003 020f 	and.w	r2, r3, #15
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	3304      	adds	r3, #4
 8002158:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2200      	movs	r2, #0
 8002170:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	b2da      	uxtb	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	f003 fe69 	bl	8005e70 <USB_EPStartXfer>

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	460b      	mov	r3, r1
 80021e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e8:	7afb      	ldrb	r3, [r7, #11]
 80021ea:	f003 020f 	and.w	r2, r3, #15
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	3338      	adds	r3, #56	; 0x38
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	3304      	adds	r3, #4
 80021fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2201      	movs	r2, #1
 8002216:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	b2da      	uxtb	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d102      	bne.n	8002232 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6979      	ldr	r1, [r7, #20]
 8002240:	f003 fe16 	bl	8005e70 <USB_EPStartXfer>

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	d901      	bls.n	800226c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e050      	b.n	800230e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800226c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002270:	2b00      	cmp	r3, #0
 8002272:	da0f      	bge.n	8002294 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 020f 	and.w	r2, r3, #15
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	3338      	adds	r3, #56	; 0x38
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	3304      	adds	r3, #4
 800228a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	705a      	strb	r2, [r3, #1]
 8002292:	e00d      	b.n	80022b0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	3304      	adds	r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_PCD_EP_SetStall+0x82>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e01e      	b.n	800230e <HAL_PCD_EP_SetStall+0xc0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68f9      	ldr	r1, [r7, #12]
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 f9a6 	bl	8006630 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10a      	bne.n	8002304 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	b2d9      	uxtb	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022fe:	461a      	mov	r2, r3
 8002300:	f004 fb98 	bl	8006a34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 020f 	and.w	r2, r3, #15
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	d901      	bls.n	8002334 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e042      	b.n	80023ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002338:	2b00      	cmp	r3, #0
 800233a:	da0f      	bge.n	800235c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	3338      	adds	r3, #56	; 0x38
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	3304      	adds	r3, #4
 8002352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	705a      	strb	r2, [r3, #1]
 800235a:	e00f      	b.n	800237c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	f003 020f 	and.w	r2, r3, #15
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_PCD_EP_ClrStall+0x86>
 8002398:	2302      	movs	r3, #2
 800239a:	e00e      	b.n	80023ba <HAL_PCD_EP_ClrStall+0xa4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 f9ae 	bl	800670c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da0c      	bge.n	80023f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	3338      	adds	r3, #56	; 0x38
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	3304      	adds	r3, #4
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e00c      	b.n	800240a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 020f 	and.w	r2, r3, #15
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	4618      	mov	r0, r3
 8002412:	f003 ffcd 	bl	80063b0 <USB_EPStopXfer>
 8002416:	4603      	mov	r3, r0
 8002418:	72fb      	strb	r3, [r7, #11]

  return ret;
 800241a:	7afb      	ldrb	r3, [r7, #11]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_PCD_EP_Flush+0x1a>
 800243a:	2302      	movs	r3, #2
 800243c:	e01b      	b.n	8002476 <HAL_PCD_EP_Flush+0x52>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800244a:	2b00      	cmp	r3, #0
 800244c:	da09      	bge.n	8002462 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f003 fb02 	bl	8005a64 <USB_FlushTxFifo>
 8002460:	e004      	b.n	800246c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fb30 	bl	8005acc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b08a      	sub	sp, #40	; 0x28
 8002482:	af02      	add	r7, sp, #8
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	3338      	adds	r3, #56	; 0x38
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	3304      	adds	r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d901      	bls.n	80024b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e06c      	b.n	8002590 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d902      	bls.n	80024d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3303      	adds	r3, #3
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024da:	e02b      	b.n	8002534 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d902      	bls.n	80024f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	3303      	adds	r3, #3
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68d9      	ldr	r1, [r3, #12]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002510:	b2db      	uxtb	r3, r3
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4603      	mov	r3, r0
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f003 fff4 	bl	8006504 <USB_WritePacket>

    ep->xfer_buff  += len;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	441a      	add	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	441a      	add	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	429a      	cmp	r2, r3
 8002548:	d809      	bhi.n	800255e <PCD_WriteEmptyTxFifo+0xe0>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002552:	429a      	cmp	r2, r3
 8002554:	d203      	bcs.n	800255e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1be      	bne.n	80024dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	429a      	cmp	r2, r3
 8002568:	d811      	bhi.n	800258e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	2201      	movs	r2, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	43db      	mvns	r3, r3
 8002584:	6939      	ldr	r1, [r7, #16]
 8002586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800258a:	4013      	ands	r3, r2
 800258c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	333c      	adds	r3, #60	; 0x3c
 80025b0:	3304      	adds	r3, #4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d17b      	bne.n	80026c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d015      	beq.n	8002604 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4a61      	ldr	r2, [pc, #388]	; (8002760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	f240 80b9 	bls.w	8002754 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80b3 	beq.w	8002754 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025fa:	461a      	mov	r2, r3
 80025fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002600:	6093      	str	r3, [r2, #8]
 8002602:	e0a7      	b.n	8002754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800261a:	461a      	mov	r2, r3
 800261c:	2320      	movs	r3, #32
 800261e:	6093      	str	r3, [r2, #8]
 8002620:	e098      	b.n	8002754 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 8093 	bne.w	8002754 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	4a4b      	ldr	r2, [pc, #300]	; (8002760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d90f      	bls.n	8002656 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264c:	461a      	mov	r2, r3
 800264e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002652:	6093      	str	r3, [r2, #8]
 8002654:	e07e      	b.n	8002754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	0159      	lsls	r1, r3, #5
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	440b      	add	r3, r1
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	1ad2      	subs	r2, r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d114      	bne.n	80026b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026a0:	461a      	mov	r2, r3
 80026a2:	2101      	movs	r1, #1
 80026a4:	f004 f9c6 	bl	8006a34 <USB_EP0_OutStart>
 80026a8:	e006      	b.n	80026b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	441a      	add	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f00c f99c 	bl	800e9fc <HAL_PCD_DataOutStageCallback>
 80026c4:	e046      	b.n	8002754 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	4a26      	ldr	r2, [pc, #152]	; (8002764 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d124      	bne.n	8002718 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e4:	461a      	mov	r2, r3
 80026e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ea:	6093      	str	r3, [r2, #8]
 80026ec:	e032      	b.n	8002754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002704:	461a      	mov	r2, r3
 8002706:	2320      	movs	r3, #32
 8002708:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f00c f973 	bl	800e9fc <HAL_PCD_DataOutStageCallback>
 8002716:	e01d      	b.n	8002754 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d114      	bne.n	8002748 <PCD_EP_OutXfrComplete_int+0x1b0>
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002740:	461a      	mov	r2, r3
 8002742:	2100      	movs	r1, #0
 8002744:	f004 f976 	bl	8006a34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f00c f954 	bl	800e9fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	4f54300a 	.word	0x4f54300a
 8002764:	4f54310a 	.word	0x4f54310a

08002768 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	333c      	adds	r3, #60	; 0x3c
 8002780:	3304      	adds	r3, #4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d90e      	bls.n	80027bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b4:	461a      	mov	r2, r3
 80027b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f00b ffeb 	bl	800e798 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d90c      	bls.n	80027e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d108      	bne.n	80027e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027dc:	461a      	mov	r2, r3
 80027de:	2101      	movs	r1, #1
 80027e0:	f004 f928 	bl	8006a34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	4f54300a 	.word	0x4f54300a

080027f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	70fb      	strb	r3, [r7, #3]
 8002800:	4613      	mov	r3, r2
 8002802:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d107      	bne.n	8002822 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002812:	883b      	ldrh	r3, [r7, #0]
 8002814:	0419      	lsls	r1, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	430a      	orrs	r2, r1
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
 8002820:	e028      	b.n	8002874 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	4413      	add	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e00d      	b.n	8002852 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	3340      	adds	r3, #64	; 0x40
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	4413      	add	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	3301      	adds	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	3b01      	subs	r3, #1
 8002858:	429a      	cmp	r2, r3
 800285a:	d3ec      	bcc.n	8002836 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800285c:	883b      	ldrh	r3, [r7, #0]
 800285e:	0418      	lsls	r0, r3, #16
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	3b01      	subs	r3, #1
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	4302      	orrs	r2, r0
 800286c:	3340      	adds	r3, #64	; 0x40
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	10000003 	.word	0x10000003

080028ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_PWREx_ConfigSupply+0x70>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d00a      	beq.n	800292e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_PWREx_ConfigSupply+0x70>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e01f      	b.n	800296a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e01d      	b.n	800296a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_PWREx_ConfigSupply+0x70>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f023 0207 	bic.w	r2, r3, #7
 8002936:	490f      	ldr	r1, [pc, #60]	; (8002974 <HAL_PWREx_ConfigSupply+0x70>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4313      	orrs	r3, r2
 800293c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800293e:	f7fe f9bf 	bl	8000cc0 <HAL_GetTick>
 8002942:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002944:	e009      	b.n	800295a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002946:	f7fe f9bb 	bl	8000cc0 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002954:	d901      	bls.n	800295a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e007      	b.n	800296a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_PWREx_ConfigSupply+0x70>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002966:	d1ee      	bne.n	8002946 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	58024800 	.word	0x58024800

08002978 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	58024800 	.word	0x58024800

08002998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	; 0x30
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e3c8      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8087 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029c2:	4b86      	ldr	r3, [pc, #536]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d007      	beq.n	80029de <HAL_RCC_OscConfig+0x46>
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	2b18      	cmp	r3, #24
 80029d2:	d110      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d10b      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029de:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d06c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d168      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e3a2      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x76>
 8002a00:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a75      	ldr	r2, [pc, #468]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e02e      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x98>
 8002a16:	4b71      	ldr	r3, [pc, #452]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a70      	ldr	r2, [pc, #448]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b6e      	ldr	r3, [pc, #440]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6d      	ldr	r2, [pc, #436]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0xbc>
 8002a3a:	4b68      	ldr	r3, [pc, #416]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a67      	ldr	r2, [pc, #412]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b65      	ldr	r3, [pc, #404]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a64      	ldr	r2, [pc, #400]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a54:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a60      	ldr	r2, [pc, #384]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b5e      	ldr	r3, [pc, #376]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe f924 	bl	8000cc0 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe f920 	bl	8000cc0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e356      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a8e:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe4>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe f910 	bl	8000cc0 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe f90c 	bl	8000cc0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e342      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ab6:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x10c>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 808c 	beq.w	8002bec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad4:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002adc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ade:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_RCC_OscConfig+0x162>
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2b18      	cmp	r3, #24
 8002aee:	d137      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1c8>
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d132      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002afa:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_RCC_OscConfig+0x17a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e314      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 0219 	bic.w	r2, r3, #25
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	492f      	ldr	r1, [pc, #188]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe f8cc 	bl	8000cc0 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7fe f8c8 	bl	8000cc0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e2fe      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	4920      	ldr	r1, [pc, #128]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b5e:	e045      	b.n	8002bec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d026      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 0219 	bic.w	r2, r3, #25
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4919      	ldr	r1, [pc, #100]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe f8a1 	bl	8000cc0 <HAL_GetTick>
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b82:	f7fe f89d 	bl	8000cc0 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e2d3      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	490b      	ldr	r1, [pc, #44]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
 8002bb4:	e01a      	b.n	8002bec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <HAL_RCC_OscConfig+0x244>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7fe f87d 	bl	8000cc0 <HAL_GetTick>
 8002bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bca:	f7fe f879 	bl	8000cc0 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d903      	bls.n	8002be0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e2af      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
 8002bdc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be0:	4b96      	ldr	r3, [pc, #600]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ee      	bne.n	8002bca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d06a      	beq.n	8002cce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf8:	4b90      	ldr	r3, [pc, #576]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c00:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c02:	4b8e      	ldr	r3, [pc, #568]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d007      	beq.n	8002c1e <HAL_RCC_OscConfig+0x286>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b18      	cmp	r3, #24
 8002c12:	d11b      	bne.n	8002c4c <HAL_RCC_OscConfig+0x2b4>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d116      	bne.n	8002c4c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c1e:	4b87      	ldr	r3, [pc, #540]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x29e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e282      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c36:	4b81      	ldr	r3, [pc, #516]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	497d      	ldr	r1, [pc, #500]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c4a:	e040      	b.n	8002cce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d023      	beq.n	8002c9c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c54:	4b79      	ldr	r3, [pc, #484]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a78      	ldr	r2, [pc, #480]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe f82e 	bl	8000cc0 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c68:	f7fe f82a 	bl	8000cc0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e260      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c7a:	4b70      	ldr	r3, [pc, #448]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c86:	4b6d      	ldr	r3, [pc, #436]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	4969      	ldr	r1, [pc, #420]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60cb      	str	r3, [r1, #12]
 8002c9a:	e018      	b.n	8002cce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c9c:	4b67      	ldr	r3, [pc, #412]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a66      	ldr	r2, [pc, #408]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f80a 	bl	8000cc0 <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cb0:	f7fe f806 	bl	8000cc0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e23c      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cc2:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d036      	beq.n	8002d48 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d019      	beq.n	8002d16 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce2:	4b56      	ldr	r3, [pc, #344]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce6:	4a55      	ldr	r2, [pc, #340]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cee:	f7fd ffe7 	bl	8000cc0 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf6:	f7fd ffe3 	bl	8000cc0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e219      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d08:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x35e>
 8002d14:	e018      	b.n	8002d48 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d16:	4b49      	ldr	r3, [pc, #292]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1a:	4a48      	ldr	r2, [pc, #288]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fd ffcd 	bl	8000cc0 <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2a:	f7fd ffc9 	bl	8000cc0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e1ff      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d036      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d019      	beq.n	8002d90 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d5c:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a36      	ldr	r2, [pc, #216]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d68:	f7fd ffaa 	bl	8000cc0 <HAL_GetTick>
 8002d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d70:	f7fd ffa6 	bl	8000cc0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1dc      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d82:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x3d8>
 8002d8e:	e018      	b.n	8002dc2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d9c:	f7fd ff90 	bl	8000cc0 <HAL_GetTick>
 8002da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da4:	f7fd ff8c 	bl	8000cc0 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1c2      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002db6:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8086 	beq.w	8002edc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x4a8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_RCC_OscConfig+0x4a8>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ddc:	f7fd ff70 	bl	8000cc0 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fd ff6c 	bl	8000cc0 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1a2      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_RCC_OscConfig+0x4a8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x480>
 8002e0a:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	e032      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_RCC_OscConfig+0x4ac>
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a02      	ldr	r2, [pc, #8]	; (8002e3c <HAL_RCC_OscConfig+0x4a4>)
 8002e32:	f023 0304 	bic.w	r3, r3, #4
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	e021      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e6>
 8002e3a:	bf00      	nop
 8002e3c:	58024400 	.word	0x58024400
 8002e40:	58024800 	.word	0x58024800
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d10c      	bne.n	8002e66 <HAL_RCC_OscConfig+0x4ce>
 8002e4c:	4b83      	ldr	r3, [pc, #524]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a82      	ldr	r2, [pc, #520]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	4b80      	ldr	r3, [pc, #512]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a7f      	ldr	r2, [pc, #508]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	e00b      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e6>
 8002e66:	4b7d      	ldr	r3, [pc, #500]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a7c      	ldr	r2, [pc, #496]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	4b7a      	ldr	r3, [pc, #488]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a79      	ldr	r2, [pc, #484]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d015      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7fd ff1b 	bl	8000cc0 <HAL_GetTick>
 8002e8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fd ff17 	bl	8000cc0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e14b      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea4:	4b6d      	ldr	r3, [pc, #436]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ee      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
 8002eb0:	e014      	b.n	8002edc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fd ff05 	bl	8000cc0 <HAL_GetTick>
 8002eb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fd ff01 	bl	8000cc0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e135      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ed0:	4b62      	ldr	r3, [pc, #392]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ee      	bne.n	8002eba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 812a 	beq.w	800313a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ee6:	4b5d      	ldr	r3, [pc, #372]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eee:	2b18      	cmp	r3, #24
 8002ef0:	f000 80ba 	beq.w	8003068 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	f040 8095 	bne.w	8003028 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b57      	ldr	r3, [pc, #348]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a56      	ldr	r2, [pc, #344]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fd fed9 	bl	8000cc0 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fd fed5 	bl	8000cc0 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e10b      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f24:	4b4d      	ldr	r3, [pc, #308]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f30:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f34:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <HAL_RCC_OscConfig+0x6c8>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f40:	0112      	lsls	r2, r2, #4
 8002f42:	430a      	orrs	r2, r1
 8002f44:	4945      	ldr	r1, [pc, #276]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	628b      	str	r3, [r1, #40]	; 0x28
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	025b      	lsls	r3, r3, #9
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	3b01      	subs	r3, #1
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f7a:	4938      	ldr	r1, [pc, #224]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	4a35      	ldr	r2, [pc, #212]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f8c:	4b33      	ldr	r3, [pc, #204]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f90:	4b34      	ldr	r3, [pc, #208]	; (8003064 <HAL_RCC_OscConfig+0x6cc>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f98:	00d2      	lsls	r2, r2, #3
 8002f9a:	4930      	ldr	r1, [pc, #192]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fa0:	4b2e      	ldr	r3, [pc, #184]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	f023 020c 	bic.w	r2, r3, #12
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	492b      	ldr	r1, [pc, #172]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fb2:	4b2a      	ldr	r3, [pc, #168]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	f023 0202 	bic.w	r2, r3, #2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	4927      	ldr	r1, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	4a24      	ldr	r2, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd0:	4b22      	ldr	r3, [pc, #136]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4a21      	ldr	r2, [pc, #132]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	4a1e      	ldr	r2, [pc, #120]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a18      	ldr	r2, [pc, #96]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd fe5e 	bl	8000cc0 <HAL_GetTick>
 8003004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fd fe5a 	bl	8000cc0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e090      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x670>
 8003026:	e088      	b.n	800313a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0b      	ldr	r2, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 800302e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fd fe44 	bl	8000cc0 <HAL_GetTick>
 8003038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7fd fe40 	bl	8000cc0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e076      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800304e:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_OscConfig+0x6c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x6a4>
 800305a:	e06e      	b.n	800313a <HAL_RCC_OscConfig+0x7a2>
 800305c:	58024400 	.word	0x58024400
 8003060:	fffffc0c 	.word	0xfffffc0c
 8003064:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_RCC_OscConfig+0x7ac>)
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800306e:	4b35      	ldr	r3, [pc, #212]	; (8003144 <HAL_RCC_OscConfig+0x7ac>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b01      	cmp	r3, #1
 800307a:	d031      	beq.n	80030e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f003 0203 	and.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d12a      	bne.n	80030e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d122      	bne.n	80030e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d11a      	bne.n	80030e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	0a5b      	lsrs	r3, r3, #9
 80030ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d111      	bne.n	80030e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d108      	bne.n	80030e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	0e1b      	lsrs	r3, r3, #24
 80030d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e02b      	b.n	800313c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80030e4:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_RCC_OscConfig+0x7ac>)
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	08db      	lsrs	r3, r3, #3
 80030ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d01f      	beq.n	800313a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_OscConfig+0x7ac>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	4a11      	ldr	r2, [pc, #68]	; (8003144 <HAL_RCC_OscConfig+0x7ac>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003106:	f7fd fddb 	bl	8000cc0 <HAL_GetTick>
 800310a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800310c:	bf00      	nop
 800310e:	f7fd fdd7 	bl	8000cc0 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	4293      	cmp	r3, r2
 8003118:	d0f9      	beq.n	800310e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCC_OscConfig+0x7ac>)
 800311c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RCC_OscConfig+0x7b0>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003126:	00d2      	lsls	r2, r2, #3
 8003128:	4906      	ldr	r1, [pc, #24]	; (8003144 <HAL_RCC_OscConfig+0x7ac>)
 800312a:	4313      	orrs	r3, r2
 800312c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_RCC_OscConfig+0x7ac>)
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_RCC_OscConfig+0x7ac>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3730      	adds	r7, #48	; 0x30
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	58024400 	.word	0x58024400
 8003148:	ffff0007 	.word	0xffff0007

0800314c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e19c      	b.n	800349a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b8a      	ldr	r3, [pc, #552]	; (800338c <HAL_RCC_ClockConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d910      	bls.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b87      	ldr	r3, [pc, #540]	; (800338c <HAL_RCC_ClockConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 020f 	bic.w	r2, r3, #15
 8003176:	4985      	ldr	r1, [pc, #532]	; (800338c <HAL_RCC_ClockConfig+0x240>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b83      	ldr	r3, [pc, #524]	; (800338c <HAL_RCC_ClockConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e184      	b.n	800349a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d010      	beq.n	80031be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	4b7b      	ldr	r3, [pc, #492]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d908      	bls.n	80031be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031ac:	4b78      	ldr	r3, [pc, #480]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	4975      	ldr	r1, [pc, #468]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	4b70      	ldr	r3, [pc, #448]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d908      	bls.n	80031ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031da:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	496a      	ldr	r1, [pc, #424]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d010      	beq.n	800321a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	4b64      	ldr	r3, [pc, #400]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003204:	429a      	cmp	r2, r3
 8003206:	d908      	bls.n	800321a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003208:	4b61      	ldr	r3, [pc, #388]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	495e      	ldr	r1, [pc, #376]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 8003216:	4313      	orrs	r3, r2
 8003218:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d010      	beq.n	8003248 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003232:	429a      	cmp	r2, r3
 8003234:	d908      	bls.n	8003248 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003236:	4b56      	ldr	r3, [pc, #344]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4953      	ldr	r1, [pc, #332]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 8003244:	4313      	orrs	r3, r2
 8003246:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d010      	beq.n	8003276 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	4b4d      	ldr	r3, [pc, #308]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	429a      	cmp	r2, r3
 8003262:	d908      	bls.n	8003276 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b4a      	ldr	r3, [pc, #296]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f023 020f 	bic.w	r2, r3, #15
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4947      	ldr	r1, [pc, #284]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 8003272:	4313      	orrs	r3, r2
 8003274:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d055      	beq.n	800332e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003282:	4b43      	ldr	r3, [pc, #268]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4940      	ldr	r1, [pc, #256]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 8003290:	4313      	orrs	r3, r2
 8003292:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d107      	bne.n	80032ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800329c:	4b3c      	ldr	r3, [pc, #240]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d121      	bne.n	80032ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0f6      	b.n	800349a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b4:	4b36      	ldr	r3, [pc, #216]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d115      	bne.n	80032ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0ea      	b.n	800349a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032cc:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0de      	b.n	800349a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032dc:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0d6      	b.n	800349a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ec:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f023 0207 	bic.w	r2, r3, #7
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4925      	ldr	r1, [pc, #148]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fe:	f7fd fcdf 	bl	8000cc0 <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003304:	e00a      	b.n	800331c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003306:	f7fd fcdb 	bl	8000cc0 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0be      	b.n	800349a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	429a      	cmp	r2, r3
 800332c:	d1eb      	bne.n	8003306 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d010      	beq.n	800335c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	429a      	cmp	r2, r3
 8003348:	d208      	bcs.n	800335c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	490e      	ldr	r1, [pc, #56]	; (8003390 <HAL_RCC_ClockConfig+0x244>)
 8003358:	4313      	orrs	r3, r2
 800335a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d214      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_RCC_ClockConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 020f 	bic.w	r2, r3, #15
 8003372:	4906      	ldr	r1, [pc, #24]	; (800338c <HAL_RCC_ClockConfig+0x240>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b04      	ldr	r3, [pc, #16]	; (800338c <HAL_RCC_ClockConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d005      	beq.n	8003394 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e086      	b.n	800349a <HAL_RCC_ClockConfig+0x34e>
 800338c:	52002000 	.word	0x52002000
 8003390:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d010      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d208      	bcs.n	80033c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033b0:	4b3c      	ldr	r3, [pc, #240]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	4939      	ldr	r1, [pc, #228]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d010      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033da:	429a      	cmp	r2, r3
 80033dc:	d208      	bcs.n	80033f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	492e      	ldr	r1, [pc, #184]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d010      	beq.n	800341e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003408:	429a      	cmp	r2, r3
 800340a:	d208      	bcs.n	800341e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4922      	ldr	r1, [pc, #136]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 800341a:	4313      	orrs	r3, r2
 800341c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d010      	beq.n	800344c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003436:	429a      	cmp	r2, r3
 8003438:	d208      	bcs.n	800344c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800343a:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4917      	ldr	r1, [pc, #92]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 8003448:	4313      	orrs	r3, r2
 800344a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800344c:	f000 f834 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	4912      	ldr	r1, [pc, #72]	; (80034a8 <HAL_RCC_ClockConfig+0x35c>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
 8003468:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_RCC_ClockConfig+0x358>)
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <HAL_RCC_ClockConfig+0x35c>)
 8003474:	5cd3      	ldrb	r3, [r2, r3]
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x360>)
 8003482:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003484:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <HAL_RCC_ClockConfig+0x364>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x368>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd f9ee 	bl	8000870 <HAL_InitTick>
 8003494:	4603      	mov	r3, r0
 8003496:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	58024400 	.word	0x58024400
 80034a8:	08010a8c 	.word	0x08010a8c
 80034ac:	24000004 	.word	0x24000004
 80034b0:	24000000 	.word	0x24000000
 80034b4:	24000008 	.word	0x24000008

080034b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034be:	4bb3      	ldr	r3, [pc, #716]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c6:	2b18      	cmp	r3, #24
 80034c8:	f200 8155 	bhi.w	8003776 <HAL_RCC_GetSysClockFreq+0x2be>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	08003539 	.word	0x08003539
 80034d8:	08003777 	.word	0x08003777
 80034dc:	08003777 	.word	0x08003777
 80034e0:	08003777 	.word	0x08003777
 80034e4:	08003777 	.word	0x08003777
 80034e8:	08003777 	.word	0x08003777
 80034ec:	08003777 	.word	0x08003777
 80034f0:	08003777 	.word	0x08003777
 80034f4:	0800355f 	.word	0x0800355f
 80034f8:	08003777 	.word	0x08003777
 80034fc:	08003777 	.word	0x08003777
 8003500:	08003777 	.word	0x08003777
 8003504:	08003777 	.word	0x08003777
 8003508:	08003777 	.word	0x08003777
 800350c:	08003777 	.word	0x08003777
 8003510:	08003777 	.word	0x08003777
 8003514:	08003565 	.word	0x08003565
 8003518:	08003777 	.word	0x08003777
 800351c:	08003777 	.word	0x08003777
 8003520:	08003777 	.word	0x08003777
 8003524:	08003777 	.word	0x08003777
 8003528:	08003777 	.word	0x08003777
 800352c:	08003777 	.word	0x08003777
 8003530:	08003777 	.word	0x08003777
 8003534:	0800356b 	.word	0x0800356b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003538:	4b94      	ldr	r3, [pc, #592]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d009      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003544:	4b91      	ldr	r3, [pc, #580]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	4a90      	ldr	r2, [pc, #576]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003556:	e111      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003558:	4b8d      	ldr	r3, [pc, #564]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800355a:	61bb      	str	r3, [r7, #24]
      break;
 800355c:	e10e      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800355e:	4b8d      	ldr	r3, [pc, #564]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003560:	61bb      	str	r3, [r7, #24]
      break;
 8003562:	e10b      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003564:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003566:	61bb      	str	r3, [r7, #24]
      break;
 8003568:	e108      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800356a:	4b88      	ldr	r3, [pc, #544]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003574:	4b85      	ldr	r3, [pc, #532]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800357e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003580:	4b82      	ldr	r3, [pc, #520]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800358a:	4b80      	ldr	r3, [pc, #512]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358e:	08db      	lsrs	r3, r3, #3
 8003590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80e1 	beq.w	8003770 <HAL_RCC_GetSysClockFreq+0x2b8>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	f000 8083 	beq.w	80036bc <HAL_RCC_GetSysClockFreq+0x204>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	f200 80a1 	bhi.w	8003700 <HAL_RCC_GetSysClockFreq+0x248>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x114>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d056      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035ca:	e099      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02d      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035d8:	4b6c      	ldr	r3, [pc, #432]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	08db      	lsrs	r3, r3, #3
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	4a6b      	ldr	r2, [pc, #428]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003602:	4b62      	ldr	r3, [pc, #392]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	ed97 6a02 	vldr	s12, [r7, #8]
 8003616:	eddf 5a61 	vldr	s11, [pc, #388]	; 800379c <HAL_RCC_GetSysClockFreq+0x2e4>
 800361a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003632:	e087      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003646:	4b51      	ldr	r3, [pc, #324]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003656:	ed97 6a02 	vldr	s12, [r7, #8]
 800365a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800379c <HAL_RCC_GetSysClockFreq+0x2e4>
 800365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003676:	e065      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800368a:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369a:	ed97 6a02 	vldr	s12, [r7, #8]
 800369e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800379c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036ba:	e043      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ce:	4b2f      	ldr	r3, [pc, #188]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036de:	ed97 6a02 	vldr	s12, [r7, #8]
 80036e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800379c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036fe:	e021      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800370e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003722:	ed97 6a02 	vldr	s12, [r7, #8]
 8003726:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800379c <HAL_RCC_GetSysClockFreq+0x2e4>
 800372a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003742:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	0a5b      	lsrs	r3, r3, #9
 800374a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800374e:	3301      	adds	r3, #1
 8003750:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800375c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003768:	ee17 3a90 	vmov	r3, s15
 800376c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800376e:	e005      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
      break;
 8003774:	e002      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003778:	61bb      	str	r3, [r7, #24]
      break;
 800377a:	bf00      	nop
  }

  return sysclockfreq;
 800377c:	69bb      	ldr	r3, [r7, #24]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	; 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	58024400 	.word	0x58024400
 8003790:	03d09000 	.word	0x03d09000
 8003794:	003d0900 	.word	0x003d0900
 8003798:	017d7840 	.word	0x017d7840
 800379c:	46000000 	.word	0x46000000
 80037a0:	4c742400 	.word	0x4c742400
 80037a4:	4a742400 	.word	0x4a742400
 80037a8:	4bbebc20 	.word	0x4bbebc20

080037ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037b2:	f7ff fe81 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_RCC_GetHCLKFreq+0x50>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	490f      	ldr	r1, [pc, #60]	; (8003800 <HAL_RCC_GetHCLKFreq+0x54>)
 80037c4:	5ccb      	ldrb	r3, [r1, r3]
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_RCC_GetHCLKFreq+0x50>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	4a09      	ldr	r2, [pc, #36]	; (8003800 <HAL_RCC_GetHCLKFreq+0x54>)
 80037da:	5cd3      	ldrb	r3, [r2, r3]
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <HAL_RCC_GetHCLKFreq+0x58>)
 80037e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037ea:	4a07      	ldr	r2, [pc, #28]	; (8003808 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <HAL_RCC_GetHCLKFreq+0x58>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	58024400 	.word	0x58024400
 8003800:	08010a8c 	.word	0x08010a8c
 8003804:	24000004 	.word	0x24000004
 8003808:	24000000 	.word	0x24000000

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003810:	f7ff ffcc 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4904      	ldr	r1, [pc, #16]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	58024400 	.word	0x58024400
 8003834:	08010a8c 	.word	0x08010a8c

08003838 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223f      	movs	r2, #63	; 0x3f
 8003846:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <HAL_RCC_GetClockConfig+0x7c>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f003 0207 	and.w	r2, r3, #7
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <HAL_RCC_GetClockConfig+0x7c>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <HAL_RCC_GetClockConfig+0x7c>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_RCC_GetClockConfig+0x7c>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <HAL_RCC_GetClockConfig+0x7c>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_GetClockConfig+0x7c>)
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_RCC_GetClockConfig+0x7c>)
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_RCC_GetClockConfig+0x80>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	601a      	str	r2, [r3, #0]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	58024400 	.word	0x58024400
 80038b8:	52002000 	.word	0x52002000

080038bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b0c6      	sub	sp, #280	; 0x118
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038c8:	2300      	movs	r3, #0
 80038ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80038e0:	2500      	movs	r5, #0
 80038e2:	ea54 0305 	orrs.w	r3, r4, r5
 80038e6:	d049      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80038e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038f2:	d02f      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80038f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038f8:	d828      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038fe:	d01a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003904:	d822      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800390a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800390e:	d007      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003910:	e01c      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003912:	4bab      	ldr	r3, [pc, #684]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	4aaa      	ldr	r2, [pc, #680]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800391e:	e01a      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003924:	3308      	adds	r3, #8
 8003926:	2102      	movs	r1, #2
 8003928:	4618      	mov	r0, r3
 800392a:	f001 f967 	bl	8004bfc <RCCEx_PLL2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003934:	e00f      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800393a:	3328      	adds	r3, #40	; 0x28
 800393c:	2102      	movs	r1, #2
 800393e:	4618      	mov	r0, r3
 8003940:	f001 fa0e 	bl	8004d60 <RCCEx_PLL3_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800394a:	e004      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003956:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800395e:	4b98      	ldr	r3, [pc, #608]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800396a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396c:	4a94      	ldr	r2, [pc, #592]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800396e:	430b      	orrs	r3, r1
 8003970:	6513      	str	r3, [r2, #80]	; 0x50
 8003972:	e003      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003978:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003988:	f04f 0900 	mov.w	r9, #0
 800398c:	ea58 0309 	orrs.w	r3, r8, r9
 8003990:	d047      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	2b04      	cmp	r3, #4
 800399a:	d82a      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039b9 	.word	0x080039b9
 80039a8:	080039c7 	.word	0x080039c7
 80039ac:	080039dd 	.word	0x080039dd
 80039b0:	080039fb 	.word	0x080039fb
 80039b4:	080039fb 	.word	0x080039fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4b81      	ldr	r3, [pc, #516]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4a80      	ldr	r2, [pc, #512]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039c4:	e01a      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ca:	3308      	adds	r3, #8
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f914 	bl	8004bfc <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039da:	e00f      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e0:	3328      	adds	r3, #40	; 0x28
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 f9bb 	bl	8004d60 <RCCEx_PLL3_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039f0:	e004      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80039fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a04:	4b6e      	ldr	r3, [pc, #440]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	f023 0107 	bic.w	r1, r3, #7
 8003a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	4a6b      	ldr	r2, [pc, #428]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6513      	str	r3, [r2, #80]	; 0x50
 8003a18:	e003      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a1e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003a2e:	f04f 0b00 	mov.w	fp, #0
 8003a32:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a36:	d05b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a40:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003a44:	d03b      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003a46:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003a4a:	d834      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a50:	d037      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a56:	d82e      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a5c:	d033      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003a5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a62:	d828      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a68:	d01a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6e:	d822      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a78:	d007      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003a7a:	e01c      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7c:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4a4f      	ldr	r2, [pc, #316]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a88:	e01e      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a8e:	3308      	adds	r3, #8
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 f8b2 	bl	8004bfc <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a9e:	e013      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aa4:	3328      	adds	r3, #40	; 0x28
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 f959 	bl	8004d60 <RCCEx_PLL3_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ad0:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003adc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ae0:	4a37      	ldr	r2, [pc, #220]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae6:	e003      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003afc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	d05d      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b18:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b1c:	d03b      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003b1e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b22:	d834      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b28:	d037      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003b2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b2e:	d82e      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003b30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b34:	d033      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003b36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b3a:	d828      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b40:	d01a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b46:	d822      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b50:	d007      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003b52:	e01c      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b60:	e01e      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b66:	3308      	adds	r3, #8
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f846 	bl	8004bfc <RCCEx_PLL2_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b76:	e013      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b7c:	3328      	adds	r3, #40	; 0x28
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f8ed 	bl	8004d60 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b94:	e004      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bb8:	4a01      	ldr	r2, [pc, #4]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbe:	e005      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003bc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003bd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003be2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4313      	orrs	r3, r2
 8003bea:	d03a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	2b30      	cmp	r3, #48	; 0x30
 8003bf4:	d01f      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003bf6:	2b30      	cmp	r3, #48	; 0x30
 8003bf8:	d819      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d00c      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d815      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d019      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d111      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0a:	4baa      	ldr	r3, [pc, #680]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	4aa9      	ldr	r2, [pc, #676]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003c16:	e011      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 ffeb 	bl	8004bfc <RCCEx_PLL2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003c2c:	e006      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c44:	4b9b      	ldr	r3, [pc, #620]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	4a98      	ldr	r2, [pc, #608]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003c78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d051      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c8c:	d035      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003c8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c92:	d82e      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c98:	d031      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003c9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c9e:	d828      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d01a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	d822      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	d007      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003cb6:	e01c      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4b7e      	ldr	r3, [pc, #504]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4a7d      	ldr	r2, [pc, #500]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cc4:	e01c      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cca:	3308      	adds	r3, #8
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 ff94 	bl	8004bfc <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cda:	e011      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ce0:	3328      	adds	r3, #40	; 0x28
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 f83b 	bl	8004d60 <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cf0:	e006      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003cf8:	e002      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d08:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	4a67      	ldr	r2, [pc, #412]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6513      	str	r3, [r2, #80]	; 0x50
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003d32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d3c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	d053      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d50:	d033      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003d52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d56:	d82c      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003d58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d5c:	d02f      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003d5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d62:	d826      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d68:	d02b      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003d6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d6e:	d820      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d74:	d012      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d7a:	d81a      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d022      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	d115      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 ff34 	bl	8004bfc <RCCEx_PLL2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d9a:	e015      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da0:	3328      	adds	r3, #40	; 0x28
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 ffdb 	bl	8004d60 <RCCEx_PLL3_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003db8:	e006      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003dba:	bf00      	nop
 8003dbc:	e004      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e002      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003dc2:	bf00      	nop
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003dd0:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	4a35      	ldr	r2, [pc, #212]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6513      	str	r3, [r2, #80]	; 0x50
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003dea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003e04:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d058      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e1a:	d033      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e20:	d82c      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e26:	d02f      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d826      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003e2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e32:	d02b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003e34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e38:	d820      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3e:	d012      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e44:	d81a      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d022      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e4e:	d115      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e54:	3308      	adds	r3, #8
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fecf 	bl	8004bfc <RCCEx_PLL2_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e64:	e015      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e6a:	3328      	adds	r3, #40	; 0x28
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 ff76 	bl	8004d60 <RCCEx_PLL3_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e82:	e006      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e84:	bf00      	nop
 8003e86:	e004      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e88:	bf00      	nop
 8003e8a:	e002      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e8c:	bf00      	nop
 8003e8e:	e000      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10e      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eaa:	4a02      	ldr	r2, [pc, #8]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003eb2:	bf00      	nop
 8003eb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ebc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ed6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4313      	orrs	r3, r2
 8003ede:	d037      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eea:	d00e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef0:	d816      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d018      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efa:	d111      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003efc:	4bc4      	ldr	r3, [pc, #784]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4ac3      	ldr	r2, [pc, #780]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f08:	e00f      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f0e:	3308      	adds	r3, #8
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fe72 	bl	8004bfc <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f1e:	e004      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f32:	4bb7      	ldr	r3, [pc, #732]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f36:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f40:	4ab3      	ldr	r2, [pc, #716]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6513      	str	r3, [r2, #80]	; 0x50
 8003f46:	e003      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d039      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d81c      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003f7a:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003fbd 	.word	0x08003fbd
 8003f84:	08003f91 	.word	0x08003f91
 8003f88:	08003f9f 	.word	0x08003f9f
 8003f8c:	08003fbd 	.word	0x08003fbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f90:	4b9f      	ldr	r3, [pc, #636]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	4a9e      	ldr	r2, [pc, #632]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f9c:	e00f      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fe28 	bl	8004bfc <RCCEx_PLL2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fb2:	e004      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003fba:	e000      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003fc6:	4b92      	ldr	r3, [pc, #584]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	f023 0103 	bic.w	r1, r3, #3
 8003fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd4:	4a8e      	ldr	r2, [pc, #568]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fda:	e003      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fe0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ffa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	f000 8099 	beq.w	8004138 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004006:	4b83      	ldr	r3, [pc, #524]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a82      	ldr	r2, [pc, #520]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004012:	f7fc fe55 	bl	8000cc0 <HAL_GetTick>
 8004016:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800401a:	e00b      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401c:	f7fc fe50 	bl	8000cc0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b64      	cmp	r3, #100	; 0x64
 800402a:	d903      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004032:	e005      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004034:	4b77      	ldr	r3, [pc, #476]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ed      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004044:	2b00      	cmp	r3, #0
 8004046:	d173      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004048:	4b71      	ldr	r3, [pc, #452]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800404a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004050:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004054:	4053      	eors	r3, r2
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800405e:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004066:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800406a:	4b69      	ldr	r3, [pc, #420]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4a68      	ldr	r2, [pc, #416]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004076:	4b66      	ldr	r3, [pc, #408]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	4a65      	ldr	r2, [pc, #404]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004082:	4a63      	ldr	r2, [pc, #396]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004084:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800408a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800408e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004096:	d118      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fc fe12 	bl	8000cc0 <HAL_GetTick>
 800409c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040a0:	e00d      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fc fe0d 	bl	8000cc0 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040ac:	1ad2      	subs	r2, r2, r3
 80040ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d903      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80040bc:	e005      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040be:	4b54      	ldr	r3, [pc, #336]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0eb      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80040ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d129      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e2:	d10e      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80040e4:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040f4:	091a      	lsrs	r2, r3, #4
 80040f6:	4b48      	ldr	r3, [pc, #288]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	4a45      	ldr	r2, [pc, #276]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6113      	str	r3, [r2, #16]
 8004100:	e005      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004102:	4b43      	ldr	r3, [pc, #268]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	4a42      	ldr	r2, [pc, #264]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004108:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800410c:	6113      	str	r3, [r2, #16]
 800410e:	4b40      	ldr	r3, [pc, #256]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004110:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004116:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800411a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411e:	4a3c      	ldr	r2, [pc, #240]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004120:	430b      	orrs	r3, r1
 8004122:	6713      	str	r3, [r2, #112]	; 0x70
 8004124:	e008      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004126:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800412a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800412e:	e003      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004134:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f002 0301 	and.w	r3, r2, #1
 8004144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004148:	2300      	movs	r3, #0
 800414a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800414e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004152:	460b      	mov	r3, r1
 8004154:	4313      	orrs	r3, r2
 8004156:	f000 808f 	beq.w	8004278 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800415a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800415e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004160:	2b28      	cmp	r3, #40	; 0x28
 8004162:	d871      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	08004251 	.word	0x08004251
 8004170:	08004249 	.word	0x08004249
 8004174:	08004249 	.word	0x08004249
 8004178:	08004249 	.word	0x08004249
 800417c:	08004249 	.word	0x08004249
 8004180:	08004249 	.word	0x08004249
 8004184:	08004249 	.word	0x08004249
 8004188:	08004249 	.word	0x08004249
 800418c:	0800421d 	.word	0x0800421d
 8004190:	08004249 	.word	0x08004249
 8004194:	08004249 	.word	0x08004249
 8004198:	08004249 	.word	0x08004249
 800419c:	08004249 	.word	0x08004249
 80041a0:	08004249 	.word	0x08004249
 80041a4:	08004249 	.word	0x08004249
 80041a8:	08004249 	.word	0x08004249
 80041ac:	08004233 	.word	0x08004233
 80041b0:	08004249 	.word	0x08004249
 80041b4:	08004249 	.word	0x08004249
 80041b8:	08004249 	.word	0x08004249
 80041bc:	08004249 	.word	0x08004249
 80041c0:	08004249 	.word	0x08004249
 80041c4:	08004249 	.word	0x08004249
 80041c8:	08004249 	.word	0x08004249
 80041cc:	08004251 	.word	0x08004251
 80041d0:	08004249 	.word	0x08004249
 80041d4:	08004249 	.word	0x08004249
 80041d8:	08004249 	.word	0x08004249
 80041dc:	08004249 	.word	0x08004249
 80041e0:	08004249 	.word	0x08004249
 80041e4:	08004249 	.word	0x08004249
 80041e8:	08004249 	.word	0x08004249
 80041ec:	08004251 	.word	0x08004251
 80041f0:	08004249 	.word	0x08004249
 80041f4:	08004249 	.word	0x08004249
 80041f8:	08004249 	.word	0x08004249
 80041fc:	08004249 	.word	0x08004249
 8004200:	08004249 	.word	0x08004249
 8004204:	08004249 	.word	0x08004249
 8004208:	08004249 	.word	0x08004249
 800420c:	08004251 	.word	0x08004251
 8004210:	58024400 	.word	0x58024400
 8004214:	58024800 	.word	0x58024800
 8004218:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800421c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004220:	3308      	adds	r3, #8
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fce9 	bl	8004bfc <RCCEx_PLL2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004230:	e00f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004236:	3328      	adds	r3, #40	; 0x28
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fd90 	bl	8004d60 <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800425a:	4bbf      	ldr	r3, [pc, #764]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004268:	4abb      	ldr	r2, [pc, #748]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800426a:	430b      	orrs	r3, r1
 800426c:	6553      	str	r3, [r2, #84]	; 0x54
 800426e:	e003      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004274:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f002 0302 	and.w	r3, r2, #2
 8004284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800428e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d041      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d824      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042f5 	.word	0x080042f5
 80042ac:	080042c1 	.word	0x080042c1
 80042b0:	080042d7 	.word	0x080042d7
 80042b4:	080042f5 	.word	0x080042f5
 80042b8:	080042f5 	.word	0x080042f5
 80042bc:	080042f5 	.word	0x080042f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c4:	3308      	adds	r3, #8
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fc97 	bl	8004bfc <RCCEx_PLL2_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042d4:	e00f      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042da:	3328      	adds	r3, #40	; 0x28
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fd3e 	bl	8004d60 <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042fe:	4b96      	ldr	r3, [pc, #600]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f023 0107 	bic.w	r1, r3, #7
 8004306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800430a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430c:	4a92      	ldr	r2, [pc, #584]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800430e:	430b      	orrs	r3, r1
 8004310:	6553      	str	r3, [r2, #84]	; 0x54
 8004312:	e003      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004318:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800431c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f002 0304 	and.w	r3, r2, #4
 8004328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004332:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d044      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	2b05      	cmp	r3, #5
 8004346:	d825      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	0800439d 	.word	0x0800439d
 8004354:	08004369 	.word	0x08004369
 8004358:	0800437f 	.word	0x0800437f
 800435c:	0800439d 	.word	0x0800439d
 8004360:	0800439d 	.word	0x0800439d
 8004364:	0800439d 	.word	0x0800439d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800436c:	3308      	adds	r3, #8
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fc43 	bl	8004bfc <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800437c:	e00f      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004382:	3328      	adds	r3, #40	; 0x28
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fcea 	bl	8004d60 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004392:	e004      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800439a:	e000      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800439c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a6:	4b6c      	ldr	r3, [pc, #432]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	f023 0107 	bic.w	r1, r3, #7
 80043ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	4a68      	ldr	r2, [pc, #416]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6593      	str	r3, [r2, #88]	; 0x58
 80043bc:	e003      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f002 0320 	and.w	r3, r2, #32
 80043d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80043dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4313      	orrs	r3, r2
 80043e4:	d055      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80043e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f2:	d033      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80043f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f8:	d82c      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fe:	d02f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004404:	d826      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004406:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800440a:	d02b      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800440c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004410:	d820      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004416:	d012      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800441c:	d81a      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d022      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004426:	d115      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800442c:	3308      	adds	r3, #8
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fbe3 	bl	8004bfc <RCCEx_PLL2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800443c:	e015      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004442:	3328      	adds	r3, #40	; 0x28
 8004444:	2102      	movs	r1, #2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fc8a 	bl	8004d60 <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004452:	e00a      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800445a:	e006      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800445c:	bf00      	nop
 800445e:	e004      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004460:	bf00      	nop
 8004462:	e002      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004464:	bf00      	nop
 8004466:	e000      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800446a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004472:	4b39      	ldr	r3, [pc, #228]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800447a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800447e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004482:	4a35      	ldr	r2, [pc, #212]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004484:	430b      	orrs	r3, r1
 8004486:	6553      	str	r3, [r2, #84]	; 0x54
 8004488:	e003      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800448e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800449e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044a2:	2300      	movs	r3, #0
 80044a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044a8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d058      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80044b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044be:	d033      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80044c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044c4:	d82c      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ca:	d02f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d826      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80044d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044d6:	d02b      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80044d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044dc:	d820      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e2:	d012      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e8:	d81a      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d022      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f2:	d115      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044f8:	3308      	adds	r3, #8
 80044fa:	2100      	movs	r1, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fb7d 	bl	8004bfc <RCCEx_PLL2_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004508:	e015      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800450a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800450e:	3328      	adds	r3, #40	; 0x28
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fc24 	bl	8004d60 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800451e:	e00a      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004526:	e006      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004528:	bf00      	nop
 800452a:	e004      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800452c:	bf00      	nop
 800452e:	e002      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004530:	bf00      	nop
 8004532:	e000      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004536:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10e      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800454a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800454e:	4a02      	ldr	r2, [pc, #8]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004550:	430b      	orrs	r3, r1
 8004552:	6593      	str	r3, [r2, #88]	; 0x58
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004556:	bf00      	nop
 8004558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004560:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004570:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004574:	2300      	movs	r3, #0
 8004576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800457a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800457e:	460b      	mov	r3, r1
 8004580:	4313      	orrs	r3, r2
 8004582:	d055      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004588:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800458c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004590:	d033      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004592:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004596:	d82c      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459c:	d02f      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800459e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a2:	d826      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80045a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045a8:	d02b      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80045aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045ae:	d820      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b4:	d012      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80045b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ba:	d81a      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d022      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c4:	d115      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ca:	3308      	adds	r3, #8
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fb14 	bl	8004bfc <RCCEx_PLL2_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045da:	e015      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e0:	3328      	adds	r3, #40	; 0x28
 80045e2:	2102      	movs	r1, #2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fbbb 	bl	8004d60 <RCCEx_PLL3_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045f0:	e00a      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004608:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004610:	4ba0      	ldr	r3, [pc, #640]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800461c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004620:	4a9c      	ldr	r2, [pc, #624]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004622:	430b      	orrs	r3, r1
 8004624:	6593      	str	r3, [r2, #88]	; 0x58
 8004626:	e003      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800462c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f002 0308 	and.w	r3, r2, #8
 800463c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004646:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d01e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d10c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800465e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004662:	3328      	adds	r3, #40	; 0x28
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fb7a 	bl	8004d60 <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004678:	4b86      	ldr	r3, [pc, #536]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004688:	4a82      	ldr	r2, [pc, #520]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800468a:	430b      	orrs	r3, r1
 800468c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800468e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f002 0310 	and.w	r3, r2, #16
 800469a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046a4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d01e      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80046ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ba:	d10c      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c0:	3328      	adds	r3, #40	; 0x28
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fb4b 	bl	8004d60 <RCCEx_PLL3_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046d6:	4b6f      	ldr	r3, [pc, #444]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e6:	4a6b      	ldr	r2, [pc, #428]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80046f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046fa:	2300      	movs	r3, #0
 80046fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046fe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004702:	460b      	mov	r3, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	d03e      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800470c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004714:	d022      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800471a:	d81b      	bhi.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004724:	d00b      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004726:	e015      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800472c:	3308      	adds	r3, #8
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fa63 	bl	8004bfc <RCCEx_PLL2_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800473c:	e00f      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800473e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004742:	3328      	adds	r3, #40	; 0x28
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fb0a 	bl	8004d60 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004752:	e004      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800475a:	e000      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800475c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800475e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10b      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004766:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800476e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004772:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004776:	4a47      	ldr	r2, [pc, #284]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004778:	430b      	orrs	r3, r1
 800477a:	6593      	str	r3, [r2, #88]	; 0x58
 800477c:	e003      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004782:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004792:	673b      	str	r3, [r7, #112]	; 0x70
 8004794:	2300      	movs	r3, #0
 8004796:	677b      	str	r3, [r7, #116]	; 0x74
 8004798:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800479c:	460b      	mov	r3, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	d03b      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80047a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047ae:	d01f      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80047b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047b4:	d818      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80047b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80047bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047c0:	d007      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80047c2:	e011      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c4:	4b33      	ldr	r3, [pc, #204]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	4a32      	ldr	r2, [pc, #200]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80047ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80047d0:	e00f      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d6:	3328      	adds	r3, #40	; 0x28
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fac0 	bl	8004d60 <RCCEx_PLL3_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80047e6:	e004      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80047ee:	e000      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80047f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047fa:	4b26      	ldr	r3, [pc, #152]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480a:	4a22      	ldr	r2, [pc, #136]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800480c:	430b      	orrs	r3, r1
 800480e:	6553      	str	r3, [r2, #84]	; 0x54
 8004810:	e003      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004812:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004816:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800481a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004826:	66bb      	str	r3, [r7, #104]	; 0x68
 8004828:	2300      	movs	r3, #0
 800482a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800482c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004830:	460b      	mov	r3, r1
 8004832:	4313      	orrs	r3, r2
 8004834:	d034      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004844:	d007      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004846:	e011      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004848:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a11      	ldr	r2, [pc, #68]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800484e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004854:	e00e      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800485a:	3308      	adds	r3, #8
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f9cc 	bl	8004bfc <RCCEx_PLL2_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800486a:	e003      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004874:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800487e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488a:	4a02      	ldr	r2, [pc, #8]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800488c:	430b      	orrs	r3, r1
 800488e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004892:	bf00      	nop
 8004894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800489c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80048ac:	663b      	str	r3, [r7, #96]	; 0x60
 80048ae:	2300      	movs	r3, #0
 80048b0:	667b      	str	r3, [r7, #100]	; 0x64
 80048b2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80048b6:	460b      	mov	r3, r1
 80048b8:	4313      	orrs	r3, r2
 80048ba:	d00c      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048c0:	3328      	adds	r3, #40	; 0x28
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fa4b 	bl	8004d60 <RCCEx_PLL3_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80048e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80048e4:	2300      	movs	r3, #0
 80048e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d036      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80048f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048fc:	d018      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80048fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004902:	d811      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004908:	d014      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800490a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490e:	d80b      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d011      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004918:	d106      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491a:	4bb7      	ldr	r3, [pc, #732]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	4ab6      	ldr	r2, [pc, #728]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004926:	e008      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800492e:	e004      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004930:	bf00      	nop
 8004932:	e002      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004934:	bf00      	nop
 8004936:	e000      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004942:	4bad      	ldr	r3, [pc, #692]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800494a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800494e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004950:	4aa9      	ldr	r2, [pc, #676]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004952:	430b      	orrs	r3, r1
 8004954:	6553      	str	r3, [r2, #84]	; 0x54
 8004956:	e003      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004958:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800495c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800496c:	653b      	str	r3, [r7, #80]	; 0x50
 800496e:	2300      	movs	r3, #0
 8004970:	657b      	str	r3, [r7, #84]	; 0x54
 8004972:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004976:	460b      	mov	r3, r1
 8004978:	4313      	orrs	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800497c:	4b9e      	ldr	r3, [pc, #632]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	4a9b      	ldr	r2, [pc, #620]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800498c:	430b      	orrs	r3, r1
 800498e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800499c:	64bb      	str	r3, [r7, #72]	; 0x48
 800499e:	2300      	movs	r3, #0
 80049a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80049a6:	460b      	mov	r3, r1
 80049a8:	4313      	orrs	r3, r2
 80049aa:	d009      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ac:	4b92      	ldr	r3, [pc, #584]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80049b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049ba:	4a8f      	ldr	r2, [pc, #572]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80049cc:	643b      	str	r3, [r7, #64]	; 0x40
 80049ce:	2300      	movs	r3, #0
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
 80049d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80049d6:	460b      	mov	r3, r1
 80049d8:	4313      	orrs	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049dc:	4b86      	ldr	r3, [pc, #536]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	4a85      	ldr	r2, [pc, #532]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049e6:	6113      	str	r3, [r2, #16]
 80049e8:	4b83      	ldr	r3, [pc, #524]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049ea:	6919      	ldr	r1, [r3, #16]
 80049ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049f4:	4a80      	ldr	r2, [pc, #512]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a08:	2300      	movs	r3, #0
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d009      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a16:	4b78      	ldr	r3, [pc, #480]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	4a74      	ldr	r2, [pc, #464]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a26:	430b      	orrs	r3, r1
 8004a28:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
 8004a38:	2300      	movs	r3, #0
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004a40:	460b      	mov	r3, r1
 8004a42:	4313      	orrs	r3, r2
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a46:	4b6c      	ldr	r3, [pc, #432]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	4a68      	ldr	r2, [pc, #416]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	2100      	movs	r1, #0
 8004a66:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004a72:	460b      	mov	r3, r1
 8004a74:	4313      	orrs	r3, r2
 8004a76:	d011      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 f8bb 	bl	8004bfc <RCCEx_PLL2_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	6239      	str	r1, [r7, #32]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	d011      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004abc:	3308      	adds	r3, #8
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f89b 	bl	8004bfc <RCCEx_PLL2_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004acc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ad8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	61b9      	str	r1, [r7, #24]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d011      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004afc:	3308      	adds	r3, #8
 8004afe:	2102      	movs	r1, #2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f87b 	bl	8004bfc <RCCEx_PLL2_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	2100      	movs	r1, #0
 8004b26:	6139      	str	r1, [r7, #16]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b32:	460b      	mov	r3, r1
 8004b34:	4313      	orrs	r3, r2
 8004b36:	d011      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b3c:	3328      	adds	r3, #40	; 0x28
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 f90d 	bl	8004d60 <RCCEx_PLL3_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	2100      	movs	r1, #0
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b72:	460b      	mov	r3, r1
 8004b74:	4313      	orrs	r3, r2
 8004b76:	d011      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b7c:	3328      	adds	r3, #40	; 0x28
 8004b7e:	2101      	movs	r1, #1
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f8ed 	bl	8004d60 <RCCEx_PLL3_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	6039      	str	r1, [r7, #0]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	d011      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bbc:	3328      	adds	r3, #40	; 0x28
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f8cd 	bl	8004d60 <RCCEx_PLL3_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004bdc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	e000      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf6:	bf00      	nop
 8004bf8:	58024400 	.word	0x58024400

08004bfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c0a:	4b53      	ldr	r3, [pc, #332]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d101      	bne.n	8004c1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e099      	b.n	8004d4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c1a:	4b4f      	ldr	r3, [pc, #316]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a4e      	ldr	r2, [pc, #312]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c26:	f7fc f84b 	bl	8000cc0 <HAL_GetTick>
 8004c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c2c:	e008      	b.n	8004c40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c2e:	f7fc f847 	bl	8000cc0 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e086      	b.n	8004d4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c40:	4b45      	ldr	r3, [pc, #276]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f0      	bne.n	8004c2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c4c:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	031b      	lsls	r3, r3, #12
 8004c5a:	493f      	ldr	r1, [pc, #252]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	025b      	lsls	r3, r3, #9
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	061b      	lsls	r3, r3, #24
 8004c8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c90:	4931      	ldr	r1, [pc, #196]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c96:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	492d      	ldr	r1, [pc, #180]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	f023 0220 	bic.w	r2, r3, #32
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	4928      	ldr	r1, [pc, #160]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cba:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	f023 0310 	bic.w	r3, r3, #16
 8004cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <RCCEx_PLL2_Config+0x160>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	69d2      	ldr	r2, [r2, #28]
 8004cd2:	00d2      	lsls	r2, r2, #3
 8004cd4:	4920      	ldr	r1, [pc, #128]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cda:	4b1f      	ldr	r3, [pc, #124]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	f043 0310 	orr.w	r3, r3, #16
 8004ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cec:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cf8:	e00f      	b.n	8004d1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d106      	bne.n	8004d0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d00:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	4a14      	ldr	r2, [pc, #80]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d0c:	e005      	b.n	8004d1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d26:	f7fb ffcb 	bl	8000cc0 <HAL_GetTick>
 8004d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d2c:	e008      	b.n	8004d40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d2e:	f7fb ffc7 	bl	8000cc0 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e006      	b.n	8004d4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	ffff0007 	.word	0xffff0007

08004d60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d6e:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d101      	bne.n	8004d7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e099      	b.n	8004eb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d7e:	4b4f      	ldr	r3, [pc, #316]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a4e      	ldr	r2, [pc, #312]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8a:	f7fb ff99 	bl	8000cc0 <HAL_GetTick>
 8004d8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d92:	f7fb ff95 	bl	8000cc0 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e086      	b.n	8004eb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004da4:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004db0:	4b42      	ldr	r3, [pc, #264]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	051b      	lsls	r3, r3, #20
 8004dbe:	493f      	ldr	r1, [pc, #252]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	628b      	str	r3, [r1, #40]	; 0x28
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	025b      	lsls	r3, r3, #9
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	061b      	lsls	r3, r3, #24
 8004df0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004df4:	4931      	ldr	r1, [pc, #196]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dfa:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	492d      	ldr	r1, [pc, #180]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	4928      	ldr	r1, [pc, #160]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e1e:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <RCCEx_PLL3_Config+0x160>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	69d2      	ldr	r2, [r2, #28]
 8004e36:	00d2      	lsls	r2, r2, #3
 8004e38:	4920      	ldr	r1, [pc, #128]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e50:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e5c:	e00f      	b.n	8004e7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e64:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e70:	e005      	b.n	8004e7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fb ff19 	bl	8000cc0 <HAL_GetTick>
 8004e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e90:	e008      	b.n	8004ea4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e92:	f7fb ff15 	bl	8000cc0 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e006      	b.n	8004eb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	ffff0007 	.word	0xffff0007

08004ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e049      	b.n	8004f6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f841 	bl	8004f72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f000 fa0e 	bl	8005324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d001      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e05e      	b.n	800505e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2b      	ldr	r2, [pc, #172]	; (800506c <HAL_TIM_Base_Start_IT+0xe4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02c      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x94>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fca:	d027      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x94>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x94>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a26      	ldr	r2, [pc, #152]	; (8005074 <HAL_TIM_Base_Start_IT+0xec>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d01d      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x94>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a24      	ldr	r2, [pc, #144]	; (8005078 <HAL_TIM_Base_Start_IT+0xf0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x94>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a23      	ldr	r2, [pc, #140]	; (800507c <HAL_TIM_Base_Start_IT+0xf4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x94>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a21      	ldr	r2, [pc, #132]	; (8005080 <HAL_TIM_Base_Start_IT+0xf8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x94>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a20      	ldr	r2, [pc, #128]	; (8005084 <HAL_TIM_Base_Start_IT+0xfc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x94>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <HAL_TIM_Base_Start_IT+0x100>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x94>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1d      	ldr	r2, [pc, #116]	; (800508c <HAL_TIM_Base_Start_IT+0x104>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d115      	bne.n	8005048 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_TIM_Base_Start_IT+0x108>)
 8005024:	4013      	ands	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b06      	cmp	r3, #6
 800502c:	d015      	beq.n	800505a <HAL_TIM_Base_Start_IT+0xd2>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005034:	d011      	beq.n	800505a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005046:	e008      	b.n	800505a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e000      	b.n	800505c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40010400 	.word	0x40010400
 8005080:	40001800 	.word	0x40001800
 8005084:	40014000 	.word	0x40014000
 8005088:	4000e000 	.word	0x4000e000
 800508c:	4000e400 	.word	0x4000e400
 8005090:	00010007 	.word	0x00010007

08005094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d122      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d11b      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0202 	mvn.w	r2, #2
 80050c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f905 	bl	80052e6 <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f8f7 	bl	80052d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f908 	bl	80052fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d122      	bne.n	8005144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d11b      	bne.n	8005144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0204 	mvn.w	r2, #4
 8005114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f8db 	bl	80052e6 <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f8cd 	bl	80052d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f8de 	bl	80052fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b08      	cmp	r3, #8
 8005150:	d122      	bne.n	8005198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b08      	cmp	r3, #8
 800515e:	d11b      	bne.n	8005198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0208 	mvn.w	r2, #8
 8005168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2204      	movs	r2, #4
 800516e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8b1 	bl	80052e6 <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8a3 	bl	80052d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f8b4 	bl	80052fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d122      	bne.n	80051ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d11b      	bne.n	80051ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0210 	mvn.w	r2, #16
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2208      	movs	r2, #8
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f887 	bl	80052e6 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f879 	bl	80052d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f88a 	bl	80052fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d10e      	bne.n	8005218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0201 	mvn.w	r2, #1
 8005210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fb fafa 	bl	800080c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d10e      	bne.n	8005244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d107      	bne.n	8005244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800523c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f920 	bl	8005484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005252:	d10e      	bne.n	8005272 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	d107      	bne.n	8005272 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800526a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f913 	bl	8005498 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d10e      	bne.n	800529e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d107      	bne.n	800529e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f838 	bl	800530e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d10e      	bne.n	80052ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d107      	bne.n	80052ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0220 	mvn.w	r2, #32
 80052c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f8d3 	bl	8005470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a44      	ldr	r2, [pc, #272]	; (8005448 <TIM_Base_SetConfig+0x124>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d013      	beq.n	8005364 <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005342:	d00f      	beq.n	8005364 <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a41      	ldr	r2, [pc, #260]	; (800544c <TIM_Base_SetConfig+0x128>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a40      	ldr	r2, [pc, #256]	; (8005450 <TIM_Base_SetConfig+0x12c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3f      	ldr	r2, [pc, #252]	; (8005454 <TIM_Base_SetConfig+0x130>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3e      	ldr	r2, [pc, #248]	; (8005458 <TIM_Base_SetConfig+0x134>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d108      	bne.n	8005376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a33      	ldr	r2, [pc, #204]	; (8005448 <TIM_Base_SetConfig+0x124>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d027      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005384:	d023      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a30      	ldr	r2, [pc, #192]	; (800544c <TIM_Base_SetConfig+0x128>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01f      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2f      	ldr	r2, [pc, #188]	; (8005450 <TIM_Base_SetConfig+0x12c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01b      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2e      	ldr	r2, [pc, #184]	; (8005454 <TIM_Base_SetConfig+0x130>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d017      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2d      	ldr	r2, [pc, #180]	; (8005458 <TIM_Base_SetConfig+0x134>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2c      	ldr	r2, [pc, #176]	; (800545c <TIM_Base_SetConfig+0x138>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00f      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2b      	ldr	r2, [pc, #172]	; (8005460 <TIM_Base_SetConfig+0x13c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00b      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <TIM_Base_SetConfig+0x140>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a29      	ldr	r2, [pc, #164]	; (8005468 <TIM_Base_SetConfig+0x144>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_Base_SetConfig+0xaa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a28      	ldr	r2, [pc, #160]	; (800546c <TIM_Base_SetConfig+0x148>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d108      	bne.n	80053e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a10      	ldr	r2, [pc, #64]	; (8005448 <TIM_Base_SetConfig+0x124>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00f      	beq.n	800542c <TIM_Base_SetConfig+0x108>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a12      	ldr	r2, [pc, #72]	; (8005458 <TIM_Base_SetConfig+0x134>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00b      	beq.n	800542c <TIM_Base_SetConfig+0x108>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a11      	ldr	r2, [pc, #68]	; (800545c <TIM_Base_SetConfig+0x138>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d007      	beq.n	800542c <TIM_Base_SetConfig+0x108>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a10      	ldr	r2, [pc, #64]	; (8005460 <TIM_Base_SetConfig+0x13c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0x108>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0f      	ldr	r2, [pc, #60]	; (8005464 <TIM_Base_SetConfig+0x140>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d103      	bne.n	8005434 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	615a      	str	r2, [r3, #20]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40010400 	.word	0x40010400
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800
 8005468:	4000e000 	.word	0x4000e000
 800546c:	4000e400 	.word	0x4000e400

08005470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054ac:	b084      	sub	sp, #16
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	f107 001c 	add.w	r0, r7, #28
 80054ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d120      	bne.n	8005506 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <USB_CoreInit+0xd4>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d105      	bne.n	80054fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f001 faf8 	bl	8006af0 <USB_CoreReset>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
 8005504:	e01a      	b.n	800553c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 faec 	bl	8006af0 <USB_CoreReset>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800551c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	639a      	str	r2, [r3, #56]	; 0x38
 800552e:	e005      	b.n	800553c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	2b01      	cmp	r3, #1
 8005540:	d116      	bne.n	8005570 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005546:	b29a      	uxth	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <USB_CoreInit+0xd8>)
 8005552:	4313      	orrs	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f043 0206 	orr.w	r2, r3, #6
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800557c:	b004      	add	sp, #16
 800557e:	4770      	bx	lr
 8005580:	ffbdffbf 	.word	0xffbdffbf
 8005584:	03ee0000 	.word	0x03ee0000

08005588 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	4613      	mov	r3, r2
 8005594:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d165      	bne.n	8005668 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4a41      	ldr	r2, [pc, #260]	; (80056a4 <USB_SetTurnaroundTime+0x11c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d906      	bls.n	80055b2 <USB_SetTurnaroundTime+0x2a>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a40      	ldr	r2, [pc, #256]	; (80056a8 <USB_SetTurnaroundTime+0x120>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d202      	bcs.n	80055b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055ac:	230f      	movs	r3, #15
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	e062      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4a3c      	ldr	r2, [pc, #240]	; (80056a8 <USB_SetTurnaroundTime+0x120>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d306      	bcc.n	80055c8 <USB_SetTurnaroundTime+0x40>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a3b      	ldr	r2, [pc, #236]	; (80056ac <USB_SetTurnaroundTime+0x124>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d202      	bcs.n	80055c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055c2:	230e      	movs	r3, #14
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e057      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4a38      	ldr	r2, [pc, #224]	; (80056ac <USB_SetTurnaroundTime+0x124>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d306      	bcc.n	80055de <USB_SetTurnaroundTime+0x56>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a37      	ldr	r2, [pc, #220]	; (80056b0 <USB_SetTurnaroundTime+0x128>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d202      	bcs.n	80055de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055d8:	230d      	movs	r3, #13
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e04c      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4a33      	ldr	r2, [pc, #204]	; (80056b0 <USB_SetTurnaroundTime+0x128>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d306      	bcc.n	80055f4 <USB_SetTurnaroundTime+0x6c>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4a32      	ldr	r2, [pc, #200]	; (80056b4 <USB_SetTurnaroundTime+0x12c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d802      	bhi.n	80055f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055ee:	230c      	movs	r3, #12
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e041      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4a2f      	ldr	r2, [pc, #188]	; (80056b4 <USB_SetTurnaroundTime+0x12c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d906      	bls.n	800560a <USB_SetTurnaroundTime+0x82>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4a2e      	ldr	r2, [pc, #184]	; (80056b8 <USB_SetTurnaroundTime+0x130>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d802      	bhi.n	800560a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005604:	230b      	movs	r3, #11
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e036      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4a2a      	ldr	r2, [pc, #168]	; (80056b8 <USB_SetTurnaroundTime+0x130>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d906      	bls.n	8005620 <USB_SetTurnaroundTime+0x98>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4a29      	ldr	r2, [pc, #164]	; (80056bc <USB_SetTurnaroundTime+0x134>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d802      	bhi.n	8005620 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800561a:	230a      	movs	r3, #10
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e02b      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4a26      	ldr	r2, [pc, #152]	; (80056bc <USB_SetTurnaroundTime+0x134>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d906      	bls.n	8005636 <USB_SetTurnaroundTime+0xae>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4a25      	ldr	r2, [pc, #148]	; (80056c0 <USB_SetTurnaroundTime+0x138>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d202      	bcs.n	8005636 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005630:	2309      	movs	r3, #9
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	e020      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4a21      	ldr	r2, [pc, #132]	; (80056c0 <USB_SetTurnaroundTime+0x138>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d306      	bcc.n	800564c <USB_SetTurnaroundTime+0xc4>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4a20      	ldr	r2, [pc, #128]	; (80056c4 <USB_SetTurnaroundTime+0x13c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d802      	bhi.n	800564c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005646:	2308      	movs	r3, #8
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e015      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4a1d      	ldr	r2, [pc, #116]	; (80056c4 <USB_SetTurnaroundTime+0x13c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d906      	bls.n	8005662 <USB_SetTurnaroundTime+0xda>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <USB_SetTurnaroundTime+0x140>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d202      	bcs.n	8005662 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800565c:	2307      	movs	r3, #7
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e00a      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005662:	2306      	movs	r3, #6
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e007      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d102      	bne.n	8005674 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800566e:	2309      	movs	r3, #9
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e001      	b.n	8005678 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005674:	2309      	movs	r3, #9
 8005676:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	029b      	lsls	r3, r3, #10
 800568c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005690:	431a      	orrs	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	00d8acbf 	.word	0x00d8acbf
 80056a8:	00e4e1c0 	.word	0x00e4e1c0
 80056ac:	00f42400 	.word	0x00f42400
 80056b0:	01067380 	.word	0x01067380
 80056b4:	011a499f 	.word	0x011a499f
 80056b8:	01312cff 	.word	0x01312cff
 80056bc:	014ca43f 	.word	0x014ca43f
 80056c0:	016e3600 	.word	0x016e3600
 80056c4:	01a6ab1f 	.word	0x01a6ab1f
 80056c8:	01e84800 	.word	0x01e84800

080056cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f043 0201 	orr.w	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f023 0201 	bic.w	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d115      	bne.n	800575e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800573e:	2001      	movs	r0, #1
 8005740:	f7fb faca 	bl	8000cd8 <HAL_Delay>
      ms++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3301      	adds	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 f93f 	bl	80069ce <USB_GetMode>
 8005750:	4603      	mov	r3, r0
 8005752:	2b01      	cmp	r3, #1
 8005754:	d01e      	beq.n	8005794 <USB_SetCurrentMode+0x84>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b31      	cmp	r3, #49	; 0x31
 800575a:	d9f0      	bls.n	800573e <USB_SetCurrentMode+0x2e>
 800575c:	e01a      	b.n	8005794 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d115      	bne.n	8005790 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005770:	2001      	movs	r0, #1
 8005772:	f7fb fab1 	bl	8000cd8 <HAL_Delay>
      ms++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3301      	adds	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 f926 	bl	80069ce <USB_GetMode>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <USB_SetCurrentMode+0x84>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b31      	cmp	r3, #49	; 0x31
 800578c:	d9f0      	bls.n	8005770 <USB_SetCurrentMode+0x60>
 800578e:	e001      	b.n	8005794 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e005      	b.n	80057a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b32      	cmp	r3, #50	; 0x32
 8005798:	d101      	bne.n	800579e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057a8:	b084      	sub	sp, #16
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b086      	sub	sp, #24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	e009      	b.n	80057dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	3340      	adds	r3, #64	; 0x40
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	2200      	movs	r2, #0
 80057d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	3301      	adds	r3, #1
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b0e      	cmp	r3, #14
 80057e0:	d9f2      	bls.n	80057c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d11c      	bne.n	8005822 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f6:	f043 0302 	orr.w	r3, r3, #2
 80057fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e005      	b.n	800582e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005840:	4619      	mov	r1, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005848:	461a      	mov	r2, r3
 800584a:	680b      	ldr	r3, [r1, #0]
 800584c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10c      	bne.n	800586e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	2b00      	cmp	r3, #0
 8005858:	d104      	bne.n	8005864 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800585a:	2100      	movs	r1, #0
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f965 	bl	8005b2c <USB_SetDevSpeed>
 8005862:	e008      	b.n	8005876 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005864:	2101      	movs	r1, #1
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f960 	bl	8005b2c <USB_SetDevSpeed>
 800586c:	e003      	b.n	8005876 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800586e:	2103      	movs	r1, #3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f95b 	bl	8005b2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005876:	2110      	movs	r1, #16
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f8f3 	bl	8005a64 <USB_FlushTxFifo>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f91f 	bl	8005acc <USB_FlushRxFifo>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	461a      	mov	r2, r3
 80058a0:	2300      	movs	r3, #0
 80058a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	461a      	mov	r2, r3
 80058ac:	2300      	movs	r3, #0
 80058ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	461a      	mov	r2, r3
 80058b8:	2300      	movs	r3, #0
 80058ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	e043      	b.n	800594a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d8:	d118      	bne.n	800590c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	461a      	mov	r2, r3
 80058ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	e013      	b.n	800591e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	461a      	mov	r2, r3
 8005904:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e008      	b.n	800591e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	461a      	mov	r2, r3
 800591a:	2300      	movs	r3, #0
 800591c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592a:	461a      	mov	r2, r3
 800592c:	2300      	movs	r3, #0
 800592e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	461a      	mov	r2, r3
 800593e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005942:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	3301      	adds	r3, #1
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	429a      	cmp	r2, r3
 8005950:	d3b7      	bcc.n	80058c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	e043      	b.n	80059e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800596a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800596e:	d118      	bne.n	80059a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	461a      	mov	r2, r3
 8005984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e013      	b.n	80059b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	461a      	mov	r2, r3
 800599a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	e008      	b.n	80059b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	461a      	mov	r2, r3
 80059b0:	2300      	movs	r3, #0
 80059b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	461a      	mov	r2, r3
 80059c2:	2300      	movs	r3, #0
 80059c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	461a      	mov	r2, r3
 80059d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	3301      	adds	r3, #1
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d3b7      	bcc.n	8005958 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d105      	bne.n	8005a1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f043 0210 	orr.w	r2, r3, #16
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <USB_DevInit+0x2b4>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f043 0208 	orr.w	r2, r3, #8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699a      	ldr	r2, [r3, #24]
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <USB_DevInit+0x2b8>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a58:	b004      	add	sp, #16
 8005a5a:	4770      	bx	lr
 8005a5c:	803c3800 	.word	0x803c3800
 8005a60:	40000004 	.word	0x40000004

08005a64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <USB_FlushTxFifo+0x64>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e01b      	b.n	8005abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	daf2      	bge.n	8005a72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	019b      	lsls	r3, r3, #6
 8005a94:	f043 0220 	orr.w	r2, r3, #32
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <USB_FlushTxFifo+0x64>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e006      	b.n	8005abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d0f0      	beq.n	8005a9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	00030d40 	.word	0x00030d40

08005acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <USB_FlushRxFifo+0x5c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e018      	b.n	8005b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	daf2      	bge.n	8005ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2210      	movs	r2, #16
 8005afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <USB_FlushRxFifo+0x5c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d901      	bls.n	8005b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e006      	b.n	8005b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d0f0      	beq.n	8005afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	00030d40 	.word	0x00030d40

08005b2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	68f9      	ldr	r1, [r7, #12]
 8005b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b087      	sub	sp, #28
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0306 	and.w	r3, r3, #6
 8005b76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]
 8005b82:	e00a      	b.n	8005b9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d002      	beq.n	8005b90 <USB_GetDevSpeed+0x32>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d102      	bne.n	8005b96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b90:	2302      	movs	r3, #2
 8005b92:	75fb      	strb	r3, [r7, #23]
 8005b94:	e001      	b.n	8005b9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b96:	230f      	movs	r3, #15
 8005b98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d139      	bne.n	8005c38 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	68f9      	ldr	r1, [r7, #12]
 8005bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be2:	4313      	orrs	r3, r2
 8005be4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d153      	bne.n	8005ca4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	791b      	ldrb	r3, [r3, #4]
 8005c16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	059b      	lsls	r3, r3, #22
 8005c1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c20:	431a      	orrs	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	0159      	lsls	r1, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	440b      	add	r3, r1
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4b20      	ldr	r3, [pc, #128]	; (8005cb4 <USB_ActivateEndpoint+0x10c>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	600b      	str	r3, [r1, #0]
 8005c36:	e035      	b.n	8005ca4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	2101      	movs	r1, #1
 8005c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	68f9      	ldr	r1, [r7, #12]
 8005c52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d119      	bne.n	8005ca4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	791b      	ldrb	r3, [r3, #4]
 8005c8a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	0159      	lsls	r1, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	440b      	add	r3, r1
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <USB_ActivateEndpoint+0x10c>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	10008000 	.word	0x10008000

08005cb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d161      	bne.n	8005d98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cea:	d11f      	bne.n	8005d2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	2101      	movs	r1, #1
 8005d62:	fa01 f303 	lsl.w	r3, r1, r3
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d70:	4013      	ands	r3, r2
 8005d72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	0159      	lsls	r1, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	440b      	add	r3, r1
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4b35      	ldr	r3, [pc, #212]	; (8005e68 <USB_DeactivateEndpoint+0x1b0>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]
 8005d96:	e060      	b.n	8005e5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dae:	d11f      	bne.n	8005df0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	2101      	movs	r1, #1
 8005e02:	fa01 f303 	lsl.w	r3, r1, r3
 8005e06:	041b      	lsls	r3, r3, #16
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	68f9      	ldr	r1, [r7, #12]
 8005e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e10:	4013      	ands	r3, r2
 8005e12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	2101      	movs	r1, #1
 8005e26:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	68f9      	ldr	r1, [r7, #12]
 8005e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e34:	4013      	ands	r3, r2
 8005e36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	0159      	lsls	r1, r3, #5
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	440b      	add	r3, r1
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	4619      	mov	r1, r3
 8005e54:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <USB_DeactivateEndpoint+0x1b4>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	ec337800 	.word	0xec337800
 8005e6c:	eff37800 	.word	0xeff37800

08005e70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	f040 8181 	bne.w	8006194 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d132      	bne.n	8005f00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	0159      	lsls	r1, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	440b      	add	r3, r1
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4ba5      	ldr	r3, [pc, #660]	; (800614c <USB_EPStartXfer+0x2dc>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	0159      	lsls	r1, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	440b      	add	r3, r1
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4b95      	ldr	r3, [pc, #596]	; (8006150 <USB_EPStartXfer+0x2e0>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	610b      	str	r3, [r1, #16]
 8005efe:	e092      	b.n	8006026 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	0159      	lsls	r1, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	440b      	add	r3, r1
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4b8c      	ldr	r3, [pc, #560]	; (8006150 <USB_EPStartXfer+0x2e0>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	0159      	lsls	r1, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	440b      	add	r3, r1
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4b83      	ldr	r3, [pc, #524]	; (800614c <USB_EPStartXfer+0x2dc>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d11a      	bne.n	8005f80 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d903      	bls.n	8005f5e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f7c:	6113      	str	r3, [r2, #16]
 8005f7e:	e01b      	b.n	8005fb8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6919      	ldr	r1, [r3, #16]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	440b      	add	r3, r1
 8005f98:	1e59      	subs	r1, r3, #1
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fa2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fa4:	4b6b      	ldr	r3, [pc, #428]	; (8006154 <USB_EPStartXfer+0x2e4>)
 8005fa6:	400b      	ands	r3, r1
 8005fa8:	69b9      	ldr	r1, [r7, #24]
 8005faa:	0148      	lsls	r0, r1, #5
 8005fac:	69f9      	ldr	r1, [r7, #28]
 8005fae:	4401      	add	r1, r0
 8005fb0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fce:	69b9      	ldr	r1, [r7, #24]
 8005fd0:	0148      	lsls	r0, r1, #5
 8005fd2:	69f9      	ldr	r1, [r7, #28]
 8005fd4:	4401      	add	r1, r0
 8005fd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	791b      	ldrb	r3, [r3, #4]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d11f      	bne.n	8006026 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006000:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006004:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006020:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006024:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d14b      	bne.n	80060c4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d009      	beq.n	8006048 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	461a      	mov	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	791b      	ldrb	r3, [r3, #4]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d128      	bne.n	80060a2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d110      	bne.n	8006082 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e00f      	b.n	80060a2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	440a      	add	r2, r1
 8006098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	e16a      	b.n	800639a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	791b      	ldrb	r3, [r3, #4]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d015      	beq.n	8006118 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8152 	beq.w	800639a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	2101      	movs	r1, #1
 8006108:	fa01 f303 	lsl.w	r3, r1, r3
 800610c:	69f9      	ldr	r1, [r7, #28]
 800610e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006112:	4313      	orrs	r3, r2
 8006114:	634b      	str	r3, [r1, #52]	; 0x34
 8006116:	e140      	b.n	800639a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d117      	bne.n	8006158 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006142:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e016      	b.n	8006178 <USB_EPStartXfer+0x308>
 800614a:	bf00      	nop
 800614c:	e007ffff 	.word	0xe007ffff
 8006150:	fff80000 	.word	0xfff80000
 8006154:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006176:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	68d9      	ldr	r1, [r3, #12]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	b298      	uxth	r0, r3
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4603      	mov	r3, r0
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f9b9 	bl	8006504 <USB_WritePacket>
 8006192:	e102      	b.n	800639a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	0159      	lsls	r1, r3, #5
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	440b      	add	r3, r1
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	4619      	mov	r1, r3
 80061b0:	4b7c      	ldr	r3, [pc, #496]	; (80063a4 <USB_EPStartXfer+0x534>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	0159      	lsls	r1, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	440b      	add	r3, r1
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	4619      	mov	r1, r3
 80061d2:	4b75      	ldr	r3, [pc, #468]	; (80063a8 <USB_EPStartXfer+0x538>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d12f      	bne.n	800623e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800620c:	69b9      	ldr	r1, [r7, #24]
 800620e:	0148      	lsls	r0, r1, #5
 8006210:	69f9      	ldr	r1, [r7, #28]
 8006212:	4401      	add	r1, r0
 8006214:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006218:	4313      	orrs	r3, r2
 800621a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006236:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800623a:	6113      	str	r3, [r2, #16]
 800623c:	e05f      	b.n	80062fe <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d123      	bne.n	800628e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625c:	69b9      	ldr	r1, [r7, #24]
 800625e:	0148      	lsls	r0, r1, #5
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	4401      	add	r1, r0
 8006264:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006268:	4313      	orrs	r3, r2
 800626a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800628a:	6113      	str	r3, [r2, #16]
 800628c:	e037      	b.n	80062fe <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	4413      	add	r3, r2
 8006298:	1e5a      	subs	r2, r3, #1
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	8afa      	ldrh	r2, [r7, #22]
 80062aa:	fb03 f202 	mul.w	r2, r3, r2
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	8afb      	ldrh	r3, [r7, #22]
 80062c2:	04d9      	lsls	r1, r3, #19
 80062c4:	4b39      	ldr	r3, [pc, #228]	; (80063ac <USB_EPStartXfer+0x53c>)
 80062c6:	400b      	ands	r3, r1
 80062c8:	69b9      	ldr	r1, [r7, #24]
 80062ca:	0148      	lsls	r0, r1, #5
 80062cc:	69f9      	ldr	r1, [r7, #28]
 80062ce:	4401      	add	r1, r0
 80062d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062d4:	4313      	orrs	r3, r2
 80062d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ee:	69b9      	ldr	r1, [r7, #24]
 80062f0:	0148      	lsls	r0, r1, #5
 80062f2:	69f9      	ldr	r1, [r7, #28]
 80062f4:	4401      	add	r1, r0
 80062f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062fa:	4313      	orrs	r3, r2
 80062fc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d10d      	bne.n	8006320 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d009      	beq.n	8006320 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	68d9      	ldr	r1, [r3, #12]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	460a      	mov	r2, r1
 800631e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	791b      	ldrb	r3, [r3, #4]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d128      	bne.n	800637a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d110      	bne.n	800635a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	e00f      	b.n	800637a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006378:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006394:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006398:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3720      	adds	r7, #32
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	fff80000 	.word	0xfff80000
 80063a8:	e007ffff 	.word	0xe007ffff
 80063ac:	1ff80000 	.word	0x1ff80000

080063b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d14a      	bne.n	8006464 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e6:	f040 8086 	bne.w	80064f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800640c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	7812      	ldrb	r2, [r2, #0]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006430:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f242 7210 	movw	r2, #10000	; 0x2710
 800643e:	4293      	cmp	r3, r2
 8006440:	d902      	bls.n	8006448 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
          break;
 8006446:	e056      	b.n	80064f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800645c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006460:	d0e7      	beq.n	8006432 <USB_EPStopXfer+0x82>
 8006462:	e048      	b.n	80064f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800647c:	d13b      	bne.n	80064f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800649c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	7812      	ldrb	r2, [r2, #0]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3301      	adds	r3, #1
 80064ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d902      	bls.n	80064dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75fb      	strb	r3, [r7, #23]
          break;
 80064da:	e00c      	b.n	80064f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f4:	d0e7      	beq.n	80064c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4611      	mov	r1, r2
 8006510:	461a      	mov	r2, r3
 8006512:	460b      	mov	r3, r1
 8006514:	71fb      	strb	r3, [r7, #7]
 8006516:	4613      	mov	r3, r2
 8006518:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006522:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006526:	2b00      	cmp	r3, #0
 8006528:	d123      	bne.n	8006572 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800652a:	88bb      	ldrh	r3, [r7, #4]
 800652c:	3303      	adds	r3, #3
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006532:	2300      	movs	r3, #0
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	e018      	b.n	800656a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	031a      	lsls	r2, r3, #12
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	4413      	add	r3, r2
 8006540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006544:	461a      	mov	r2, r3
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	3301      	adds	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	3301      	adds	r3, #1
 8006556:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	3301      	adds	r3, #1
 8006562:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	3301      	adds	r3, #1
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	429a      	cmp	r2, r3
 8006570:	d3e2      	bcc.n	8006538 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3724      	adds	r7, #36	; 0x24
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006580:	b480      	push	{r7}
 8006582:	b08b      	sub	sp, #44	; 0x2c
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	089b      	lsrs	r3, r3, #2
 800659a:	b29b      	uxth	r3, r3
 800659c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065a6:	2300      	movs	r3, #0
 80065a8:	623b      	str	r3, [r7, #32]
 80065aa:	e014      	b.n	80065d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	3301      	adds	r3, #1
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	3301      	adds	r3, #1
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	3301      	adds	r3, #1
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	3301      	adds	r3, #1
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	3301      	adds	r3, #1
 80065d4:	623b      	str	r3, [r7, #32]
 80065d6:	6a3a      	ldr	r2, [r7, #32]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d3e6      	bcc.n	80065ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065de:	8bfb      	ldrh	r3, [r7, #30]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01e      	beq.n	8006622 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ee:	461a      	mov	r2, r3
 80065f0:	f107 0310 	add.w	r3, r7, #16
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
 8006604:	b2da      	uxtb	r2, r3
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	701a      	strb	r2, [r3, #0]
      i++;
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	3301      	adds	r3, #1
 800660e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	3301      	adds	r3, #1
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006616:	8bfb      	ldrh	r3, [r7, #30]
 8006618:	3b01      	subs	r3, #1
 800661a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800661c:	8bfb      	ldrh	r3, [r7, #30]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ea      	bne.n	80065f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006624:	4618      	mov	r0, r3
 8006626:	372c      	adds	r7, #44	; 0x2c
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d12c      	bne.n	80066a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	db12      	blt.n	8006684 <USB_EPSetStall+0x54>
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00f      	beq.n	8006684 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	440a      	add	r2, r1
 800667a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006682:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	440a      	add	r2, r1
 800669a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	e02b      	b.n	80066fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	db12      	blt.n	80066de <USB_EPSetStall+0xae>
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00f      	beq.n	80066de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d128      	bne.n	800677a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	440a      	add	r2, r1
 800673e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006746:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	791b      	ldrb	r3, [r3, #4]
 800674c:	2b03      	cmp	r3, #3
 800674e:	d003      	beq.n	8006758 <USB_EPClearStall+0x4c>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	791b      	ldrb	r3, [r3, #4]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d138      	bne.n	80067ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	e027      	b.n	80067ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	440a      	add	r2, r1
 8006790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006798:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	791b      	ldrb	r3, [r3, #4]
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d003      	beq.n	80067aa <USB_EPClearStall+0x9e>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	791b      	ldrb	r3, [r3, #4]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d10f      	bne.n	80067ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800680c:	68f9      	ldr	r1, [r7, #12]
 800680e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006812:	4313      	orrs	r3, r2
 8006814:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006852:	f023 0302 	bic.w	r3, r3, #2
 8006856:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006880:	f023 0303 	bic.w	r3, r3, #3
 8006884:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006894:	f043 0302 	orr.w	r3, r3, #2
 8006898:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4013      	ands	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068c0:	68fb      	ldr	r3, [r7, #12]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	4013      	ands	r3, r2
 80068f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	0c1b      	lsrs	r3, r3, #16
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	b29b      	uxth	r3, r3
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4013      	ands	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006964:	68bb      	ldr	r3, [r7, #8]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006972:	b480      	push	{r7}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	460b      	mov	r3, r1
 800697c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006994:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	fa22 f303 	lsr.w	r3, r2, r3
 80069a2:	01db      	lsls	r3, r3, #7
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4013      	ands	r3, r2
 80069be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069c0:	68bb      	ldr	r3, [r7, #8]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f003 0301 	and.w	r3, r3, #1
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
	...

080069ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	4619      	mov	r1, r3
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <USB_ActivateSetup+0x44>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	fffff800 	.word	0xfffff800

08006a34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	333c      	adds	r3, #60	; 0x3c
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4a26      	ldr	r2, [pc, #152]	; (8006aec <USB_EP0_OutStart+0xb8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d90a      	bls.n	8006a6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a68:	d101      	bne.n	8006a6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e037      	b.n	8006ade <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	461a      	mov	r2, r3
 8006a76:	2300      	movs	r3, #0
 8006a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9c:	f043 0318 	orr.w	r3, r3, #24
 8006aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ab4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d10f      	bne.n	8006adc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	4f54300a 	.word	0x4f54300a

08006af0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <USB_CoreReset+0x64>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e01b      	b.n	8006b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	daf2      	bge.n	8006afc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f043 0201 	orr.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <USB_CoreReset+0x64>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d901      	bls.n	8006b38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e006      	b.n	8006b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d0f0      	beq.n	8006b26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	00030d40 	.word	0x00030d40

08006b58 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b096      	sub	sp, #88	; 0x58
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	f023 0303 	bic.w	r3, r3, #3
 8006b6e:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b70:	f3ef 8310 	mrs	r3, PRIMASK
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8006b78:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b7a:	b672      	cpsid	i
#endif
    return(int_posture);
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8006b7e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006b80:	4b55      	ldr	r3, [pc, #340]	; (8006cd8 <_tx_byte_allocate+0x180>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b8e:	621a      	str	r2, [r3, #32]
 8006b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	f383 8810 	msr	PRIMASK, r3
}
 8006b9a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f9b2 	bl	8006f08 <_tx_byte_pool_search>
 8006ba4:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8006baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8006bb0:	b672      	cpsid	i
    return(int_posture);
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8006bb4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8006bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc0:	e006      	b.n	8006bd0 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d101      	bne.n	8006bd0 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0d9      	beq.n	8006b8a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bda:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8006bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <_tx_byte_allocate+0x9c>
 8006be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	f383 8810 	msr	PRIMASK, r3
}
 8006bec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8006bf2:	e06c      	b.n	8006cce <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d061      	beq.n	8006cbe <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8006bfa:	4b38      	ldr	r3, [pc, #224]	; (8006cdc <_tx_byte_allocate+0x184>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8006c02:	2310      	movs	r3, #16
 8006c04:	653b      	str	r3, [r7, #80]	; 0x50
 8006c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c08:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	f383 8810 	msr	PRIMASK, r3
}
 8006c10:	e05d      	b.n	8006cce <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8006c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c14:	4a32      	ldr	r2, [pc, #200]	; (8006ce0 <_tx_byte_allocate+0x188>)
 8006c16:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8006c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8006c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8006c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8006c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c34:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8006c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c52:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8006c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c58:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8006c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c5e:	675a      	str	r2, [r3, #116]	; 0x74
 8006c60:	e011      	b.n	8006c86 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8006c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c6c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8006c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c72:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8006c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c78:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c7e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8006c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c84:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8006c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c88:	2209      	movs	r2, #9
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c8e:	2201      	movs	r2, #1
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8006c98:	4b10      	ldr	r3, [pc, #64]	; (8006cdc <_tx_byte_allocate+0x184>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	4a0f      	ldr	r2, [pc, #60]	; (8006cdc <_tx_byte_allocate+0x184>)
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f383 8810 	msr	PRIMASK, r3
}
 8006cac:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8006cae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006cb0:	f002 fc86 	bl	80095c0 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8006cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cba:	653b      	str	r3, [r7, #80]	; 0x50
 8006cbc:	e007      	b.n	8006cce <_tx_byte_allocate+0x176>
 8006cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f383 8810 	msr	PRIMASK, r3
}
 8006cc8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8006cca:	2310      	movs	r3, #16
 8006ccc:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8006cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3758      	adds	r7, #88	; 0x58
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	240046ec 	.word	0x240046ec
 8006cdc:	24004784 	.word	0x24004784
 8006ce0:	08006ce5 	.word	0x08006ce5

08006ce4 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08e      	sub	sp, #56	; 0x38
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006cee:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf2:	623b      	str	r3, [r7, #32]
    return(posture);
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006cf6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006cf8:	b672      	cpsid	i
    return(int_posture);
 8006cfa:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8006cfc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d02:	4a33      	ldr	r2, [pc, #204]	; (8006dd0 <_tx_byte_pool_cleanup+0xec>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d158      	bne.n	8006dba <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d152      	bne.n	8006dba <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d04c      	beq.n	8006dba <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <_tx_byte_pool_cleanup+0xf0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d147      	bne.n	8006dba <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d043      	beq.n	8006dba <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	1e5a      	subs	r2, r3, #1
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	2200      	movs	r2, #0
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24
 8006d54:	e013      	b.n	8006d7e <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d66:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d6c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d102      	bne.n	8006d7e <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d7c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	2b09      	cmp	r3, #9
 8006d84:	d119      	bne.n	8006dba <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2210      	movs	r2, #16
 8006d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006d8e:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <_tx_byte_pool_cleanup+0xf4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3301      	adds	r3, #1
 8006d94:	4a10      	ldr	r2, [pc, #64]	; (8006dd8 <_tx_byte_pool_cleanup+0xf4>)
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f383 8810 	msr	PRIMASK, r3
}
 8006da2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f002 fb0b 	bl	80093c0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006daa:	f3ef 8310 	mrs	r3, PRIMASK
 8006dae:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006db0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006db2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006db4:	b672      	cpsid	i
    return(int_posture);
 8006db6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f383 8810 	msr	PRIMASK, r3
}
 8006dc4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006dc6:	bf00      	nop
 8006dc8:	3738      	adds	r7, #56	; 0x38
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	08006ce5 	.word	0x08006ce5
 8006dd4:	42595445 	.word	0x42595445
 8006dd8:	24004784 	.word	0x24004784

08006ddc <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08e      	sub	sp, #56	; 0x38
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8006dea:	2234      	movs	r2, #52	; 0x34
 8006dec:	2100      	movs	r1, #0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f009 fd5c 	bl	80108ac <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	f023 0303 	bic.w	r3, r3, #3
 8006dfa:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	f1a3 0208 	sub.w	r2, r3, #8
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2202      	movs	r2, #2
 8006e28:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8006e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	4413      	add	r3, r2
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e48:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4c:	3b04      	subs	r3, #4
 8006e4e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e66:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6e:	3304      	adds	r3, #4
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	4a1f      	ldr	r2, [pc, #124]	; (8006ef8 <_tx_byte_pool_create+0x11c>)
 8006e7a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006e82:	f3ef 8310 	mrs	r3, PRIMASK
 8006e86:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006e88:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006e8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006e8c:	b672      	cpsid	i
    return(int_posture);
 8006e8e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a19      	ldr	r2, [pc, #100]	; (8006efc <_tx_byte_pool_create+0x120>)
 8006e96:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8006e98:	4b19      	ldr	r3, [pc, #100]	; (8006f00 <_tx_byte_pool_create+0x124>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d109      	bne.n	8006eb4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006ea0:	4a18      	ldr	r2, [pc, #96]	; (8006f04 <_tx_byte_pool_create+0x128>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8006eb2:	e011      	b.n	8006ed8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8006eb4:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <_tx_byte_pool_create+0x128>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a3a      	ldr	r2, [r7, #32]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8006ed8:	4b09      	ldr	r3, [pc, #36]	; (8006f00 <_tx_byte_pool_create+0x124>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3301      	adds	r3, #1
 8006ede:	4a08      	ldr	r2, [pc, #32]	; (8006f00 <_tx_byte_pool_create+0x124>)
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f383 8810 	msr	PRIMASK, r3
}
 8006eec:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3738      	adds	r7, #56	; 0x38
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	ffffeeee 	.word	0xffffeeee
 8006efc:	42595445 	.word	0x42595445
 8006f00:	240046e0 	.word	0x240046e0
 8006f04:	240046dc 	.word	0x240046dc

08006f08 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b097      	sub	sp, #92	; 0x5c
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f16:	f3ef 8310 	mrs	r3, PRIMASK
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8006f1e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f20:	b672      	cpsid	i
    return(int_posture);
 8006f22:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8006f24:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	3b02      	subs	r3, #2
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	4413      	add	r3, r2
 8006f34:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d308      	bcc.n	8006f50 <_tx_byte_pool_search+0x48>
 8006f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f40:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f383 8810 	msr	PRIMASK, r3
}
 8006f48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	653b      	str	r3, [r7, #80]	; 0x50
 8006f4e:	e0dd      	b.n	800710c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8006f50:	4b72      	ldr	r3, [pc, #456]	; (800711c <_tx_byte_pool_search+0x214>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f5a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f70:	3304      	adds	r3, #4
 8006f72:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f76:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a68      	ldr	r2, [pc, #416]	; (8007120 <_tx_byte_pool_search+0x218>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d143      	bne.n	800700a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8006f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d104      	bne.n	8006f92 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f8c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f94:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8006f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8006fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa6:	3b08      	subs	r3, #8
 8006fa8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8006faa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d257      	bcs.n	8007062 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	3304      	adds	r3, #4
 8006fba:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a56      	ldr	r2, [pc, #344]	; (8007120 <_tx_byte_pool_search+0x218>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d113      	bne.n	8006ff2 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	1e5a      	subs	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d114      	bne.n	8007014 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fee:	615a      	str	r2, [r3, #20]
 8006ff0:	e010      	b.n	8007014 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8006ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8007002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007004:	3b01      	subs	r3, #1
 8007006:	64bb      	str	r3, [r7, #72]	; 0x48
 8007008:	e004      	b.n	8007014 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800700a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8007014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800701a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800701c:	3b01      	subs	r3, #1
 800701e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007022:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f383 8810 	msr	PRIMASK, r3
}
 800702a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800702c:	f3ef 8310 	mrs	r3, PRIMASK
 8007030:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007032:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007034:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007036:	b672      	cpsid	i
    return(int_posture);
 8007038:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800703a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007042:	429a      	cmp	r2, r3
 8007044:	d009      	beq.n	800705a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007058:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800705a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800705c:	2b00      	cmp	r3, #0
 800705e:	d186      	bne.n	8006f6e <_tx_byte_pool_search+0x66>
 8007060:	e000      	b.n	8007064 <_tx_byte_pool_search+0x15c>
                    break;
 8007062:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8007064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d048      	beq.n	80070fc <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800706a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b13      	cmp	r3, #19
 8007072:	d91e      	bls.n	80070b2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	3308      	adds	r3, #8
 8007078:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800707a:	4413      	add	r3, r2
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8007082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007084:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	3304      	adds	r3, #4
 8007092:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8007098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709a:	4a21      	ldr	r2, [pc, #132]	; (8007120 <_tx_byte_pool_search+0x218>)
 800709c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ac:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80070b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b4:	3304      	adds	r3, #4
 80070b6:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	f1a3 0208 	sub.w	r2, r3, #8
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070d8:	429a      	cmp	r2, r3
 80070da:	d105      	bne.n	80070e8 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80070dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070de:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	615a      	str	r2, [r3, #20]
 80070e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f383 8810 	msr	PRIMASK, r3
}
 80070f2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80070f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f6:	3308      	adds	r3, #8
 80070f8:	653b      	str	r3, [r7, #80]	; 0x50
 80070fa:	e007      	b.n	800710c <_tx_byte_pool_search+0x204>
 80070fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f383 8810 	msr	PRIMASK, r3
}
 8007106:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8007108:	2300      	movs	r3, #0
 800710a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800710c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800710e:	4618      	mov	r0, r3
 8007110:	375c      	adds	r7, #92	; 0x5c
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	240046ec 	.word	0x240046ec
 8007120:	ffffeeee 	.word	0xffffeeee

08007124 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08e      	sub	sp, #56	; 0x38
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800712e:	f3ef 8310 	mrs	r3, PRIMASK
 8007132:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007134:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8007136:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007138:	b672      	cpsid	i
    return(int_posture);
 800713a:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800713c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007142:	4a38      	ldr	r2, [pc, #224]	; (8007224 <_tx_event_flags_cleanup+0x100>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d162      	bne.n	800720e <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d15c      	bne.n	800720e <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007158:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	2b00      	cmp	r3, #0
 800715e:	d056      	beq.n	800720e <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a30      	ldr	r2, [pc, #192]	; (8007228 <_tx_event_flags_cleanup+0x104>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d151      	bne.n	800720e <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d04d      	beq.n	800720e <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8007184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007186:	2b00      	cmp	r3, #0
 8007188:	d020      	beq.n	80071cc <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	3b01      	subs	r3, #1
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007194:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	2200      	movs	r2, #0
 80071a0:	611a      	str	r2, [r3, #16]
 80071a2:	e016      	b.n	80071d2 <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ae:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ba:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 80071bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d106      	bne.n	80071d2 <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c8:	611a      	str	r2, [r3, #16]
 80071ca:	e002      	b.n	80071d2 <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	2201      	movs	r2, #1
 80071d0:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	2b07      	cmp	r3, #7
 80071d8:	d119      	bne.n	800720e <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2207      	movs	r2, #7
 80071de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <_tx_event_flags_cleanup+0x108>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3301      	adds	r3, #1
 80071e8:	4a10      	ldr	r2, [pc, #64]	; (800722c <_tx_event_flags_cleanup+0x108>)
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f383 8810 	msr	PRIMASK, r3
}
 80071f6:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f002 f8e1 	bl	80093c0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80071fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007202:	617b      	str	r3, [r7, #20]
    return(posture);
 8007204:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007206:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007208:	b672      	cpsid	i
    return(int_posture);
 800720a:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f383 8810 	msr	PRIMASK, r3
}
 8007218:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800721a:	bf00      	nop
 800721c:	3738      	adds	r7, #56	; 0x38
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	08007125 	.word	0x08007125
 8007228:	4456444e 	.word	0x4456444e
 800722c:	24004784 	.word	0x24004784

08007230 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800723a:	2224      	movs	r2, #36	; 0x24
 800723c:	2100      	movs	r1, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f009 fb34 	bl	80108ac <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800724a:	f3ef 8310 	mrs	r3, PRIMASK
 800724e:	613b      	str	r3, [r7, #16]
    return(posture);
 8007250:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007252:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007254:	b672      	cpsid	i
    return(int_posture);
 8007256:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8007258:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a18      	ldr	r2, [pc, #96]	; (80072c0 <_tx_event_flags_create+0x90>)
 800725e:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8007260:	4b18      	ldr	r3, [pc, #96]	; (80072c4 <_tx_event_flags_create+0x94>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8007268:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <_tx_event_flags_create+0x98>)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	61da      	str	r2, [r3, #28]
 800727a:	e011      	b.n	80072a0 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800727c:	4b12      	ldr	r3, [pc, #72]	; (80072c8 <_tx_event_flags_create+0x98>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 80072a0:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <_tx_event_flags_create+0x94>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	4a07      	ldr	r2, [pc, #28]	; (80072c4 <_tx_event_flags_create+0x94>)
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f383 8810 	msr	PRIMASK, r3
}
 80072b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3720      	adds	r7, #32
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	4456444e 	.word	0x4456444e
 80072c4:	240046c8 	.word	0x240046c8
 80072c8:	240046c4 	.word	0x240046c4

080072cc <_tx_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b092      	sub	sp, #72	; 0x48
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80072d4:	f3ef 8310 	mrs	r3, PRIMASK
 80072d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80072da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80072de:	b672      	cpsid	i
    return(int_posture);
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Disable interrupts to remove the group from the created list.  */
    TX_DISABLE
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_DELETE_INSERT

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 80072ea:	4b3d      	ldr	r3, [pc, #244]	; (80073e0 <_tx_event_flags_delete+0x114>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	4a3b      	ldr	r2, [pc, #236]	; (80073e0 <_tx_event_flags_delete+0x114>)
 80072f2:	6013      	str	r3, [r2, #0]

    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 80072f4:	4b3a      	ldr	r3, [pc, #232]	; (80073e0 <_tx_event_flags_delete+0x114>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <_tx_event_flags_delete+0x38>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 80072fc:	4b39      	ldr	r3, [pc, #228]	; (80073e4 <_tx_event_flags_delete+0x118>)
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e013      	b.n	800732c <_tx_event_flags_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_group =                                           group_ptr -> tx_event_flags_group_created_next;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007314:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731a:	619a      	str	r2, [r3, #24]

        /* See if we have to update the created list head pointer.  */
        if (_tx_event_flags_created_ptr == group_ptr)
 800731c:	4b31      	ldr	r3, [pc, #196]	; (80073e4 <_tx_event_flags_delete+0x118>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d102      	bne.n	800732c <_tx_event_flags_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_event_flags_created_ptr =  next_group;
 8007326:	4a2f      	ldr	r2, [pc, #188]	; (80073e4 <_tx_event_flags_delete+0x118>)
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800732c:	4b2e      	ldr	r3, [pc, #184]	; (80073e8 <_tx_event_flags_delete+0x11c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <_tx_event_flags_delete+0x11c>)
 8007334:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	647b      	str	r3, [r7, #68]	; 0x44
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	611a      	str	r2, [r3, #16]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	643b      	str	r3, [r7, #64]	; 0x40
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	615a      	str	r2, [r3, #20]
 800734e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	f383 8810 	msr	PRIMASK, r3
}
 8007358:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800735a:	e024      	b.n	80073a6 <_tx_event_flags_delete+0xda>
    {

        /* Decrement the number of suspended threads.  */
        suspended_count--;
 800735c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735e:	3b01      	subs	r3, #1
 8007360:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007362:	f3ef 8310 	mrs	r3, PRIMASK
 8007366:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007368:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800736a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800736c:	b672      	cpsid	i
    return(int_posture);
 800736e:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8007370:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007374:	2200      	movs	r2, #0
 8007376:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8007378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737a:	2201      	movs	r2, #1
 800737c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8007380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007384:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8007386:	4b18      	ldr	r3, [pc, #96]	; (80073e8 <_tx_event_flags_delete+0x11c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3301      	adds	r3, #1
 800738c:	4a16      	ldr	r2, [pc, #88]	; (80073e8 <_tx_event_flags_delete+0x11c>)
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007392:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	f383 8810 	msr	PRIMASK, r3
}
 800739a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800739c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800739e:	f002 f80f 	bl	80093c0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80073a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1d7      	bne.n	800735c <_tx_event_flags_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073ac:	f3ef 8310 	mrs	r3, PRIMASK
 80073b0:	613b      	str	r3, [r7, #16]
    return(posture);
 80073b2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80073b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80073b6:	b672      	cpsid	i
    return(int_posture);
 80073b8:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_EVENT_FLAGS_GROUP_DELETE_PORT_COMPLETION(group_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <_tx_event_flags_delete+0x11c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <_tx_event_flags_delete+0x11c>)
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f383 8810 	msr	PRIMASK, r3
}
 80073d0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80073d2:	f001 ffbb 	bl	800934c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3748      	adds	r7, #72	; 0x48
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	240046c8 	.word	0x240046c8
 80073e4:	240046c4 	.word	0x240046c4
 80073e8:	24004784 	.word	0x24004784

080073ec <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b096      	sub	sp, #88	; 0x58
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073fa:	f3ef 8310 	mrs	r3, PRIMASK
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8007402:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007404:	b672      	cpsid	i
    return(int_posture);
 8007406:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8007408:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	43da      	mvns	r2, r3
 8007416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007418:	401a      	ands	r2, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800742c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8007432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007434:	43db      	mvns	r3, r3
 8007436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007438:	4013      	ands	r3, r2
 800743a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800743c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743e:	2b02      	cmp	r3, #2
 8007440:	d10a      	bne.n	8007458 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8007442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4013      	ands	r3, r2
 8007448:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800744a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	d006      	beq.n	8007460 <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 8007452:	2300      	movs	r3, #0
 8007454:	64bb      	str	r3, [r7, #72]	; 0x48
 8007456:	e003      	b.n	8007460 <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8007458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	4013      	ands	r3, r2
 800745e:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 8007460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007462:	2b00      	cmp	r3, #0
 8007464:	d026      	beq.n	80074b4 <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	2b01      	cmp	r3, #1
 8007472:	d11c      	bne.n	80074ae <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8007474:	2300      	movs	r3, #0
 8007476:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800748c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800748e:	2b01      	cmp	r3, #1
 8007490:	d106      	bne.n	80074a0 <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1a      	ldr	r2, [r3, #32]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	621a      	str	r2, [r3, #32]
 800749e:	e006      	b.n	80074ae <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	43db      	mvns	r3, r3
 80074a8:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80074ae:	2300      	movs	r3, #0
 80074b0:	653b      	str	r3, [r7, #80]	; 0x50
 80074b2:	e073      	b.n	800759c <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80074b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d06e      	beq.n	8007598 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 80074ba:	4b3e      	ldr	r3, [pc, #248]	; (80075b4 <_tx_event_flags_get+0x1c8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <_tx_event_flags_get+0xdc>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 80074c8:	2307      	movs	r3, #7
 80074ca:	653b      	str	r3, [r7, #80]	; 0x50
 80074cc:	e066      	b.n	800759c <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80074ce:	4b3a      	ldr	r3, [pc, #232]	; (80075b8 <_tx_event_flags_get+0x1cc>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	4a39      	ldr	r2, [pc, #228]	; (80075bc <_tx_event_flags_get+0x1d0>)
 80074d8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8007508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750a:	2b00      	cmp	r3, #0
 800750c:	d109      	bne.n	8007522 <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007512:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007518:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800751e:	675a      	str	r2, [r3, #116]	; 0x74
 8007520:	e011      	b.n	8007546 <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007538:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800753e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007544:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	2207      	movs	r2, #7
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007558:	2201      	movs	r2, #1
 800755a:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007560:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8007562:	4b14      	ldr	r3, [pc, #80]	; (80075b4 <_tx_event_flags_get+0x1c8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <_tx_event_flags_get+0x1c8>)
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800756e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f383 8810 	msr	PRIMASK, r3
}
 8007576:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007578:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800757a:	f002 f821 	bl	80095c0 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800757e:	f3ef 8310 	mrs	r3, PRIMASK
 8007582:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007584:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8007586:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007588:	b672      	cpsid	i
    return(int_posture);
 800758a:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800758c:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007594:	653b      	str	r3, [r7, #80]	; 0x50
 8007596:	e001      	b.n	800759c <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 8007598:	2307      	movs	r3, #7
 800759a:	653b      	str	r3, [r7, #80]	; 0x50
 800759c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800759e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f383 8810 	msr	PRIMASK, r3
}
 80075a6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 80075a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3758      	adds	r7, #88	; 0x58
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	24004784 	.word	0x24004784
 80075b8:	240046ec 	.word	0x240046ec
 80075bc:	08007125 	.word	0x08007125

080075c0 <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b0a6      	sub	sp, #152	; 0x98
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80075cc:	f3ef 8310 	mrs	r3, PRIMASK
 80075d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80075d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80075d4:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80075d6:	b672      	cpsid	i
    return(int_posture);
 80075d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80075da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d023      	beq.n	8007630 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 80075e8:	2300      	movs	r3, #0
 80075ea:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 80075fc:	2301      	movs	r3, #1
 80075fe:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8007600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007602:	2b01      	cmp	r3, #1
 8007604:	d107      	bne.n	8007616 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1a      	ldr	r2, [r3, #32]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	43db      	mvns	r3, r3
 800760e:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	621a      	str	r2, [r3, #32]
 8007614:	e005      	b.n	8007622 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	609a      	str	r2, [r3, #8]
 8007622:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007626:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762a:	f383 8810 	msr	PRIMASK, r3
}
 800762e:	e1d2      	b.n	80079d6 <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a1a      	ldr	r2, [r3, #32]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	43db      	mvns	r3, r3
 800764c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 8007652:	2300      	movs	r3, #0
 8007654:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 81a4 	beq.w	80079b0 <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 8007668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800766c:	2b01      	cmp	r3, #1
 800766e:	d167      	bne.n	8007740 <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800767e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007684:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 8007686:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800768a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800768e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 8007690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8007698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800769a:	2b02      	cmp	r3, #2
 800769c:	d10a      	bne.n	80076b4 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800769e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076a2:	4013      	ands	r3, r2
 80076a4:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 80076a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d006      	beq.n	80076bc <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 80076ae:	2300      	movs	r3, #0
 80076b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80076b2:	e003      	b.n	80076bc <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80076b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076b8:	4013      	ands	r3, r2
 80076ba:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 80076bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 817d 	beq.w	80079be <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80076c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ca:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 80076cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076d0:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 80076d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 80076da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d106      	bne.n	80076ee <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076e6:	43db      	mvns	r3, r3
 80076e8:	401a      	ands	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80076fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076fe:	2200      	movs	r2, #0
 8007700:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800770c:	4ba7      	ldr	r3, [pc, #668]	; (80079ac <_tx_event_flags_set+0x3ec>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	4aa6      	ldr	r2, [pc, #664]	; (80079ac <_tx_event_flags_set+0x3ec>)
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800771a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	f383 8810 	msr	PRIMASK, r3
}
 8007722:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8007724:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8007728:	f001 fe4a 	bl	80093c0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800772c:	f3ef 8310 	mrs	r3, PRIMASK
 8007730:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8007732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8007736:	b672      	cpsid	i
    return(int_posture);
 8007738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800773a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800773e:	e13e      	b.n	80079be <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 8007748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800774c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8007756:	2300      	movs	r3, #0
 8007758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800775c:	2300      	movs	r3, #0
 800775e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 8007768:	4b90      	ldr	r3, [pc, #576]	; (80079ac <_tx_event_flags_set+0x3ec>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	4a8f      	ldr	r2, [pc, #572]	; (80079ac <_tx_event_flags_set+0x3ec>)
 8007770:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 8007772:	2301      	movs	r3, #1
 8007774:	677b      	str	r3, [r7, #116]	; 0x74
 8007776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	f383 8810 	msr	PRIMASK, r3
}
 8007782:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007784:	f3ef 8310 	mrs	r3, PRIMASK
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800778c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800778e:	b672      	cpsid	i
    return(int_posture);
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 8007792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00f      	beq.n	80077be <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 80077a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80077ba:	4313      	orrs	r3, r2
 80077bc:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80077be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c4:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80077c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077cc:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 80077ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077d6:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 80077d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 80077e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d10a      	bne.n	80077fc <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 80077e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80077e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ea:	4013      	ands	r3, r2
 80077ec:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 80077ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d006      	beq.n	8007804 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 80077f6:	2300      	movs	r3, #0
 80077f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80077fa:	e003      	b.n	8007804 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 80077fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80077fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007800:	4013      	ands	r3, r2
 8007802:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8007804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	2b07      	cmp	r3, #7
 800780c:	d001      	beq.n	8007812 <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800780e:	2301      	movs	r3, #1
 8007810:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8007812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007814:	2b00      	cmp	r3, #0
 8007816:	d069      	beq.n	80078ec <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8007818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800781c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781e:	2b07      	cmp	r3, #7
 8007820:	d11d      	bne.n	800785e <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8007822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007828:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800782a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800782c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800782e:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8007830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8007838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783a:	2b01      	cmp	r3, #1
 800783c:	d106      	bne.n	800784c <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007844:	43db      	mvns	r3, r3
 8007846:	401a      	ands	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800784c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007850:	2200      	movs	r2, #0
 8007852:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800785e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007864:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007868:	429a      	cmp	r2, r3
 800786a:	d103      	bne.n	8007874 <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800786c:	2300      	movs	r3, #0
 800786e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007872:	e018      	b.n	80078a6 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8007874:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800787c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8007884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007886:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007888:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800788a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800788c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800788e:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8007890:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007898:	429a      	cmp	r2, r3
 800789a:	d104      	bne.n	80078a6 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800789c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	1e5a      	subs	r2, r3, #1
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 80078b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10c      	bne.n	80078d2 <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 80078b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 80078c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 80078c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078cc:	2200      	movs	r2, #0
 80078ce:	671a      	str	r2, [r3, #112]	; 0x70
 80078d0:	e00c      	b.n	80078ec <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 80078d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80078da:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 80078dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078e0:	2200      	movs	r2, #0
 80078e2:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 80078e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 80078ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 80078f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078f6:	3b01      	subs	r3, #1
 80078f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 80078fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007900:	2b00      	cmp	r3, #0
 8007902:	f47f af38 	bne.w	8007776 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800790c:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	43db      	mvns	r3, r3
 8007920:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	621a      	str	r2, [r3, #32]
 800792c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	f383 8810 	msr	PRIMASK, r3
}
 8007938:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800793a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800793e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8007942:	e01f      	b.n	8007984 <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794a:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800794c:	f3ef 8310 	mrs	r3, PRIMASK
 8007950:	623b      	str	r3, [r7, #32]
    return(posture);
 8007952:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007954:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007956:	b672      	cpsid	i
    return(int_posture);
 8007958:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800795a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <_tx_event_flags_set+0x3ec>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	4a11      	ldr	r2, [pc, #68]	; (80079ac <_tx_event_flags_set+0x3ec>)
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	f383 8810 	msr	PRIMASK, r3
}
 8007974:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8007976:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800797a:	f001 fd21 	bl	80093c0 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800797e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007980:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8007984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1db      	bne.n	8007944 <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800798c:	f3ef 8310 	mrs	r3, PRIMASK
 8007990:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007992:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007994:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007996:	b672      	cpsid	i
    return(int_posture);
 8007998:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800799a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800799e:	4b03      	ldr	r3, [pc, #12]	; (80079ac <_tx_event_flags_set+0x3ec>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	4a01      	ldr	r2, [pc, #4]	; (80079ac <_tx_event_flags_set+0x3ec>)
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	e009      	b.n	80079be <_tx_event_flags_set+0x3fe>
 80079aa:	bf00      	nop
 80079ac:	24004784 	.word	0x24004784
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f383 8810 	msr	PRIMASK, r3
}
 80079ca:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 80079cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 80079d2:	f001 fcbb 	bl	800934c <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3798      	adds	r7, #152	; 0x98
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80079e4:	f001 fada 	bl	8008f9c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80079e8:	f002 f932 	bl	8009c50 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80079ec:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <_tx_initialize_high_level+0x58>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	4b12      	ldr	r3, [pc, #72]	; (8007a3c <_tx_initialize_high_level+0x5c>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80079f8:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <_tx_initialize_high_level+0x60>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <_tx_initialize_high_level+0x64>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8007a04:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <_tx_initialize_high_level+0x68>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <_tx_initialize_high_level+0x6c>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8007a10:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <_tx_initialize_high_level+0x70>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <_tx_initialize_high_level+0x74>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <_tx_initialize_high_level+0x78>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <_tx_initialize_high_level+0x7c>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8007a28:	4b0d      	ldr	r3, [pc, #52]	; (8007a60 <_tx_initialize_high_level+0x80>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <_tx_initialize_high_level+0x84>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
#endif
}
 8007a34:	bf00      	nop
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	240046b4 	.word	0x240046b4
 8007a3c:	240046b8 	.word	0x240046b8
 8007a40:	240046bc 	.word	0x240046bc
 8007a44:	240046c0 	.word	0x240046c0
 8007a48:	240046c4 	.word	0x240046c4
 8007a4c:	240046c8 	.word	0x240046c8
 8007a50:	240046d4 	.word	0x240046d4
 8007a54:	240046d8 	.word	0x240046d8
 8007a58:	240046dc 	.word	0x240046dc
 8007a5c:	240046e0 	.word	0x240046e0
 8007a60:	240046cc 	.word	0x240046cc
 8007a64:	240046d0 	.word	0x240046d0

08007a68 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8007a6c:	4b10      	ldr	r3, [pc, #64]	; (8007ab0 <_tx_initialize_kernel_enter+0x48>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8007a74:	d00c      	beq.n	8007a90 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007a76:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <_tx_initialize_kernel_enter+0x48>)
 8007a78:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007a7c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8007a7e:	f7f8 fc47 	bl	8000310 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8007a82:	f7ff ffad 	bl	80079e0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <_tx_initialize_kernel_enter+0x4c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	4a09      	ldr	r2, [pc, #36]	; (8007ab4 <_tx_initialize_kernel_enter+0x4c>)
 8007a8e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <_tx_initialize_kernel_enter+0x48>)
 8007a92:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007a96:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8007a98:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <_tx_initialize_kernel_enter+0x50>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7f8 fd5b 	bl	8000558 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8007aa2:	4b03      	ldr	r3, [pc, #12]	; (8007ab0 <_tx_initialize_kernel_enter+0x48>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8007aa8:	f7f8 fc72 	bl	8000390 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007aac:	bf00      	nop
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	24000010 	.word	0x24000010
 8007ab4:	24004784 	.word	0x24004784
 8007ab8:	240046e4 	.word	0x240046e4

08007abc <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08e      	sub	sp, #56	; 0x38
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aca:	623b      	str	r3, [r7, #32]
    return(posture);
 8007acc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007ace:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007ad0:	b672      	cpsid	i
    return(int_posture);
 8007ad2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8007ad4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ada:	4a33      	ldr	r2, [pc, #204]	; (8007ba8 <_tx_mutex_cleanup+0xec>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d158      	bne.n	8007b92 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d152      	bne.n	8007b92 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d04c      	beq.n	8007b92 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a2b      	ldr	r2, [pc, #172]	; (8007bac <_tx_mutex_cleanup+0xf0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d147      	bne.n	8007b92 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d043      	beq.n	8007b92 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	1e5a      	subs	r2, r3, #1
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d103      	bne.n	8007b2e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	2200      	movs	r2, #0
 8007b2a:	619a      	str	r2, [r3, #24]
 8007b2c:	e013      	b.n	8007b56 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b44:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d102      	bne.n	8007b56 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b54:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5a:	2b0d      	cmp	r3, #13
 8007b5c:	d119      	bne.n	8007b92 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	221d      	movs	r2, #29
 8007b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8007b66:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <_tx_mutex_cleanup+0xf4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	4a10      	ldr	r2, [pc, #64]	; (8007bb0 <_tx_mutex_cleanup+0xf4>)
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b72:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f383 8810 	msr	PRIMASK, r3
}
 8007b7a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 fc1f 	bl	80093c0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007b82:	f3ef 8310 	mrs	r3, PRIMASK
 8007b86:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007b88:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007b8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007b8c:	b672      	cpsid	i
    return(int_posture);
 8007b8e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f383 8810 	msr	PRIMASK, r3
}
 8007b9c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007b9e:	bf00      	nop
 8007ba0:	3738      	adds	r7, #56	; 0x38
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	08007abd 	.word	0x08007abd
 8007bac:	4d555445 	.word	0x4d555445
 8007bb0:	24004784 	.word	0x24004784

08007bb4 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc0:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007bc2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8007bc4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007bc6:	b672      	cpsid	i
    return(int_posture);
 8007bc8:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007bcc:	4b1a      	ldr	r3, [pc, #104]	; (8007c38 <_tx_mutex_thread_release+0x84>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	4a19      	ldr	r2, [pc, #100]	; (8007c38 <_tx_mutex_thread_release+0x84>)
 8007bd4:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bdc:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d017      	beq.n	8007c14 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	2201      	movs	r2, #1
 8007be8:	609a      	str	r2, [r3, #8]
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f383 8810 	msr	PRIMASK, r3
}
 8007bf4:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8007bf6:	6a38      	ldr	r0, [r7, #32]
 8007bf8:	f000 fb9c 	bl	8008334 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8007c00:	617b      	str	r3, [r7, #20]
    return(posture);
 8007c02:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007c04:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007c06:	b672      	cpsid	i
    return(int_posture);
 8007c08:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c12:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1dd      	bne.n	8007bd6 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8007c1a:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <_tx_mutex_thread_release+0x84>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	4a05      	ldr	r2, [pc, #20]	; (8007c38 <_tx_mutex_thread_release+0x84>)
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f383 8810 	msr	PRIMASK, r3
}
 8007c2e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8007c30:	bf00      	nop
 8007c32:	3728      	adds	r7, #40	; 0x28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	24004784 	.word	0x24004784

08007c3c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08a      	sub	sp, #40	; 0x28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8007c48:	2234      	movs	r2, #52	; 0x34
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f008 fe2d 	bl	80108ac <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c62:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007c64:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007c66:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007c68:	b672      	cpsid	i
    return(int_posture);
 8007c6a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4a1a      	ldr	r2, [pc, #104]	; (8007cdc <_tx_mutex_create+0xa0>)
 8007c72:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8007c74:	4b1a      	ldr	r3, [pc, #104]	; (8007ce0 <_tx_mutex_create+0xa4>)
 8007c76:	4a1b      	ldr	r2, [pc, #108]	; (8007ce4 <_tx_mutex_create+0xa8>)
 8007c78:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8007c7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <_tx_mutex_create+0xac>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8007c82:	4a1a      	ldr	r2, [pc, #104]	; (8007cec <_tx_mutex_create+0xb0>)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24
 8007c94:	e011      	b.n	8007cba <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8007c96:	4b15      	ldr	r3, [pc, #84]	; (8007cec <_tx_mutex_create+0xb0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6a3a      	ldr	r2, [r7, #32]
 8007cb8:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8007cba:	4b0b      	ldr	r3, [pc, #44]	; (8007ce8 <_tx_mutex_create+0xac>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	4a09      	ldr	r2, [pc, #36]	; (8007ce8 <_tx_mutex_create+0xac>)
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f383 8810 	msr	PRIMASK, r3
}
 8007cce:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3728      	adds	r7, #40	; 0x28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	4d555445 	.word	0x4d555445
 8007ce0:	24004788 	.word	0x24004788
 8007ce4:	08007bb5 	.word	0x08007bb5
 8007ce8:	240046d0 	.word	0x240046d0
 8007cec:	240046cc 	.word	0x240046cc

08007cf0 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b096      	sub	sp, #88	; 0x58
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cfc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8007d00:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8007d02:	b672      	cpsid	i
    return(int_posture);
 8007d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8007d06:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8007d0e:	4b4a      	ldr	r3, [pc, #296]	; (8007e38 <_tx_mutex_delete+0x148>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	4a48      	ldr	r2, [pc, #288]	; (8007e38 <_tx_mutex_delete+0x148>)
 8007d16:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8007d18:	4b47      	ldr	r3, [pc, #284]	; (8007e38 <_tx_mutex_delete+0x148>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8007d20:	4b46      	ldr	r3, [pc, #280]	; (8007e3c <_tx_mutex_delete+0x14c>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	e013      	b.n	8007d50 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8007d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d38:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8007d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d3e:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8007d40:	4b3e      	ldr	r3, [pc, #248]	; (8007e3c <_tx_mutex_delete+0x14c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d102      	bne.n	8007d50 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8007d4a:	4a3c      	ldr	r2, [pc, #240]	; (8007e3c <_tx_mutex_delete+0x14c>)
 8007d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007d50:	4b3b      	ldr	r3, [pc, #236]	; (8007e40 <_tx_mutex_delete+0x150>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	4a3a      	ldr	r2, [pc, #232]	; (8007e40 <_tx_mutex_delete+0x150>)
 8007d58:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8007d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d013      	beq.n	8007da6 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	609a      	str	r2, [r3, #8]
 8007d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d86:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	f383 8810 	msr	PRIMASK, r3
}
 8007d8e:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 facf 	bl	8008334 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007d96:	f3ef 8310 	mrs	r3, PRIMASK
 8007d9a:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8007da0:	b672      	cpsid	i
    return(int_posture);
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8007da4:	657b      	str	r3, [r7, #84]	; 0x54
 8007da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	f383 8810 	msr	PRIMASK, r3
}
 8007db0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8007db2:	e024      	b.n	8007dfe <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8007db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db6:	3b01      	subs	r3, #1
 8007db8:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007dba:	f3ef 8310 	mrs	r3, PRIMASK
 8007dbe:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007dc0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8007dc2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007dc4:	b672      	cpsid	i
    return(int_posture);
 8007dc6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8007dc8:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dcc:	2200      	movs	r2, #0
 8007dce:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8007dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8007dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8007dde:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <_tx_mutex_delete+0x150>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	4a16      	ldr	r2, [pc, #88]	; (8007e40 <_tx_mutex_delete+0x150>)
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	f383 8810 	msr	PRIMASK, r3
}
 8007df2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007df4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007df6:	f001 fae3 	bl	80093c0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8007dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfc:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 8007dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1d7      	bne.n	8007db4 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e04:	f3ef 8310 	mrs	r3, PRIMASK
 8007e08:	613b      	str	r3, [r7, #16]
    return(posture);
 8007e0a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007e0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e0e:	b672      	cpsid	i
    return(int_posture);
 8007e10:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8007e12:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8007e14:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <_tx_mutex_delete+0x150>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <_tx_mutex_delete+0x150>)
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e20:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f383 8810 	msr	PRIMASK, r3
}
 8007e28:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8007e2a:	f001 fa8f 	bl	800934c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3758      	adds	r7, #88	; 0x58
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	240046d0 	.word	0x240046d0
 8007e3c:	240046cc 	.word	0x240046cc
 8007e40:	24004784 	.word	0x24004784

08007e44 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b092      	sub	sp, #72	; 0x48
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8007e56:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e58:	b672      	cpsid	i
    return(int_posture);
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8007e5c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007e5e:	4b7a      	ldr	r3, [pc, #488]	; (8008048 <_tx_mutex_get+0x204>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d144      	bne.n	8007ef6 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e76:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8007e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d032      	beq.n	8007ee4 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d106      	bne.n	8007e94 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8007e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8007e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00f      	beq.n	8007ec2 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eb8:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ebe:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ec0:	e009      	b.n	8007ed6 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8007ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8007ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f383 8810 	msr	PRIMASK, r3
}
 8007eee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef4:	e0a2      	b.n	800803c <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d10d      	bne.n	8007f1c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	609a      	str	r2, [r3, #8]
 8007f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	f383 8810 	msr	PRIMASK, r3
}
 8007f14:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8007f16:	2300      	movs	r3, #0
 8007f18:	647b      	str	r3, [r7, #68]	; 0x44
 8007f1a:	e08f      	b.n	800803c <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8084 	beq.w	800802c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8007f24:	4b49      	ldr	r3, [pc, #292]	; (800804c <_tx_mutex_get+0x208>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d008      	beq.n	8007f3e <_tx_mutex_get+0xfa>
 8007f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f383 8810 	msr	PRIMASK, r3
}
 8007f36:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8007f38:	231d      	movs	r3, #29
 8007f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f3c:	e07e      	b.n	800803c <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8007f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f46:	4a42      	ldr	r2, [pc, #264]	; (8008050 <_tx_mutex_get+0x20c>)
 8007f48:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8007f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8007f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f6a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f70:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8007f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f76:	675a      	str	r2, [r3, #116]	; 0x74
 8007f78:	e011      	b.n	8007f9e <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f84:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f8a:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8007f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f90:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f96:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f9c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8007fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007faa:	220d      	movs	r2, #13
 8007fac:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8007fba:	4b24      	ldr	r3, [pc, #144]	; (800804c <_tx_mutex_get+0x208>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	4a22      	ldr	r2, [pc, #136]	; (800804c <_tx_mutex_get+0x208>)
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f383 8810 	msr	PRIMASK, r3
}
 8007fce:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d121      	bne.n	800801c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d903      	bls.n	8007fec <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8007fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8007fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d204      	bcs.n	8008004 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8007ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8008004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	429a      	cmp	r2, r3
 800800e:	d905      	bls.n	800801c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8008010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	4619      	mov	r1, r3
 8008016:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008018:	f000 f8ce 	bl	80081b8 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800801c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800801e:	f001 facf 	bl	80095c0 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8008022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008028:	647b      	str	r3, [r7, #68]	; 0x44
 800802a:	e007      	b.n	800803c <_tx_mutex_get+0x1f8>
 800802c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800802e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f383 8810 	msr	PRIMASK, r3
}
 8008036:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8008038:	231d      	movs	r3, #29
 800803a:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800803c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800803e:	4618      	mov	r0, r3
 8008040:	3748      	adds	r7, #72	; 0x48
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	240046ec 	.word	0x240046ec
 800804c:	24004784 	.word	0x24004784
 8008050:	08007abd 	.word	0x08007abd

08008054 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b092      	sub	sp, #72	; 0x48
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800805c:	f3ef 8310 	mrs	r3, PRIMASK
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8008064:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008066:	b672      	cpsid	i
    return(int_posture);
 8008068:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800806a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8008072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008074:	2b01      	cmp	r3, #1
 8008076:	d805      	bhi.n	8008084 <_tx_mutex_prioritize+0x30>
 8008078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800807a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	f383 8810 	msr	PRIMASK, r3
}
 8008082:	e092      	b.n	80081aa <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8008084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008086:	2b02      	cmp	r3, #2
 8008088:	d114      	bne.n	80080b4 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	429a      	cmp	r2, r3
 80080a0:	d202      	bcs.n	80080a8 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080a6:	619a      	str	r2, [r3, #24]
 80080a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080aa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	f383 8810 	msr	PRIMASK, r3
}
 80080b2:	e07a      	b.n	80081aa <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80080be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80080c4:	4b3b      	ldr	r3, [pc, #236]	; (80081b4 <_tx_mutex_prioritize+0x160>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3301      	adds	r3, #1
 80080ca:	4a3a      	ldr	r2, [pc, #232]	; (80081b4 <_tx_mutex_prioritize+0x160>)
 80080cc:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 80080d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	429a      	cmp	r2, r3
 80080dc:	d201      	bcs.n	80080e2 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80080de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f383 8810 	msr	PRIMASK, r3
}
 80080ec:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80080ee:	f3ef 8310 	mrs	r3, PRIMASK
 80080f2:	617b      	str	r3, [r7, #20]
    return(posture);
 80080f4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80080f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80080f8:	b672      	cpsid	i
    return(int_posture);
 80080fa:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80080fc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008104:	429a      	cmp	r2, r3
 8008106:	d002      	beq.n	800810e <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8008108:	2301      	movs	r3, #1
 800810a:	633b      	str	r3, [r7, #48]	; 0x30
 800810c:	e006      	b.n	800811c <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008114:	429a      	cmp	r2, r3
 8008116:	d001      	beq.n	800811c <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8008118:	2301      	movs	r3, #1
 800811a:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	2b00      	cmp	r3, #0
 8008120:	d103      	bne.n	800812a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8008122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	643b      	str	r3, [r7, #64]	; 0x40
 8008128:	e00c      	b.n	8008144 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800813a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8008140:	2300      	movs	r3, #0
 8008142:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8008144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	429a      	cmp	r2, r3
 800814a:	d1c2      	bne.n	80080d2 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800814c:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <_tx_mutex_prioritize+0x160>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3b01      	subs	r3, #1
 8008152:	4a18      	ldr	r2, [pc, #96]	; (80081b4 <_tx_mutex_prioritize+0x160>)
 8008154:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8008156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	429a      	cmp	r2, r3
 800815c:	d01d      	beq.n	800819a <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800815e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8008164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008168:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800816a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800816e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008174:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800817a:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800817c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008180:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8008182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008186:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800818c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008192:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008198:	619a      	str	r2, [r3, #24]
 800819a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800819c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f383 8810 	msr	PRIMASK, r3
}
 80081a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80081a6:	f001 f8d1 	bl	800934c <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80081aa:	2300      	movs	r3, #0
#endif
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3748      	adds	r7, #72	; 0x48
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	24004784 	.word	0x24004784

080081b8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b090      	sub	sp, #64	; 0x40
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081c2:	f3ef 8310 	mrs	r3, PRIMASK
 80081c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80081ca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80081cc:	b672      	cpsid	i
    return(int_posture);
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d017      	beq.n	800820a <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d905      	bls.n	80081f8 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80081f6:	e002      	b.n	80081fe <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80081fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	f383 8810 	msr	PRIMASK, r3
}
 8008208:	e089      	b.n	800831e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800820a:	4b47      	ldr	r3, [pc, #284]	; (8008328 <_tx_mutex_priority_change+0x170>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8008216:	4b45      	ldr	r3, [pc, #276]	; (800832c <_tx_mutex_priority_change+0x174>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3302      	adds	r3, #2
 800821c:	4a43      	ldr	r2, [pc, #268]	; (800832c <_tx_mutex_priority_change+0x174>)
 800821e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	220e      	movs	r2, #14
 8008224:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	64da      	str	r2, [r3, #76]	; 0x4c
 8008232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008234:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	f383 8810 	msr	PRIMASK, r3
}
 800823c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 f9be 	bl	80095c0 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008244:	f3ef 8310 	mrs	r3, PRIMASK
 8008248:	623b      	str	r3, [r7, #32]
    return(posture);
 800824a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800824c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800824e:	b672      	cpsid	i
    return(int_posture);
 8008250:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d905      	bls.n	8008272 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008270:	e002      	b.n	8008278 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	63da      	str	r2, [r3, #60]	; 0x3c
 8008278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f383 8810 	msr	PRIMASK, r3
}
 8008282:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 f89b 	bl	80093c0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800828a:	f3ef 8310 	mrs	r3, PRIMASK
 800828e:	617b      	str	r3, [r7, #20]
    return(posture);
 8008290:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008292:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008294:	b672      	cpsid	i
    return(int_posture);
 8008296:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800829a:	4b23      	ldr	r3, [pc, #140]	; (8008328 <_tx_mutex_priority_change+0x170>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d034      	beq.n	8008312 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d130      	bne.n	8008312 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d811      	bhi.n	80082e0 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d126      	bne.n	8008312 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 80082c4:	4a18      	ldr	r2, [pc, #96]	; (8008328 <_tx_mutex_priority_change+0x170>)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 80082ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d21f      	bcs.n	8008312 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	4916      	ldr	r1, [pc, #88]	; (8008330 <_tx_mutex_priority_change+0x178>)
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80082de:	e018      	b.n	8008312 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d212      	bcs.n	8008312 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d80c      	bhi.n	8008312 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80082f8:	4a0b      	ldr	r2, [pc, #44]	; (8008328 <_tx_mutex_priority_change+0x170>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 80082fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d205      	bcs.n	8008312 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	4909      	ldr	r1, [pc, #36]	; (8008330 <_tx_mutex_priority_change+0x178>)
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008314:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f383 8810 	msr	PRIMASK, r3
}
 800831c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800831e:	bf00      	nop
 8008320:	3740      	adds	r7, #64	; 0x40
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	240046f0 	.word	0x240046f0
 800832c:	24004784 	.word	0x24004784
 8008330:	24004704 	.word	0x24004704

08008334 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b0a6      	sub	sp, #152	; 0x98
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800833c:	2320      	movs	r3, #32
 800833e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008342:	f3ef 8310 	mrs	r3, PRIMASK
 8008346:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8008348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800834a:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800834c:	b672      	cpsid	i
    return(int_posture);
 800834e:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8008350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 81ff 	beq.w	800875c <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8008364:	4ba3      	ldr	r3, [pc, #652]	; (80085f4 <_tx_mutex_put+0x2c0>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008370:	429a      	cmp	r2, r3
 8008372:	d00d      	beq.n	8008390 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8008374:	4ba0      	ldr	r3, [pc, #640]	; (80085f8 <_tx_mutex_put+0x2c4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d109      	bne.n	8008390 <_tx_mutex_put+0x5c>
 800837c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008380:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008384:	f383 8810 	msr	PRIMASK, r3
}
 8008388:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800838a:	231e      	movs	r3, #30
 800838c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8008390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008394:	2b20      	cmp	r3, #32
 8008396:	f040 81eb 	bne.w	8008770 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	1e5a      	subs	r2, r3, #1
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <_tx_mutex_put+0x8e>
 80083ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083b0:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b4:	f383 8810 	msr	PRIMASK, r3
}
 80083b8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 80083ba:	2300      	movs	r3, #0
 80083bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083c0:	e1d6      	b.n	8008770 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 80083c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <_tx_mutex_put+0xaa>
 80083c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d0:	f383 8810 	msr	PRIMASK, r3
}
 80083d4:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 80083d6:	2300      	movs	r3, #0
 80083d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083dc:	e1c8      	b.n	8008770 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 80083de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083e4:	1e5a      	subs	r2, r3, #1
 80083e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 80083ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d104      	bne.n	8008400 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 80083f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80083fe:	e019      	b.n	8008434 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800840e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008412:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008414:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8008416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008418:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800841c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800841e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	429a      	cmp	r2, r3
 8008428:	d104      	bne.n	8008434 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800842a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800842c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008430:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d110      	bne.n	800845e <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10c      	bne.n	800845e <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	60da      	str	r2, [r3, #12]
 800844a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800844e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008452:	f383 8810 	msr	PRIMASK, r3
}
 8008456:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8008458:	2300      	movs	r3, #0
 800845a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800845e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008462:	2b20      	cmp	r3, #32
 8008464:	f040 8184 	bne.w	8008770 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8008468:	2300      	movs	r3, #0
 800846a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800846e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d155      	bne.n	800852c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008480:	4b5d      	ldr	r3, [pc, #372]	; (80085f8 <_tx_mutex_put+0x2c4>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	4a5c      	ldr	r2, [pc, #368]	; (80085f8 <_tx_mutex_put+0x2c4>)
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800848e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008492:	f383 8810 	msr	PRIMASK, r3
}
 8008496:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008498:	2320      	movs	r3, #32
 800849a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800849e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 80084a8:	e01f      	b.n	80084ea <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 80084aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d10b      	bne.n	80084cc <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 80084b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084be:	429a      	cmp	r2, r3
 80084c0:	d904      	bls.n	80084cc <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 80084c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 80084cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 80084d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d102      	bne.n	80084ea <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 80084ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1db      	bne.n	80084aa <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80084f2:	f3ef 8310 	mrs	r3, PRIMASK
 80084f6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80084f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80084fc:	b672      	cpsid	i
    return(int_posture);
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008500:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8008504:	4b3c      	ldr	r3, [pc, #240]	; (80085f8 <_tx_mutex_put+0x2c4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3b01      	subs	r3, #1
 800850a:	4a3b      	ldr	r2, [pc, #236]	; (80085f8 <_tx_mutex_put+0x2c4>)
 800850c:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800850e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008510:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008514:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8008518:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800851c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008520:	429a      	cmp	r2, r3
 8008522:	d203      	bcs.n	800852c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8008524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d920      	bls.n	8008576 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d11c      	bne.n	8008576 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800853c:	4b2e      	ldr	r3, [pc, #184]	; (80085f8 <_tx_mutex_put+0x2c4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3301      	adds	r3, #1
 8008542:	4a2d      	ldr	r2, [pc, #180]	; (80085f8 <_tx_mutex_put+0x2c4>)
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800854a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	f383 8810 	msr	PRIMASK, r3
}
 8008552:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff fd7d 	bl	8008054 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800855a:	f3ef 8310 	mrs	r3, PRIMASK
 800855e:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8008562:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8008564:	b672      	cpsid	i
    return(int_posture);
 8008566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8008568:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800856c:	4b22      	ldr	r3, [pc, #136]	; (80085f8 <_tx_mutex_put+0x2c4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3b01      	subs	r3, #1
 8008572:	4a21      	ldr	r2, [pc, #132]	; (80085f8 <_tx_mutex_put+0x2c4>)
 8008574:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d13e      	bne.n	80085fc <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800857e:	4b1e      	ldr	r3, [pc, #120]	; (80085f8 <_tx_mutex_put+0x2c4>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	4a1c      	ldr	r2, [pc, #112]	; (80085f8 <_tx_mutex_put+0x2c4>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800858c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	f383 8810 	msr	PRIMASK, r3
}
 8008594:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d006      	beq.n	80085b8 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fe00 	bl	80081b8 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085b8:	f3ef 8310 	mrs	r3, PRIMASK
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80085c0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80085c2:	b672      	cpsid	i
    return(int_posture);
 80085c4:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 80085c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <_tx_mutex_put+0x2c4>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	4a09      	ldr	r2, [pc, #36]	; (80085f8 <_tx_mutex_put+0x2c4>)
 80085d2:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085de:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	f383 8810 	msr	PRIMASK, r3
}
 80085e6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 80085e8:	f000 feb0 	bl	800934c <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 80085ec:	2300      	movs	r3, #0
 80085ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085f2:	e0bd      	b.n	8008770 <_tx_mutex_put+0x43c>
 80085f4:	240046ec 	.word	0x240046ec
 80085f8:	24004784 	.word	0x24004784
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d10a      	bne.n	8008620 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8008612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8008620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008626:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8008628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800862e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	631a      	str	r2, [r3, #48]	; 0x30
 8008642:	e016      	b.n	8008672 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8008644:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800864a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800864e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008654:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8008656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800865e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008668:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008670:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8008672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008678:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008686:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	1e5a      	subs	r2, r3, #1
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8008698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d103      	bne.n	80086a6 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	619a      	str	r2, [r3, #24]
 80086a4:	e00e      	b.n	80086c4 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80086a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086aa:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086b0:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80086b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b6:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 80086b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80086bc:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 80086be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086c2:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80086c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086c6:	2200      	movs	r2, #0
 80086c8:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80086ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80086d2:	4b2a      	ldr	r3, [pc, #168]	; (800877c <_tx_mutex_put+0x448>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3301      	adds	r3, #1
 80086d8:	4a28      	ldr	r2, [pc, #160]	; (800877c <_tx_mutex_put+0x448>)
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	f383 8810 	msr	PRIMASK, r3
}
 80086e8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d12d      	bne.n	800874e <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d01c      	beq.n	8008734 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fcaa 	bl	8008054 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008700:	f3ef 8310 	mrs	r3, PRIMASK
 8008704:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008706:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008708:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800870a:	b672      	cpsid	i
    return(int_posture);
 800870c:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800870e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8008718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800871e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	629a      	str	r2, [r3, #40]	; 0x28
 8008726:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800872a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f383 8810 	msr	PRIMASK, r3
}
 8008732:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8008734:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800873e:	429a      	cmp	r2, r3
 8008740:	d005      	beq.n	800874e <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8008742:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008746:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800874a:	f7ff fd35 	bl	80081b8 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800874e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008750:	f000 fe36 	bl	80093c0 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8008754:	2300      	movs	r3, #0
 8008756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800875a:	e009      	b.n	8008770 <_tx_mutex_put+0x43c>
 800875c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008760:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f383 8810 	msr	PRIMASK, r3
}
 8008768:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800876a:	231e      	movs	r3, #30
 800876c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8008770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8008774:	4618      	mov	r0, r3
 8008776:	3798      	adds	r7, #152	; 0x98
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	24004784 	.word	0x24004784

08008780 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08e      	sub	sp, #56	; 0x38
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800878a:	f3ef 8310 	mrs	r3, PRIMASK
 800878e:	623b      	str	r3, [r7, #32]
    return(posture);
 8008790:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008792:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008794:	b672      	cpsid	i
    return(int_posture);
 8008796:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8008798:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800879e:	4a33      	ldr	r2, [pc, #204]	; (800886c <_tx_semaphore_cleanup+0xec>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d158      	bne.n	8008856 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d152      	bne.n	8008856 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d04c      	beq.n	8008856 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a2b      	ldr	r2, [pc, #172]	; (8008870 <_tx_semaphore_cleanup+0xf0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d147      	bne.n	8008856 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d043      	beq.n	8008856 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	1e5a      	subs	r2, r3, #1
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80087e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	2200      	movs	r2, #0
 80087ee:	60da      	str	r2, [r3, #12]
 80087f0:	e013      	b.n	800881a <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008802:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008808:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d102      	bne.n	800881a <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8008814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008818:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881e:	2b06      	cmp	r3, #6
 8008820:	d119      	bne.n	8008856 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	220d      	movs	r2, #13
 8008826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <_tx_semaphore_cleanup+0xf4>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3301      	adds	r3, #1
 8008830:	4a10      	ldr	r2, [pc, #64]	; (8008874 <_tx_semaphore_cleanup+0xf4>)
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008836:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	f383 8810 	msr	PRIMASK, r3
}
 800883e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fdbd 	bl	80093c0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008846:	f3ef 8310 	mrs	r3, PRIMASK
 800884a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800884c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800884e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008850:	b672      	cpsid	i
    return(int_posture);
 8008852:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008854:	637b      	str	r3, [r7, #52]	; 0x34
 8008856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008858:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f383 8810 	msr	PRIMASK, r3
}
 8008860:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008862:	bf00      	nop
 8008864:	3738      	adds	r7, #56	; 0x38
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	08008781 	.word	0x08008781
 8008870:	53454d41 	.word	0x53454d41
 8008874:	24004784 	.word	0x24004784

08008878 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08a      	sub	sp, #40	; 0x28
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8008884:	221c      	movs	r2, #28
 8008886:	2100      	movs	r1, #0
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f008 f80f 	bl	80108ac <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800889a:	f3ef 8310 	mrs	r3, PRIMASK
 800889e:	61bb      	str	r3, [r7, #24]
    return(posture);
 80088a0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80088a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80088a4:	b672      	cpsid	i
    return(int_posture);
 80088a6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4a18      	ldr	r2, [pc, #96]	; (8008910 <_tx_semaphore_create+0x98>)
 80088ae:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80088b0:	4b18      	ldr	r3, [pc, #96]	; (8008914 <_tx_semaphore_create+0x9c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80088b8:	4a17      	ldr	r2, [pc, #92]	; (8008918 <_tx_semaphore_create+0xa0>)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	619a      	str	r2, [r3, #24]
 80088ca:	e011      	b.n	80088f0 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80088cc:	4b12      	ldr	r3, [pc, #72]	; (8008918 <_tx_semaphore_create+0xa0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a3a      	ldr	r2, [r7, #32]
 80088ee:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80088f0:	4b08      	ldr	r3, [pc, #32]	; (8008914 <_tx_semaphore_create+0x9c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	4a07      	ldr	r2, [pc, #28]	; (8008914 <_tx_semaphore_create+0x9c>)
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f383 8810 	msr	PRIMASK, r3
}
 8008904:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3728      	adds	r7, #40	; 0x28
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	53454d41 	.word	0x53454d41
 8008914:	240046b8 	.word	0x240046b8
 8008918:	240046b4 	.word	0x240046b4

0800891c <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b092      	sub	sp, #72	; 0x48
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008924:	f3ef 8310 	mrs	r3, PRIMASK
 8008928:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800892a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800892e:	b672      	cpsid	i
    return(int_posture);
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800893a:	4b3d      	ldr	r3, [pc, #244]	; (8008a30 <_tx_semaphore_delete+0x114>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3b01      	subs	r3, #1
 8008940:	4a3b      	ldr	r2, [pc, #236]	; (8008a30 <_tx_semaphore_delete+0x114>)
 8008942:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8008944:	4b3a      	ldr	r3, [pc, #232]	; (8008a30 <_tx_semaphore_delete+0x114>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d103      	bne.n	8008954 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800894c:	4b39      	ldr	r3, [pc, #228]	; (8008a34 <_tx_semaphore_delete+0x118>)
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	e013      	b.n	800897c <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008964:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8008966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800896a:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800896c:	4b31      	ldr	r3, [pc, #196]	; (8008a34 <_tx_semaphore_delete+0x118>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	429a      	cmp	r2, r3
 8008974:	d102      	bne.n	800897c <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8008976:	4a2f      	ldr	r2, [pc, #188]	; (8008a34 <_tx_semaphore_delete+0x118>)
 8008978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800897c:	4b2e      	ldr	r3, [pc, #184]	; (8008a38 <_tx_semaphore_delete+0x11c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3301      	adds	r3, #1
 8008982:	4a2d      	ldr	r2, [pc, #180]	; (8008a38 <_tx_semaphore_delete+0x11c>)
 8008984:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	611a      	str	r2, [r3, #16]
 800899e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	f383 8810 	msr	PRIMASK, r3
}
 80089a8:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80089aa:	e024      	b.n	80089f6 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80089ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ae:	3b01      	subs	r3, #1
 80089b0:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089b2:	f3ef 8310 	mrs	r3, PRIMASK
 80089b6:	61fb      	str	r3, [r7, #28]
    return(posture);
 80089b8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80089ba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80089bc:	b672      	cpsid	i
    return(int_posture);
 80089be:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80089c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c4:	2200      	movs	r2, #0
 80089c6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80089c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ca:	2201      	movs	r2, #1
 80089cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80089d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d4:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80089d6:	4b18      	ldr	r3, [pc, #96]	; (8008a38 <_tx_semaphore_delete+0x11c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3301      	adds	r3, #1
 80089dc:	4a16      	ldr	r2, [pc, #88]	; (8008a38 <_tx_semaphore_delete+0x11c>)
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	f383 8810 	msr	PRIMASK, r3
}
 80089ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80089ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80089ee:	f000 fce7 	bl	80093c0 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80089f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1d7      	bne.n	80089ac <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008a00:	613b      	str	r3, [r7, #16]
    return(posture);
 8008a02:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8008a04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a06:	b672      	cpsid	i
    return(int_posture);
 8008a08:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <_tx_semaphore_delete+0x11c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	4a09      	ldr	r2, [pc, #36]	; (8008a38 <_tx_semaphore_delete+0x11c>)
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a18:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f383 8810 	msr	PRIMASK, r3
}
 8008a20:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8008a22:	f000 fc93 	bl	800934c <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3748      	adds	r7, #72	; 0x48
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	240046b8 	.word	0x240046b8
 8008a34:	240046b4 	.word	0x240046b4
 8008a38:	24004784 	.word	0x24004784

08008a3c <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08e      	sub	sp, #56	; 0x38
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8008a46:	2300      	movs	r3, #0
 8008a48:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a4e:	623b      	str	r3, [r7, #32]
    return(posture);
 8008a50:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008a52:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a54:	b672      	cpsid	i
    return(int_posture);
 8008a56:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8008a58:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	1e5a      	subs	r2, r3, #1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	609a      	str	r2, [r3, #8]
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	f383 8810 	msr	PRIMASK, r3
}
 8008a76:	e068      	b.n	8008b4a <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d05d      	beq.n	8008b3a <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8008a7e:	4b35      	ldr	r3, [pc, #212]	; (8008b54 <_tx_semaphore_get+0x118>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <_tx_semaphore_get+0x5c>
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f383 8810 	msr	PRIMASK, r3
}
 8008a90:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8008a92:	230d      	movs	r3, #13
 8008a94:	637b      	str	r3, [r7, #52]	; 0x34
 8008a96:	e058      	b.n	8008b4a <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008a98:	4b2f      	ldr	r3, [pc, #188]	; (8008b58 <_tx_semaphore_get+0x11c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	4a2e      	ldr	r2, [pc, #184]	; (8008b5c <_tx_semaphore_get+0x120>)
 8008aa2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d109      	bne.n	8008ad4 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac4:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aca:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad0:	675a      	str	r2, [r3, #116]	; 0x74
 8008ad2:	e011      	b.n	8008af8 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ade:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aea:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af0:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af6:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	2206      	movs	r2, #6
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <_tx_semaphore_get+0x118>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	4a0e      	ldr	r2, [pc, #56]	; (8008b54 <_tx_semaphore_get+0x118>)
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f383 8810 	msr	PRIMASK, r3
}
 8008b28:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b2c:	f000 fd48 	bl	80095c0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b36:	637b      	str	r3, [r7, #52]	; 0x34
 8008b38:	e007      	b.n	8008b4a <_tx_semaphore_get+0x10e>
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f383 8810 	msr	PRIMASK, r3
}
 8008b44:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8008b46:	230d      	movs	r3, #13
 8008b48:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3738      	adds	r7, #56	; 0x38
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	24004784 	.word	0x24004784
 8008b58:	240046ec 	.word	0x240046ec
 8008b5c:	08008781 	.word	0x08008781

08008b60 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08c      	sub	sp, #48	; 0x30
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b68:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008b6e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008b70:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b72:	b672      	cpsid	i
    return(int_posture);
 8008b74:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8008b76:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	609a      	str	r2, [r3, #8]
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f383 8810 	msr	PRIMASK, r3
}
 8008b98:	e033      	b.n	8008c02 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d103      	bne.n	8008bb4 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	60da      	str	r2, [r3, #12]
 8008bb2:	e00e      	b.n	8008bd2 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb8:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a3a      	ldr	r2, [r7, #32]
 8008bbe:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc4:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	6a3a      	ldr	r2, [r7, #32]
 8008bd0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bd6:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	2200      	movs	r2, #0
 8008bdc:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	2200      	movs	r2, #0
 8008be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8008be6:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <_tx_semaphore_put+0xac>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3301      	adds	r3, #1
 8008bec:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <_tx_semaphore_put+0xac>)
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f383 8810 	msr	PRIMASK, r3
}
 8008bfa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8008bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bfe:	f000 fbdf 	bl	80093c0 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3730      	adds	r7, #48	; 0x30
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	24004784 	.word	0x24004784

08008c10 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b092      	sub	sp, #72	; 0x48
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8008c1e:	2300      	movs	r3, #0
 8008c20:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8008c22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c24:	21ef      	movs	r1, #239	; 0xef
 8008c26:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c28:	f007 fe40 	bl	80108ac <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8008c2c:	22b0      	movs	r2, #176	; 0xb0
 8008c2e:	2100      	movs	r1, #0
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f007 fe3b 	bl	80108ac <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c4c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c52:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c58:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c66:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c6c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8008c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8008c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c80:	4413      	add	r3, r2
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c88:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8008c8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d007      	beq.n	8008ca2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008ca0:	e006      	b.n	8008cb0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ca6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4a48      	ldr	r2, [pc, #288]	; (8008ddc <_tx_thread_create+0x1cc>)
 8008cba:	655a      	str	r2, [r3, #84]	; 0x54
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8008cc2:	4947      	ldr	r1, [pc, #284]	; (8008de0 <_tx_thread_create+0x1d0>)
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7f7 fbc3 	bl	8000450 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008cca:	f3ef 8310 	mrs	r3, PRIMASK
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8008cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008cd4:	b672      	cpsid	i
    return(int_posture);
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8008cd8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4a41      	ldr	r2, [pc, #260]	; (8008de4 <_tx_thread_create+0x1d4>)
 8008cde:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8008ce0:	4b41      	ldr	r3, [pc, #260]	; (8008de8 <_tx_thread_create+0x1d8>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10b      	bne.n	8008d00 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8008ce8:	4a40      	ldr	r2, [pc, #256]	; (8008dec <_tx_thread_create+0x1dc>)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008cfe:	e016      	b.n	8008d2e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8008d00:	4b3a      	ldr	r3, [pc, #232]	; (8008dec <_tx_thread_create+0x1dc>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8008d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d0c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8008d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8008d2e:	4b2e      	ldr	r3, [pc, #184]	; (8008de8 <_tx_thread_create+0x1d8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3301      	adds	r3, #1
 8008d34:	4a2c      	ldr	r2, [pc, #176]	; (8008de8 <_tx_thread_create+0x1d8>)
 8008d36:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8008d38:	4b2d      	ldr	r3, [pc, #180]	; (8008df0 <_tx_thread_create+0x1e0>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	4a2c      	ldr	r2, [pc, #176]	; (8008df0 <_tx_thread_create+0x1e0>)
 8008d40:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8008d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d129      	bne.n	8008d9c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008d48:	f3ef 8305 	mrs	r3, IPSR
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8008d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8008d50:	4b28      	ldr	r3, [pc, #160]	; (8008df4 <_tx_thread_create+0x1e4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008d5a:	d30d      	bcc.n	8008d78 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8008d5c:	4b26      	ldr	r3, [pc, #152]	; (8008df8 <_tx_thread_create+0x1e8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8008d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d009      	beq.n	8008d7c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8008d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8008d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d74:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d76:	e001      	b.n	8008d7c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	f383 8810 	msr	PRIMASK, r3
}
 8008d86:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 fb19 	bl	80093c0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8008d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01e      	beq.n	8008dd2 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8008d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d98:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d9a:	e01a      	b.n	8008dd2 <_tx_thread_create+0x1c2>
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f383 8810 	msr	PRIMASK, r3
}
 8008da6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008da8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dac:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008dae:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008db0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008db2:	b672      	cpsid	i
    return(int_posture);
 8008db4:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8008db6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8008db8:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <_tx_thread_create+0x1e0>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	4a0c      	ldr	r2, [pc, #48]	; (8008df0 <_tx_thread_create+0x1e0>)
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	f383 8810 	msr	PRIMASK, r3
}
 8008dcc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008dce:	f000 fabd 	bl	800934c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3748      	adds	r7, #72	; 0x48
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	08009b95 	.word	0x08009b95
 8008de0:	080090d5 	.word	0x080090d5
 8008de4:	54485244 	.word	0x54485244
 8008de8:	240046f8 	.word	0x240046f8
 8008dec:	240046f4 	.word	0x240046f4
 8008df0:	24004784 	.word	0x24004784
 8008df4:	24000010 	.word	0x24000010
 8008df8:	240046f0 	.word	0x240046f0

08008dfc <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b08b      	sub	sp, #44	; 0x2c
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008e04:	2300      	movs	r3, #0
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e08:	f3ef 8310 	mrs	r3, PRIMASK
 8008e0c:	617b      	str	r3, [r7, #20]
    return(posture);
 8008e0e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008e10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e12:	b672      	cpsid	i
    return(int_posture);
 8008e14:	693b      	ldr	r3, [r7, #16]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 8008e16:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d00b      	beq.n	8008e38 <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d007      	beq.n	8008e38 <_tx_thread_delete+0x3c>
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f383 8810 	msr	PRIMASK, r3
}
 8008e32:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 8008e34:	2311      	movs	r3, #17
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d12d      	bne.n	8008e9a <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8008e44:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <_tx_thread_delete+0xac>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	4a17      	ldr	r2, [pc, #92]	; (8008ea8 <_tx_thread_delete+0xac>)
 8008e4c:	6013      	str	r3, [r2, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8008e4e:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <_tx_thread_delete+0xac>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d103      	bne.n	8008e5e <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 8008e56:	4b15      	ldr	r3, [pc, #84]	; (8008eac <_tx_thread_delete+0xb0>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e017      	b.n	8008e8e <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e64:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e6c:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8008e7e:	4b0b      	ldr	r3, [pc, #44]	; (8008eac <_tx_thread_delete+0xb0>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d102      	bne.n	8008e8e <_tx_thread_delete+0x92>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8008e88:	4a08      	ldr	r2, [pc, #32]	; (8008eac <_tx_thread_delete+0xb0>)
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f383 8810 	msr	PRIMASK, r3
}
 8008e98:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	372c      	adds	r7, #44	; 0x2c
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	240046f8 	.word	0x240046f8
 8008eac:	240046f4 	.word	0x240046f4

08008eb0 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eba:	60bb      	str	r3, [r7, #8]
    return(posture);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8008ebe:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ec0:	b672      	cpsid	i
    return(int_posture);
 8008ec2:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8008ec4:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008ec6:	4b08      	ldr	r3, [pc, #32]	; (8008ee8 <_tx_thread_identify+0x38>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	613b      	str	r3, [r7, #16]
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f383 8810 	msr	PRIMASK, r3
}
 8008ed6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8008ed8:	693b      	ldr	r3, [r7, #16]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	240046ec 	.word	0x240046ec

08008eec <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b089      	sub	sp, #36	; 0x24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008efa:	f3ef 8310 	mrs	r3, PRIMASK
 8008efe:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008f00:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008f02:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f04:	b672      	cpsid	i
    return(int_posture);
 8008f06:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8008f08:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <_tx_thread_info_get+0x2c>
    {

        *name =  thread_ptr -> tx_thread_name;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <_tx_thread_info_get+0x3a>
    {

        *state =  thread_ptr -> tx_thread_state;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <_tx_thread_info_get+0x48>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d004      	beq.n	8008f44 <_tx_thread_info_get+0x58>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <_tx_thread_info_get+0x68>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <_tx_thread_info_get+0x76>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 8008f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <_tx_thread_info_get+0x86>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <_tx_thread_info_get+0x94>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f383 8810 	msr	PRIMASK, r3
}
 8008f8a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3724      	adds	r7, #36	; 0x24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8008fa0:	4b12      	ldr	r3, [pc, #72]	; (8008fec <_tx_thread_initialize+0x50>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8008fa6:	4b12      	ldr	r3, [pc, #72]	; (8008ff0 <_tx_thread_initialize+0x54>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <_tx_thread_initialize+0x58>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008fb2:	4b11      	ldr	r3, [pc, #68]	; (8008ff8 <_tx_thread_initialize+0x5c>)
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008fb8:	2280      	movs	r2, #128	; 0x80
 8008fba:	2100      	movs	r1, #0
 8008fbc:	480f      	ldr	r0, [pc, #60]	; (8008ffc <_tx_thread_initialize+0x60>)
 8008fbe:	f007 fc75 	bl	80108ac <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8008fc2:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <_tx_thread_initialize+0x64>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8008fc8:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <_tx_thread_initialize+0x68>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8008fce:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <_tx_thread_initialize+0x6c>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	; (800900c <_tx_thread_initialize+0x70>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8008fda:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <_tx_thread_initialize+0x74>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8008fe2:	4a0b      	ldr	r2, [pc, #44]	; (8009010 <_tx_thread_initialize+0x74>)
 8008fe4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8008fe6:	bf00      	nop
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	240046ec 	.word	0x240046ec
 8008ff0:	240046f0 	.word	0x240046f0
 8008ff4:	240046fc 	.word	0x240046fc
 8008ff8:	24004700 	.word	0x24004700
 8008ffc:	24004704 	.word	0x24004704
 8009000:	240046f4 	.word	0x240046f4
 8009004:	240046f8 	.word	0x240046f8
 8009008:	24004784 	.word	0x24004784
 800900c:	24004788 	.word	0x24004788
 8009010:	2400478c 	.word	0x2400478c

08009014 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08c      	sub	sp, #48	; 0x30
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800901c:	2300      	movs	r3, #0
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009020:	f3ef 8310 	mrs	r3, PRIMASK
 8009024:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009026:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009028:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800902a:	b672      	cpsid	i
    return(int_posture);
 800902c:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800902e:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009034:	2b03      	cmp	r3, #3
 8009036:	d12f      	bne.n	8009098 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009038:	f3ef 8305 	mrs	r3, IPSR
 800903c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800903e:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8009040:	4b21      	ldr	r3, [pc, #132]	; (80090c8 <_tx_thread_resume+0xb4>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4313      	orrs	r3, r2
 8009046:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800904a:	d30d      	bcc.n	8009068 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800904c:	4b1f      	ldr	r3, [pc, #124]	; (80090cc <_tx_thread_resume+0xb8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	2b00      	cmp	r3, #0
 8009056:	d009      	beq.n	800906c <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905c:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	63da      	str	r2, [r3, #60]	; 0x3c
 8009066:	e001      	b.n	800906c <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8009068:	2300      	movs	r3, #0
 800906a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800906c:	4b18      	ldr	r3, [pc, #96]	; (80090d0 <_tx_thread_resume+0xbc>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3301      	adds	r3, #1
 8009072:	4a17      	ldr	r2, [pc, #92]	; (80090d0 <_tx_thread_resume+0xbc>)
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f383 8810 	msr	PRIMASK, r3
}
 8009080:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f99c 	bl	80093c0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009092:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8009094:	2300      	movs	r3, #0
 8009096:	e012      	b.n	80090be <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909c:	2b01      	cmp	r3, #1
 800909e:	d105      	bne.n	80090ac <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 80090a6:	2319      	movs	r3, #25
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090aa:	e001      	b.n	80090b0 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 80090ac:	2312      	movs	r3, #18
 80090ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f383 8810 	msr	PRIMASK, r3
}
 80090ba:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 80090bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3730      	adds	r7, #48	; 0x30
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	24000010 	.word	0x24000010
 80090cc:	240046f0 	.word	0x240046f0
 80090d0:	24004784 	.word	0x24004784

080090d4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80090da:	4b21      	ldr	r3, [pc, #132]	; (8009160 <_tx_thread_shell_entry+0x8c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80090ec:	4b1d      	ldr	r3, [pc, #116]	; (8009164 <_tx_thread_shell_entry+0x90>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80090f4:	4b1b      	ldr	r3, [pc, #108]	; (8009164 <_tx_thread_shell_entry+0x90>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	69f8      	ldr	r0, [r7, #28]
 80090fa:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80090fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009100:	607b      	str	r3, [r7, #4]
    return(posture);
 8009102:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009104:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009106:	b672      	cpsid	i
    return(int_posture);
 8009108:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800910a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	2201      	movs	r2, #1
 8009110:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	2201      	movs	r2, #1
 8009116:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	2200      	movs	r2, #0
 800911c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800911e:	4b12      	ldr	r3, [pc, #72]	; (8009168 <_tx_thread_shell_entry+0x94>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3301      	adds	r3, #1
 8009124:	4a10      	ldr	r2, [pc, #64]	; (8009168 <_tx_thread_shell_entry+0x94>)
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f383 8810 	msr	PRIMASK, r3
}
 8009132:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8009134:	f3ef 8314 	mrs	r3, CONTROL
 8009138:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800913a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f023 0304 	bic.w	r3, r3, #4
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f383 8814 	msr	CONTROL, r3
}
 8009150:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8009152:	69f8      	ldr	r0, [r7, #28]
 8009154:	f000 fa34 	bl	80095c0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009158:	bf00      	nop
 800915a:	3720      	adds	r7, #32
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	240046ec 	.word	0x240046ec
 8009164:	24004788 	.word	0x24004788
 8009168:	24004784 	.word	0x24004784

0800916c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08e      	sub	sp, #56	; 0x38
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009174:	f3ef 8310 	mrs	r3, PRIMASK
 8009178:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800917e:	b672      	cpsid	i
    return(int_posture);
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8009182:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009184:	4b35      	ldr	r3, [pc, #212]	; (800925c <_tx_thread_sleep+0xf0>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d108      	bne.n	80091a2 <_tx_thread_sleep+0x36>
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	f383 8810 	msr	PRIMASK, r3
}
 800919a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800919c:	2313      	movs	r3, #19
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
 80091a0:	e056      	b.n	8009250 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80091a2:	f3ef 8305 	mrs	r3, IPSR
 80091a6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80091a8:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80091aa:	4b2d      	ldr	r3, [pc, #180]	; (8009260 <_tx_thread_sleep+0xf4>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d008      	beq.n	80091c6 <_tx_thread_sleep+0x5a>
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	f383 8810 	msr	PRIMASK, r3
}
 80091be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80091c0:	2313      	movs	r3, #19
 80091c2:	637b      	str	r3, [r7, #52]	; 0x34
 80091c4:	e044      	b.n	8009250 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80091c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c8:	4a26      	ldr	r2, [pc, #152]	; (8009264 <_tx_thread_sleep+0xf8>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d108      	bne.n	80091e0 <_tx_thread_sleep+0x74>
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f383 8810 	msr	PRIMASK, r3
}
 80091d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80091da:	2313      	movs	r3, #19
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
 80091de:	e037      	b.n	8009250 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d108      	bne.n	80091f8 <_tx_thread_sleep+0x8c>
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f383 8810 	msr	PRIMASK, r3
}
 80091f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80091f2:	2300      	movs	r3, #0
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
 80091f6:	e02b      	b.n	8009250 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80091f8:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <_tx_thread_sleep+0xfc>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d008      	beq.n	8009212 <_tx_thread_sleep+0xa6>
 8009200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009202:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f383 8810 	msr	PRIMASK, r3
}
 800920a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800920c:	2313      	movs	r3, #19
 800920e:	637b      	str	r3, [r7, #52]	; 0x34
 8009210:	e01e      	b.n	8009250 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	2204      	movs	r2, #4
 8009216:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	2201      	movs	r2, #1
 800921c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	2200      	movs	r2, #0
 8009222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8009226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800922c:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <_tx_thread_sleep+0xfc>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	4a0d      	ldr	r2, [pc, #52]	; (8009268 <_tx_thread_sleep+0xfc>)
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f383 8810 	msr	PRIMASK, r3
}
 8009240:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009244:	f000 f9bc 	bl	80095c0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800924e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009252:	4618      	mov	r0, r3
 8009254:	3738      	adds	r7, #56	; 0x38
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	240046ec 	.word	0x240046ec
 8009260:	24000010 	.word	0x24000010
 8009264:	24004834 	.word	0x24004834
 8009268:	24004784 	.word	0x24004784

0800926c <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	; 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009274:	f3ef 8310 	mrs	r3, PRIMASK
 8009278:	61bb      	str	r3, [r7, #24]
    return(posture);
 800927a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800927c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800927e:	b672      	cpsid	i
    return(int_posture);
 8009280:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009282:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009284:	4b2e      	ldr	r3, [pc, #184]	; (8009340 <_tx_thread_suspend+0xd4>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	2b00      	cmp	r3, #0
 8009290:	d130      	bne.n	80092f4 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8009292:	2300      	movs	r3, #0
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009296:	f3ef 8305 	mrs	r3, IPSR
 800929a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800929c:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800929e:	4b29      	ldr	r3, [pc, #164]	; (8009344 <_tx_thread_suspend+0xd8>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d105      	bne.n	80092bc <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 80092b0:	4b25      	ldr	r3, [pc, #148]	; (8009348 <_tx_thread_suspend+0xdc>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 80092b8:	2314      	movs	r3, #20
 80092ba:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d132      	bne.n	8009328 <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2203      	movs	r2, #3
 80092c6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80092d4:	4b1c      	ldr	r3, [pc, #112]	; (8009348 <_tx_thread_suspend+0xdc>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3301      	adds	r3, #1
 80092da:	4a1b      	ldr	r2, [pc, #108]	; (8009348 <_tx_thread_suspend+0xdc>)
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f383 8810 	msr	PRIMASK, r3
}
 80092e8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f968 	bl	80095c0 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 80092f0:	2300      	movs	r3, #0
 80092f2:	e020      	b.n	8009336 <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d102      	bne.n	8009302 <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 80092fc:	2314      	movs	r3, #20
 80092fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009300:	e012      	b.n	8009328 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009306:	2b01      	cmp	r3, #1
 8009308:	d102      	bne.n	8009310 <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 800930a:	2314      	movs	r3, #20
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
 800930e:	e00b      	b.n	8009328 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	2b03      	cmp	r3, #3
 8009316:	d102      	bne.n	800931e <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8009318:	2300      	movs	r3, #0
 800931a:	627b      	str	r3, [r7, #36]	; 0x24
 800931c:	e004      	b.n	8009328 <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8009324:	2300      	movs	r3, #0
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f383 8810 	msr	PRIMASK, r3
}
 8009332:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8009336:	4618      	mov	r0, r3
 8009338:	3728      	adds	r7, #40	; 0x28
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	240046ec 	.word	0x240046ec
 8009344:	24000010 	.word	0x24000010
 8009348:	24004784 	.word	0x24004784

0800934c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800934c:	b480      	push	{r7}
 800934e:	b089      	sub	sp, #36	; 0x24
 8009350:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009352:	4b17      	ldr	r3, [pc, #92]	; (80093b0 <_tx_thread_system_preempt_check+0x64>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d121      	bne.n	80093a2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800935e:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <_tx_thread_system_preempt_check+0x68>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8009364:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <_tx_thread_system_preempt_check+0x6c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	429a      	cmp	r2, r3
 8009370:	d017      	beq.n	80093a2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009372:	4b12      	ldr	r3, [pc, #72]	; (80093bc <_tx_thread_system_preempt_check+0x70>)
 8009374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009378:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800937a:	f3ef 8305 	mrs	r3, IPSR
 800937e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009380:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10c      	bne.n	80093a0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009386:	f3ef 8310 	mrs	r3, PRIMASK
 800938a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800938c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800938e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009390:	b662      	cpsie	i
}
 8009392:	bf00      	nop
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f383 8810 	msr	PRIMASK, r3
}
 800939e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80093a0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80093a2:	bf00      	nop
 80093a4:	3724      	adds	r7, #36	; 0x24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	24004784 	.word	0x24004784
 80093b4:	240046ec 	.word	0x240046ec
 80093b8:	240046f0 	.word	0x240046f0
 80093bc:	e000ed04 	.word	0xe000ed04

080093c0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b096      	sub	sp, #88	; 0x58
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093c8:	f3ef 8310 	mrs	r3, PRIMASK
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80093ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80093d0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80093d2:	b672      	cpsid	i
    return(int_posture);
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80093d6:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	334c      	adds	r3, #76	; 0x4c
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fd11 	bl	8009e0c <_tx_timer_system_deactivate>
 80093ea:	e002      	b.n	80093f2 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80093f2:	4b6c      	ldr	r3, [pc, #432]	; (80095a4 <_tx_thread_system_resume+0x1e4>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	4a6a      	ldr	r2, [pc, #424]	; (80095a4 <_tx_thread_system_resume+0x1e4>)
 80093fa:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	2b00      	cmp	r3, #0
 8009402:	f040 8083 	bne.w	800950c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 8097 	beq.w	800953e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009414:	2b00      	cmp	r3, #0
 8009416:	d172      	bne.n	80094fe <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009422:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8009424:	4a60      	ldr	r2, [pc, #384]	; (80095a8 <_tx_thread_system_resume+0x1e8>)
 8009426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800942c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800942e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009430:	2b00      	cmp	r3, #0
 8009432:	d154      	bne.n	80094de <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8009434:	495c      	ldr	r1, [pc, #368]	; (80095a8 <_tx_thread_system_resume+0x1e8>)
 8009436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800944a:	2201      	movs	r2, #1
 800944c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800944e:	fa02 f303 	lsl.w	r3, r2, r3
 8009452:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8009454:	4b55      	ldr	r3, [pc, #340]	; (80095ac <_tx_thread_system_resume+0x1ec>)
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800945a:	4313      	orrs	r3, r2
 800945c:	4a53      	ldr	r2, [pc, #332]	; (80095ac <_tx_thread_system_resume+0x1ec>)
 800945e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8009460:	4b53      	ldr	r3, [pc, #332]	; (80095b0 <_tx_thread_system_resume+0x1f0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009466:	429a      	cmp	r2, r3
 8009468:	d269      	bcs.n	800953e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800946a:	4a51      	ldr	r2, [pc, #324]	; (80095b0 <_tx_thread_system_resume+0x1f0>)
 800946c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800946e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8009470:	4b50      	ldr	r3, [pc, #320]	; (80095b4 <_tx_thread_system_resume+0x1f4>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8009476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009478:	2b00      	cmp	r3, #0
 800947a:	d103      	bne.n	8009484 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800947c:	4a4d      	ldr	r2, [pc, #308]	; (80095b4 <_tx_thread_system_resume+0x1f4>)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6013      	str	r3, [r2, #0]
 8009482:	e05c      	b.n	800953e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8009484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009488:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800948a:	429a      	cmp	r2, r3
 800948c:	d257      	bcs.n	800953e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800948e:	4a49      	ldr	r2, [pc, #292]	; (80095b4 <_tx_thread_system_resume+0x1f4>)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009496:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	f383 8810 	msr	PRIMASK, r3
}
 800949e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80094a0:	4b40      	ldr	r3, [pc, #256]	; (80095a4 <_tx_thread_system_resume+0x1e4>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80094a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d174      	bne.n	8009596 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80094ac:	4b42      	ldr	r3, [pc, #264]	; (80095b8 <_tx_thread_system_resume+0x1f8>)
 80094ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80094b4:	f3ef 8305 	mrs	r3, IPSR
 80094b8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80094ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10c      	bne.n	80094da <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094c0:	f3ef 8310 	mrs	r3, PRIMASK
 80094c4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80094c8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80094ca:	b662      	cpsie	i
}
 80094cc:	bf00      	nop
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	f383 8810 	msr	PRIMASK, r3
}
 80094d8:	bf00      	nop
}
 80094da:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80094dc:	e05b      	b.n	8009596 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80094de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e2:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80094e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80094ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094f4:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094fa:	621a      	str	r2, [r3, #32]
 80094fc:	e01f      	b.n	800953e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2203      	movs	r2, #3
 8009508:	631a      	str	r2, [r3, #48]	; 0x30
 800950a:	e018      	b.n	800953e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009510:	2b01      	cmp	r3, #1
 8009512:	d014      	beq.n	800953e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009518:	2b02      	cmp	r3, #2
 800951a:	d010      	beq.n	800953e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009520:	2b00      	cmp	r3, #0
 8009522:	d106      	bne.n	8009532 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	; 0x30
 8009530:	e005      	b.n	800953e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2203      	movs	r2, #3
 800953c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800953e:	4b1f      	ldr	r3, [pc, #124]	; (80095bc <_tx_thread_system_resume+0x1fc>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	63bb      	str	r3, [r7, #56]	; 0x38
 8009544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009546:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f383 8810 	msr	PRIMASK, r3
}
 800954e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009550:	4b18      	ldr	r3, [pc, #96]	; (80095b4 <_tx_thread_system_resume+0x1f4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009556:	429a      	cmp	r2, r3
 8009558:	d020      	beq.n	800959c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800955a:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <_tx_thread_system_resume+0x1e4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8009560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d11a      	bne.n	800959c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009566:	4b14      	ldr	r3, [pc, #80]	; (80095b8 <_tx_thread_system_resume+0x1f8>)
 8009568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800956c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800956e:	f3ef 8305 	mrs	r3, IPSR
 8009572:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009574:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10f      	bne.n	800959a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800957a:	f3ef 8310 	mrs	r3, PRIMASK
 800957e:	613b      	str	r3, [r7, #16]
    return(posture);
 8009580:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8009582:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009584:	b662      	cpsie	i
}
 8009586:	bf00      	nop
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f383 8810 	msr	PRIMASK, r3
}
 8009592:	bf00      	nop
}
 8009594:	e001      	b.n	800959a <_tx_thread_system_resume+0x1da>
                                return;
 8009596:	bf00      	nop
 8009598:	e000      	b.n	800959c <_tx_thread_system_resume+0x1dc>
 800959a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800959c:	3758      	adds	r7, #88	; 0x58
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	24004784 	.word	0x24004784
 80095a8:	24004704 	.word	0x24004704
 80095ac:	240046fc 	.word	0x240046fc
 80095b0:	24004700 	.word	0x24004700
 80095b4:	240046f0 	.word	0x240046f0
 80095b8:	e000ed04 	.word	0xe000ed04
 80095bc:	240046ec 	.word	0x240046ec

080095c0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b09e      	sub	sp, #120	; 0x78
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80095c8:	4b81      	ldr	r3, [pc, #516]	; (80097d0 <_tx_thread_system_suspend+0x210>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095ce:	f3ef 8310 	mrs	r3, PRIMASK
 80095d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80095d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80095d6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80095d8:	b672      	cpsid	i
    return(int_posture);
 80095da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80095dc:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d112      	bne.n	800960c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ea:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80095ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d008      	beq.n	8009604 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80095f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f8:	d004      	beq.n	8009604 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	334c      	adds	r3, #76	; 0x4c
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fba2 	bl	8009d48 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	4a72      	ldr	r2, [pc, #456]	; (80097d4 <_tx_thread_system_suspend+0x214>)
 800960a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800960c:	4b72      	ldr	r3, [pc, #456]	; (80097d8 <_tx_thread_system_suspend+0x218>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3b01      	subs	r3, #1
 8009612:	4a71      	ldr	r2, [pc, #452]	; (80097d8 <_tx_thread_system_suspend+0x218>)
 8009614:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	2b01      	cmp	r3, #1
 800961c:	f040 80a6 	bne.w	800976c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8009632:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	429a      	cmp	r2, r3
 8009638:	d015      	beq.n	8009666 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8009640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009642:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009644:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8009646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009648:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800964a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800964c:	4a63      	ldr	r2, [pc, #396]	; (80097dc <_tx_thread_system_suspend+0x21c>)
 800964e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	429a      	cmp	r2, r3
 8009658:	d157      	bne.n	800970a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800965a:	4960      	ldr	r1, [pc, #384]	; (80097dc <_tx_thread_system_suspend+0x21c>)
 800965c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800965e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009664:	e051      	b.n	800970a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8009666:	4a5d      	ldr	r2, [pc, #372]	; (80097dc <_tx_thread_system_suspend+0x21c>)
 8009668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800966a:	2100      	movs	r1, #0
 800966c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8009670:	2201      	movs	r2, #1
 8009672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009674:	fa02 f303 	lsl.w	r3, r2, r3
 8009678:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800967a:	4b59      	ldr	r3, [pc, #356]	; (80097e0 <_tx_thread_system_suspend+0x220>)
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009680:	43db      	mvns	r3, r3
 8009682:	4013      	ands	r3, r2
 8009684:	4a56      	ldr	r2, [pc, #344]	; (80097e0 <_tx_thread_system_suspend+0x220>)
 8009686:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8009688:	2300      	movs	r3, #0
 800968a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800968c:	4b54      	ldr	r3, [pc, #336]	; (80097e0 <_tx_thread_system_suspend+0x220>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8009692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009694:	2b00      	cmp	r3, #0
 8009696:	d12b      	bne.n	80096f0 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009698:	4b52      	ldr	r3, [pc, #328]	; (80097e4 <_tx_thread_system_suspend+0x224>)
 800969a:	2220      	movs	r2, #32
 800969c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800969e:	4b52      	ldr	r3, [pc, #328]	; (80097e8 <_tx_thread_system_suspend+0x228>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096a6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096aa:	f383 8810 	msr	PRIMASK, r3
}
 80096ae:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80096b0:	4b49      	ldr	r3, [pc, #292]	; (80097d8 <_tx_thread_system_suspend+0x218>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 80096b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f040 8081 	bne.w	80097c0 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80096be:	4b4b      	ldr	r3, [pc, #300]	; (80097ec <_tx_thread_system_suspend+0x22c>)
 80096c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80096c6:	f3ef 8305 	mrs	r3, IPSR
 80096ca:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 80096cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10c      	bne.n	80096ec <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096d2:	f3ef 8310 	mrs	r3, PRIMASK
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80096d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80096da:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80096dc:	b662      	cpsie	i
}
 80096de:	bf00      	nop
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e6:	f383 8810 	msr	PRIMASK, r3
}
 80096ea:	bf00      	nop
}
 80096ec:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80096ee:	e067      	b.n	80097c0 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80096f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096f2:	fa93 f3a3 	rbit	r3, r3
 80096f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80096f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096fa:	fab3 f383 	clz	r3, r3
 80096fe:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8009700:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009704:	4413      	add	r3, r2
 8009706:	4a37      	ldr	r2, [pc, #220]	; (80097e4 <_tx_thread_system_suspend+0x224>)
 8009708:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800970a:	4b37      	ldr	r3, [pc, #220]	; (80097e8 <_tx_thread_system_suspend+0x228>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	429a      	cmp	r2, r3
 8009712:	d12b      	bne.n	800976c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009714:	4b33      	ldr	r3, [pc, #204]	; (80097e4 <_tx_thread_system_suspend+0x224>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a30      	ldr	r2, [pc, #192]	; (80097dc <_tx_thread_system_suspend+0x21c>)
 800971a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800971e:	4a32      	ldr	r2, [pc, #200]	; (80097e8 <_tx_thread_system_suspend+0x228>)
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009724:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	f383 8810 	msr	PRIMASK, r3
}
 800972c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800972e:	4b2a      	ldr	r3, [pc, #168]	; (80097d8 <_tx_thread_system_suspend+0x218>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8009734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009736:	2b00      	cmp	r3, #0
 8009738:	d144      	bne.n	80097c4 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800973a:	4b2c      	ldr	r3, [pc, #176]	; (80097ec <_tx_thread_system_suspend+0x22c>)
 800973c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009740:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009742:	f3ef 8305 	mrs	r3, IPSR
 8009746:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10c      	bne.n	8009768 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800974e:	f3ef 8310 	mrs	r3, PRIMASK
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009758:	b662      	cpsie	i
}
 800975a:	bf00      	nop
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	f383 8810 	msr	PRIMASK, r3
}
 8009766:	bf00      	nop
}
 8009768:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800976a:	e02b      	b.n	80097c4 <_tx_thread_system_suspend+0x204>
 800976c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800976e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	f383 8810 	msr	PRIMASK, r3
}
 8009776:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009778:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <_tx_thread_system_suspend+0x228>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800977e:	429a      	cmp	r2, r3
 8009780:	d022      	beq.n	80097c8 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009782:	4b15      	ldr	r3, [pc, #84]	; (80097d8 <_tx_thread_system_suspend+0x218>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8009788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800978a:	2b00      	cmp	r3, #0
 800978c:	d11c      	bne.n	80097c8 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800978e:	4b17      	ldr	r3, [pc, #92]	; (80097ec <_tx_thread_system_suspend+0x22c>)
 8009790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009794:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009796:	f3ef 8305 	mrs	r3, IPSR
 800979a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800979c:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10c      	bne.n	80097bc <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097a2:	f3ef 8310 	mrs	r3, PRIMASK
 80097a6:	617b      	str	r3, [r7, #20]
    return(posture);
 80097a8:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80097aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80097ac:	b662      	cpsie	i
}
 80097ae:	bf00      	nop
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f383 8810 	msr	PRIMASK, r3
}
 80097ba:	bf00      	nop
}
 80097bc:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80097be:	e003      	b.n	80097c8 <_tx_thread_system_suspend+0x208>
                return;
 80097c0:	bf00      	nop
 80097c2:	e002      	b.n	80097ca <_tx_thread_system_suspend+0x20a>
            return;
 80097c4:	bf00      	nop
 80097c6:	e000      	b.n	80097ca <_tx_thread_system_suspend+0x20a>
    return;
 80097c8:	bf00      	nop
}
 80097ca:	3778      	adds	r7, #120	; 0x78
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	240046ec 	.word	0x240046ec
 80097d4:	24004cf0 	.word	0x24004cf0
 80097d8:	24004784 	.word	0x24004784
 80097dc:	24004704 	.word	0x24004704
 80097e0:	240046fc 	.word	0x240046fc
 80097e4:	24004700 	.word	0x24004700
 80097e8:	240046f0 	.word	0x240046f0
 80097ec:	e000ed04 	.word	0xe000ed04

080097f0 <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b0ac      	sub	sp, #176	; 0xb0
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 80097f8:	2300      	movs	r3, #0
 80097fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009802:	67fb      	str	r3, [r7, #124]	; 0x7c
    return(posture);
 8009804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    int_posture = __get_interrupt_posture();
 8009806:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("CPSID i" : : : "memory");
 8009808:	b672      	cpsid	i
    return(int_posture);
 800980a:	6fbb      	ldr	r3, [r7, #120]	; 0x78

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 800980c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	334c      	adds	r3, #76	; 0x4c
 8009814:	4618      	mov	r0, r3
 8009816:	f000 faf9 	bl	8009e0c <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981e:	2b02      	cmp	r3, #2
 8009820:	d10a      	bne.n	8009838 <_tx_thread_terminate+0x48>
 8009822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009826:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800982a:	f383 8810 	msr	PRIMASK, r3
}
 800982e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 8009830:	2300      	movs	r3, #0
 8009832:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009836:	e148      	b.n	8009aca <_tx_thread_terminate+0x2da>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983c:	2b01      	cmp	r3, #1
 800983e:	f000 813d 	beq.w	8009abc <_tx_thread_terminate+0x2cc>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8009842:	4ba6      	ldr	r3, [pc, #664]	; (8009adc <_tx_thread_terminate+0x2ec>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3301      	adds	r3, #1
 8009848:	4aa4      	ldr	r2, [pc, #656]	; (8009adc <_tx_thread_terminate+0x2ec>)
 800984a:	6013      	str	r3, [r2, #0]
        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009850:	2b00      	cmp	r3, #0
 8009852:	d17a      	bne.n	800994a <_tx_thread_terminate+0x15a>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	631a      	str	r2, [r3, #48]	; 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 8009866:	4b9d      	ldr	r3, [pc, #628]	; (8009adc <_tx_thread_terminate+0x2ec>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3301      	adds	r3, #1
 800986c:	4a9b      	ldr	r2, [pc, #620]	; (8009adc <_tx_thread_terminate+0x2ec>)
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009874:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009878:	f383 8810 	msr	PRIMASK, r3
}
 800987c:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800987e:	f3ef 8305 	mrs	r3, IPSR
 8009882:	673b      	str	r3, [r7, #112]	; 0x70
    return(ipsr_value);
 8009884:	6f3a      	ldr	r2, [r7, #112]	; 0x70

            /* Restore interrupts.  */
            TX_RESTORE

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 8009886:	4b96      	ldr	r3, [pc, #600]	; (8009ae0 <_tx_thread_terminate+0x2f0>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4313      	orrs	r3, r2
 800988c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d118      	bne.n	80098ca <_tx_thread_terminate+0xda>
 8009898:	4b92      	ldr	r3, [pc, #584]	; (8009ae4 <_tx_thread_terminate+0x2f4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d113      	bne.n	80098ca <_tx_thread_terminate+0xda>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80098a2:	f3ef 8314 	mrs	r3, CONTROL
 80098a6:	667b      	str	r3, [r7, #100]	; 0x64
    return(control_value);
 80098a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098b2:	f023 0304 	bic.w	r3, r3, #4
 80098b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098be:	66bb      	str	r3, [r7, #104]	; 0x68
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80098c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098c2:	f383 8814 	msr	CONTROL, r3
}
 80098c6:	bf00      	nop
 80098c8:	e032      	b.n	8009930 <_tx_thread_terminate+0x140>
 80098ca:	4b87      	ldr	r3, [pc, #540]	; (8009ae8 <_tx_thread_terminate+0x2f8>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d124      	bne.n	8009930 <_tx_thread_terminate+0x140>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80098e6:	f3ef 8314 	mrs	r3, CONTROL
 80098ea:	663b      	str	r3, [r7, #96]	; 0x60
    return(control_value);
 80098ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098fe:	eeb0 0a40 	vmov.f32	s0, s0
 8009902:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009906:	2b00      	cmp	r3, #0
 8009908:	d112      	bne.n	8009930 <_tx_thread_terminate+0x140>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800990a:	f3ef 8314 	mrs	r3, CONTROL
 800990e:	65bb      	str	r3, [r7, #88]	; 0x58
    return(control_value);
 8009910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800991a:	f023 0304 	bic.w	r3, r3, #4
 800991e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009926:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8009928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800992a:	f383 8814 	msr	CONTROL, r3
}
 800992e:	bf00      	nop
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff fe45 	bl	80095c0 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009936:	f3ef 8310 	mrs	r3, PRIMASK
 800993a:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 800993c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 800993e:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8009940:	b672      	cpsid	i
    return(int_posture);
 8009942:	6d3b      	ldr	r3, [r7, #80]	; 0x50

            /* Disable interrupts.  */
            TX_DISABLE
 8009944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009948:	e094      	b.n	8009a74 <_tx_thread_terminate+0x284>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2202      	movs	r2, #2
 800994e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	639a      	str	r2, [r3, #56]	; 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800995a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800996c:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800996e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009970:	f383 8810 	msr	PRIMASK, r3
}
 8009974:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 8009976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800997a:	2b00      	cmp	r3, #0
 800997c:	d005      	beq.n	800998a <_tx_thread_terminate+0x19a>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 800997e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009982:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800998a:	f3ef 8310 	mrs	r3, PRIMASK
 800998e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8009990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8009992:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009994:	b672      	cpsid	i
    return(int_posture);
 8009996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 8009998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	639a      	str	r2, [r3, #56]	; 0x38
 80099a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099a6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099aa:	f383 8810 	msr	PRIMASK, r3
}
 80099ae:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099b0:	f3ef 8305 	mrs	r3, IPSR
 80099b4:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 80099b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 80099b8:	4b49      	ldr	r3, [pc, #292]	; (8009ae0 <_tx_thread_terminate+0x2f0>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4313      	orrs	r3, r2
 80099be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d118      	bne.n	80099fc <_tx_thread_terminate+0x20c>
 80099ca:	4b46      	ldr	r3, [pc, #280]	; (8009ae4 <_tx_thread_terminate+0x2f4>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d113      	bne.n	80099fc <_tx_thread_terminate+0x20c>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80099d4:	f3ef 8314 	mrs	r3, CONTROL
 80099d8:	637b      	str	r3, [r7, #52]	; 0x34
    return(control_value);
 80099da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099e4:	f023 0304 	bic.w	r3, r3, #4
 80099e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099f0:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80099f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f4:	f383 8814 	msr	CONTROL, r3
}
 80099f8:	bf00      	nop
 80099fa:	e032      	b.n	8009a62 <_tx_thread_terminate+0x272>
 80099fc:	4b3a      	ldr	r3, [pc, #232]	; (8009ae8 <_tx_thread_terminate+0x2f8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d124      	bne.n	8009a62 <_tx_thread_terminate+0x272>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8009a18:	f3ef 8314 	mrs	r3, CONTROL
 8009a1c:	633b      	str	r3, [r7, #48]	; 0x30
    return(control_value);
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a28:	f003 0304 	and.w	r3, r3, #4
 8009a2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a30:	eeb0 0a40 	vmov.f32	s0, s0
 8009a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d112      	bne.n	8009a62 <_tx_thread_terminate+0x272>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8009a3c:	f3ef 8314 	mrs	r3, CONTROL
 8009a40:	62bb      	str	r3, [r7, #40]	; 0x28
    return(control_value);
 8009a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a4c:	f023 0304 	bic.w	r3, r3, #4
 8009a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	f383 8814 	msr	CONTROL, r3
}
 8009a60:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a62:	f3ef 8310 	mrs	r3, PRIMASK
 8009a66:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8009a6a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a6c:	b672      	cpsid	i
    return(int_posture);
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 8009a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a78:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	f383 8810 	msr	PRIMASK, r3
}
 8009a80:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 8009a82:	4b1a      	ldr	r3, [pc, #104]	; (8009aec <_tx_thread_terminate+0x2fc>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <_tx_thread_terminate+0x2a2>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 8009a8a:	4b18      	ldr	r3, [pc, #96]	; (8009aec <_tx_thread_terminate+0x2fc>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a92:	f3ef 8310 	mrs	r3, PRIMASK
 8009a96:	617b      	str	r3, [r7, #20]
    return(posture);
 8009a98:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009a9a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a9c:	b672      	cpsid	i
    return(int_posture);
 8009a9e:	693b      	ldr	r3, [r7, #16]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8009aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 8009aa4:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <_tx_thread_terminate+0x2ec>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	4a0c      	ldr	r2, [pc, #48]	; (8009adc <_tx_thread_terminate+0x2ec>)
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ab2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	f383 8810 	msr	PRIMASK, r3
}
 8009aba:	e006      	b.n	8009aca <_tx_thread_terminate+0x2da>
 8009abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ac0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f383 8810 	msr	PRIMASK, r3
}
 8009ac8:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8009aca:	f7ff fc3f 	bl	800934c <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 8009ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	37b0      	adds	r7, #176	; 0xb0
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	24004784 	.word	0x24004784
 8009ae0:	24000010 	.word	0x24000010
 8009ae4:	240046ec 	.word	0x240046ec
 8009ae8:	e000ef34 	.word	0xe000ef34
 8009aec:	24004788 	.word	0x24004788

08009af0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009af6:	4b21      	ldr	r3, [pc, #132]	; (8009b7c <_tx_thread_time_slice+0x8c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009afc:	f3ef 8310 	mrs	r3, PRIMASK
 8009b00:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009b02:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009b04:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b06:	b672      	cpsid	i
    return(int_posture);
 8009b08:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8009b0a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009b0c:	4b1c      	ldr	r3, [pc, #112]	; (8009b80 <_tx_thread_time_slice+0x90>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d024      	beq.n	8009b62 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d120      	bne.n	8009b62 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	69da      	ldr	r2, [r3, #28]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	4a15      	ldr	r2, [pc, #84]	; (8009b84 <_tx_thread_time_slice+0x94>)
 8009b2e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d013      	beq.n	8009b62 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d10d      	bne.n	8009b62 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	6a12      	ldr	r2, [r2, #32]
 8009b4e:	490e      	ldr	r1, [pc, #56]	; (8009b88 <_tx_thread_time_slice+0x98>)
 8009b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009b54:	4b0d      	ldr	r3, [pc, #52]	; (8009b8c <_tx_thread_time_slice+0x9c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a0b      	ldr	r2, [pc, #44]	; (8009b88 <_tx_thread_time_slice+0x98>)
 8009b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5e:	4a0c      	ldr	r2, [pc, #48]	; (8009b90 <_tx_thread_time_slice+0xa0>)
 8009b60:	6013      	str	r3, [r2, #0]
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f383 8810 	msr	PRIMASK, r3
}
 8009b6c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	240046ec 	.word	0x240046ec
 8009b80:	24004794 	.word	0x24004794
 8009b84:	24004cf0 	.word	0x24004cf0
 8009b88:	24004704 	.word	0x24004704
 8009b8c:	24004700 	.word	0x24004700
 8009b90:	240046f0 	.word	0x240046f0

08009b94 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ba4:	617b      	str	r3, [r7, #20]
    return(posture);
 8009ba6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009ba8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009baa:	b672      	cpsid	i
    return(int_posture);
 8009bac:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009bae:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d10e      	bne.n	8009bd6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8009bb8:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <_tx_thread_timeout+0x74>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	4a12      	ldr	r2, [pc, #72]	; (8009c08 <_tx_thread_timeout+0x74>)
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f383 8810 	msr	PRIMASK, r3
}
 8009bcc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009bce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bd0:	f7ff fbf6 	bl	80093c0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8009bd4:	e013      	b.n	8009bfe <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bda:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009be2:	61bb      	str	r3, [r7, #24]
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f383 8810 	msr	PRIMASK, r3
}
 8009bee:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	69b9      	ldr	r1, [r7, #24]
 8009bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bfc:	4798      	blx	r3
}
 8009bfe:	bf00      	nop
 8009c00:	3728      	adds	r7, #40	; 0x28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	24004784 	.word	0x24004784

08009c0c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c12:	f3ef 8310 	mrs	r3, PRIMASK
 8009c16:	607b      	str	r3, [r7, #4]
    return(posture);
 8009c18:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009c1a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c1c:	b672      	cpsid	i
    return(int_posture);
 8009c1e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8009c20:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8009c22:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <_tx_timer_expiration_process+0x3c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3301      	adds	r3, #1
 8009c28:	4a07      	ldr	r2, [pc, #28]	; (8009c48 <_tx_timer_expiration_process+0x3c>)
 8009c2a:	6013      	str	r3, [r2, #0]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f383 8810 	msr	PRIMASK, r3
}
 8009c36:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8009c38:	4804      	ldr	r0, [pc, #16]	; (8009c4c <_tx_timer_expiration_process+0x40>)
 8009c3a:	f7ff fbc1 	bl	80093c0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	24004784 	.word	0x24004784
 8009c4c:	24004834 	.word	0x24004834

08009c50 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8009c50:	b590      	push	{r4, r7, lr}
 8009c52:	b089      	sub	sp, #36	; 0x24
 8009c54:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8009c56:	4b28      	ldr	r3, [pc, #160]	; (8009cf8 <_tx_timer_initialize+0xa8>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8009c5c:	4b27      	ldr	r3, [pc, #156]	; (8009cfc <_tx_timer_initialize+0xac>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009c62:	4b27      	ldr	r3, [pc, #156]	; (8009d00 <_tx_timer_initialize+0xb0>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8009c68:	4b26      	ldr	r3, [pc, #152]	; (8009d04 <_tx_timer_initialize+0xb4>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8009c6e:	4b26      	ldr	r3, [pc, #152]	; (8009d08 <_tx_timer_initialize+0xb8>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009c74:	2280      	movs	r2, #128	; 0x80
 8009c76:	2100      	movs	r1, #0
 8009c78:	4824      	ldr	r0, [pc, #144]	; (8009d0c <_tx_timer_initialize+0xbc>)
 8009c7a:	f006 fe17 	bl	80108ac <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8009c7e:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <_tx_timer_initialize+0xc0>)
 8009c80:	4a22      	ldr	r2, [pc, #136]	; (8009d0c <_tx_timer_initialize+0xbc>)
 8009c82:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8009c84:	4b23      	ldr	r3, [pc, #140]	; (8009d14 <_tx_timer_initialize+0xc4>)
 8009c86:	4a21      	ldr	r2, [pc, #132]	; (8009d0c <_tx_timer_initialize+0xbc>)
 8009c88:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8009c8a:	4b23      	ldr	r3, [pc, #140]	; (8009d18 <_tx_timer_initialize+0xc8>)
 8009c8c:	4a23      	ldr	r2, [pc, #140]	; (8009d1c <_tx_timer_initialize+0xcc>)
 8009c8e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8009c90:	4b21      	ldr	r3, [pc, #132]	; (8009d18 <_tx_timer_initialize+0xc8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3304      	adds	r3, #4
 8009c96:	4a20      	ldr	r2, [pc, #128]	; (8009d18 <_tx_timer_initialize+0xc8>)
 8009c98:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8009c9a:	4b21      	ldr	r3, [pc, #132]	; (8009d20 <_tx_timer_initialize+0xd0>)
 8009c9c:	4a21      	ldr	r2, [pc, #132]	; (8009d24 <_tx_timer_initialize+0xd4>)
 8009c9e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8009ca0:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <_tx_timer_initialize+0xd8>)
 8009ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ca6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8009ca8:	4b20      	ldr	r3, [pc, #128]	; (8009d2c <_tx_timer_initialize+0xdc>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8009cae:	4b1c      	ldr	r3, [pc, #112]	; (8009d20 <_tx_timer_initialize+0xd0>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a1d      	ldr	r2, [pc, #116]	; (8009d28 <_tx_timer_initialize+0xd8>)
 8009cb4:	6812      	ldr	r2, [r2, #0]
 8009cb6:	491d      	ldr	r1, [pc, #116]	; (8009d2c <_tx_timer_initialize+0xdc>)
 8009cb8:	6809      	ldr	r1, [r1, #0]
 8009cba:	481c      	ldr	r0, [pc, #112]	; (8009d2c <_tx_timer_initialize+0xdc>)
 8009cbc:	6800      	ldr	r0, [r0, #0]
 8009cbe:	2400      	movs	r4, #0
 8009cc0:	9405      	str	r4, [sp, #20]
 8009cc2:	2400      	movs	r4, #0
 8009cc4:	9404      	str	r4, [sp, #16]
 8009cc6:	9003      	str	r0, [sp, #12]
 8009cc8:	9102      	str	r1, [sp, #8]
 8009cca:	9201      	str	r2, [sp, #4]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	4b18      	ldr	r3, [pc, #96]	; (8009d30 <_tx_timer_initialize+0xe0>)
 8009cd0:	4a18      	ldr	r2, [pc, #96]	; (8009d34 <_tx_timer_initialize+0xe4>)
 8009cd2:	4919      	ldr	r1, [pc, #100]	; (8009d38 <_tx_timer_initialize+0xe8>)
 8009cd4:	4819      	ldr	r0, [pc, #100]	; (8009d3c <_tx_timer_initialize+0xec>)
 8009cd6:	f7fe ff9b 	bl	8008c10 <_tx_thread_create>
 8009cda:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1e5      	bne.n	8009cae <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009ce2:	4b17      	ldr	r3, [pc, #92]	; (8009d40 <_tx_timer_initialize+0xf0>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8009ce8:	4b16      	ldr	r3, [pc, #88]	; (8009d44 <_tx_timer_initialize+0xf4>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8009cee:	bf00      	nop
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd90      	pop	{r4, r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	24004790 	.word	0x24004790
 8009cfc:	24004cf0 	.word	0x24004cf0
 8009d00:	24004794 	.word	0x24004794
 8009d04:	24004824 	.word	0x24004824
 8009d08:	24004830 	.word	0x24004830
 8009d0c:	24004798 	.word	0x24004798
 8009d10:	24004818 	.word	0x24004818
 8009d14:	24004820 	.word	0x24004820
 8009d18:	2400481c 	.word	0x2400481c
 8009d1c:	24004814 	.word	0x24004814
 8009d20:	240048e4 	.word	0x240048e4
 8009d24:	240048f0 	.word	0x240048f0
 8009d28:	240048e8 	.word	0x240048e8
 8009d2c:	240048ec 	.word	0x240048ec
 8009d30:	4154494d 	.word	0x4154494d
 8009d34:	08009e7d 	.word	0x08009e7d
 8009d38:	08010944 	.word	0x08010944
 8009d3c:	24004834 	.word	0x24004834
 8009d40:	24004828 	.word	0x24004828
 8009d44:	2400482c 	.word	0x2400482c

08009d48 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b089      	sub	sp, #36	; 0x24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d04a      	beq.n	8009df2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d62:	d046      	beq.n	8009df2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d142      	bne.n	8009df2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	2b20      	cmp	r3, #32
 8009d70:	d902      	bls.n	8009d78 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8009d72:	231f      	movs	r3, #31
 8009d74:	61bb      	str	r3, [r7, #24]
 8009d76:	e002      	b.n	8009d7e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8009d7e:	4b20      	ldr	r3, [pc, #128]	; (8009e00 <_tx_timer_system_activate+0xb8>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8009d8a:	4b1e      	ldr	r3, [pc, #120]	; (8009e04 <_tx_timer_system_activate+0xbc>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69fa      	ldr	r2, [r7, #28]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d30b      	bcc.n	8009dac <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009d94:	4b1b      	ldr	r3, [pc, #108]	; (8009e04 <_tx_timer_system_activate+0xbc>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	69fa      	ldr	r2, [r7, #28]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	109b      	asrs	r3, r3, #2
 8009d9e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009da0:	4b19      	ldr	r3, [pc, #100]	; (8009e08 <_tx_timer_system_activate+0xc0>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d109      	bne.n	8009dc8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	e011      	b.n	8009dec <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8009df2:	bf00      	nop
 8009df4:	3724      	adds	r7, #36	; 0x24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	24004820 	.word	0x24004820
 8009e04:	2400481c 	.word	0x2400481c
 8009e08:	24004818 	.word	0x24004818

08009e0c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d026      	beq.n	8009e6e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d108      	bne.n	8009e40 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d117      	bne.n	8009e68 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e013      	b.n	8009e68 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d105      	bne.n	8009e68 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	619a      	str	r2, [r3, #24]
    }
}
 8009e6e:	bf00      	nop
 8009e70:	371c      	adds	r7, #28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
	...

08009e7c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b098      	sub	sp, #96	; 0x60
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8009e84:	2300      	movs	r3, #0
 8009e86:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a73      	ldr	r2, [pc, #460]	; (800a058 <_tx_timer_thread_entry+0x1dc>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	f040 80de 	bne.w	800a04e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e92:	f3ef 8310 	mrs	r3, PRIMASK
 8009e96:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8009e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8009e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e9c:	b672      	cpsid	i
    return(int_posture);
 8009e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8009ea0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8009ea2:	4b6e      	ldr	r3, [pc, #440]	; (800a05c <_tx_timer_thread_entry+0x1e0>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f107 020c 	add.w	r2, r7, #12
 8009eb6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8009eb8:	4b68      	ldr	r3, [pc, #416]	; (800a05c <_tx_timer_thread_entry+0x1e0>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8009ec0:	4b66      	ldr	r3, [pc, #408]	; (800a05c <_tx_timer_thread_entry+0x1e0>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	4a65      	ldr	r2, [pc, #404]	; (800a05c <_tx_timer_thread_entry+0x1e0>)
 8009ec8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8009eca:	4b64      	ldr	r3, [pc, #400]	; (800a05c <_tx_timer_thread_entry+0x1e0>)
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4b64      	ldr	r3, [pc, #400]	; (800a060 <_tx_timer_thread_entry+0x1e4>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d103      	bne.n	8009ede <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8009ed6:	4b63      	ldr	r3, [pc, #396]	; (800a064 <_tx_timer_thread_entry+0x1e8>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a60      	ldr	r2, [pc, #384]	; (800a05c <_tx_timer_thread_entry+0x1e0>)
 8009edc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8009ede:	4b62      	ldr	r3, [pc, #392]	; (800a068 <_tx_timer_thread_entry+0x1ec>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ee6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	f383 8810 	msr	PRIMASK, r3
}
 8009eee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8009ef8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8009efa:	b672      	cpsid	i
    return(int_posture);
 8009efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8009efe:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8009f00:	e07f      	b.n	800a002 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8009f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d102      	bne.n	8009f1e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	e00e      	b.n	8009f3c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8009f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f28:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f2e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8009f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f32:	f107 020c 	add.w	r2, r7, #12
 8009f36:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8009f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f3a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b20      	cmp	r3, #32
 8009f42:	d911      	bls.n	8009f68 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8009f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8009f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f4e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f56:	f107 0208 	add.w	r2, r7, #8
 8009f5a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8009f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f60:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8009f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f64:	60bb      	str	r3, [r7, #8]
 8009f66:	e01a      	b.n	8009f9e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8009f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8009f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8009f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8009f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d009      	beq.n	8009f98 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f86:	f107 0208 	add.w	r2, r7, #8
 8009f8a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8009f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f90:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8009f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f94:	60bb      	str	r3, [r7, #8]
 8009f96:	e002      	b.n	8009f9e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8009f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8009f9e:	4a33      	ldr	r2, [pc, #204]	; (800a06c <_tx_timer_thread_entry+0x1f0>)
 8009fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	f383 8810 	msr	PRIMASK, r3
}
 8009fae:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8009fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8009fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fb8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009fba:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8009fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009fc6:	b672      	cpsid	i
    return(int_posture);
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8009fca:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8009fcc:	4b27      	ldr	r3, [pc, #156]	; (800a06c <_tx_timer_thread_entry+0x1f0>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d105      	bne.n	8009fe6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8009fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fdc:	2200      	movs	r2, #0
 8009fde:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8009fe0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009fe2:	f7ff feb1 	bl	8009d48 <_tx_timer_system_activate>
 8009fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fe8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	f383 8810 	msr	PRIMASK, r3
}
 8009ff0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ff6:	623b      	str	r3, [r7, #32]
    return(posture);
 8009ff8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009ffa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ffc:	b672      	cpsid	i
    return(int_posture);
 8009ffe:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a000:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	f47f af7c 	bne.w	8009f02 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800a00a:	4b17      	ldr	r3, [pc, #92]	; (800a068 <_tx_timer_thread_entry+0x1ec>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d116      	bne.n	800a040 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800a012:	4b17      	ldr	r3, [pc, #92]	; (800a070 <_tx_timer_thread_entry+0x1f4>)
 800a014:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800a016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a018:	2203      	movs	r2, #3
 800a01a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a01c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a01e:	2201      	movs	r2, #1
 800a020:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800a022:	4b14      	ldr	r3, [pc, #80]	; (800a074 <_tx_timer_thread_entry+0x1f8>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3301      	adds	r3, #1
 800a028:	4a12      	ldr	r2, [pc, #72]	; (800a074 <_tx_timer_thread_entry+0x1f8>)
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a02e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f383 8810 	msr	PRIMASK, r3
}
 800a036:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a038:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a03a:	f7ff fac1 	bl	80095c0 <_tx_thread_system_suspend>
 800a03e:	e728      	b.n	8009e92 <_tx_timer_thread_entry+0x16>
 800a040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a042:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f383 8810 	msr	PRIMASK, r3
}
 800a04a:	bf00      	nop
            TX_DISABLE
 800a04c:	e721      	b.n	8009e92 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800a04e:	bf00      	nop
 800a050:	3760      	adds	r7, #96	; 0x60
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	4154494d 	.word	0x4154494d
 800a05c:	24004820 	.word	0x24004820
 800a060:	2400481c 	.word	0x2400481c
 800a064:	24004818 	.word	0x24004818
 800a068:	24004824 	.word	0x24004824
 800a06c:	24004830 	.word	0x24004830
 800a070:	24004834 	.word	0x24004834
 800a074:	24004784 	.word	0x24004784

0800a078 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08a      	sub	sp, #40	; 0x28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a086:	2300      	movs	r3, #0
 800a088:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d102      	bne.n	800a096 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a090:	2302      	movs	r3, #2
 800a092:	627b      	str	r3, [r7, #36]	; 0x24
 800a094:	e029      	b.n	800a0ea <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a2d      	ldr	r2, [pc, #180]	; (800a150 <_txe_byte_allocate+0xd8>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d002      	beq.n	800a0a6 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a4:	e021      	b.n	800a0ea <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d102      	bne.n	800a0b2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a0b0:	e01b      	b.n	800a0ea <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d102      	bne.n	800a0be <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a0b8:	2305      	movs	r3, #5
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a0bc:	e015      	b.n	800a0ea <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d902      	bls.n	800a0ce <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a0c8:	2305      	movs	r3, #5
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a0cc:	e00d      	b.n	800a0ea <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00a      	beq.n	800a0ea <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a0d4:	f3ef 8305 	mrs	r3, IPSR
 800a0d8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800a0da:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a0dc:	4b1d      	ldr	r3, [pc, #116]	; (800a154 <_txe_byte_allocate+0xdc>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a0e6:	2304      	movs	r3, #4
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d108      	bne.n	800a102 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a0f0:	4b19      	ldr	r3, [pc, #100]	; (800a158 <_txe_byte_allocate+0xe0>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	4a18      	ldr	r2, [pc, #96]	; (800a15c <_txe_byte_allocate+0xe4>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d101      	bne.n	800a102 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a0fe:	2313      	movs	r3, #19
 800a100:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	2b00      	cmp	r3, #0
 800a106:	d114      	bne.n	800a132 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a108:	f3ef 8305 	mrs	r3, IPSR
 800a10c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a10e:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a110:	4b10      	ldr	r3, [pc, #64]	; (800a154 <_txe_byte_allocate+0xdc>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4313      	orrs	r3, r2
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00b      	beq.n	800a132 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a11a:	f3ef 8305 	mrs	r3, IPSR
 800a11e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a120:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a122:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <_txe_byte_allocate+0xdc>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4313      	orrs	r3, r2
 800a128:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a12c:	d201      	bcs.n	800a132 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a12e:	2313      	movs	r3, #19
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	2b00      	cmp	r3, #0
 800a136:	d106      	bne.n	800a146 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	68b9      	ldr	r1, [r7, #8]
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f7fc fd0a 	bl	8006b58 <_tx_byte_allocate>
 800a144:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3728      	adds	r7, #40	; 0x28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	42595445 	.word	0x42595445
 800a154:	24000010 	.word	0x24000010
 800a158:	240046ec 	.word	0x240046ec
 800a15c:	24004834 	.word	0x24004834

0800a160 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b092      	sub	sp, #72	; 0x48
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a16e:	2300      	movs	r3, #0
 800a170:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a178:	2302      	movs	r3, #2
 800a17a:	647b      	str	r3, [r7, #68]	; 0x44
 800a17c:	e075      	b.n	800a26a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800a17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a180:	2b34      	cmp	r3, #52	; 0x34
 800a182:	d002      	beq.n	800a18a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a184:	2302      	movs	r3, #2
 800a186:	647b      	str	r3, [r7, #68]	; 0x44
 800a188:	e06f      	b.n	800a26a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a18a:	f3ef 8310 	mrs	r3, PRIMASK
 800a18e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a192:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a194:	b672      	cpsid	i
    return(int_posture);
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a198:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a19a:	4b3b      	ldr	r3, [pc, #236]	; (800a288 <_txe_byte_pool_create+0x128>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	4a39      	ldr	r2, [pc, #228]	; (800a288 <_txe_byte_pool_create+0x128>)
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	f383 8810 	msr	PRIMASK, r3
}
 800a1ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800a1b0:	4b36      	ldr	r3, [pc, #216]	; (800a28c <_txe_byte_pool_create+0x12c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a1ba:	e009      	b.n	800a1d0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d00b      	beq.n	800a1dc <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800a1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	643b      	str	r3, [r7, #64]	; 0x40
 800a1d0:	4b2f      	ldr	r3, [pc, #188]	; (800a290 <_txe_byte_pool_create+0x130>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d3f0      	bcc.n	800a1bc <_txe_byte_pool_create+0x5c>
 800a1da:	e000      	b.n	800a1de <_txe_byte_pool_create+0x7e>
                break;
 800a1dc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1de:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e2:	623b      	str	r3, [r7, #32]
    return(posture);
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a1e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1e8:	b672      	cpsid	i
    return(int_posture);
 800a1ea:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a1ec:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a1ee:	4b26      	ldr	r3, [pc, #152]	; (800a288 <_txe_byte_pool_create+0x128>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	4a24      	ldr	r2, [pc, #144]	; (800a288 <_txe_byte_pool_create+0x128>)
 800a1f6:	6013      	str	r3, [r2, #0]
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	f383 8810 	msr	PRIMASK, r3
}
 800a202:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a204:	f7ff f8a2 	bl	800934c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d102      	bne.n	800a216 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800a210:	2302      	movs	r3, #2
 800a212:	647b      	str	r3, [r7, #68]	; 0x44
 800a214:	e029      	b.n	800a26a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d102      	bne.n	800a222 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800a21c:	2303      	movs	r3, #3
 800a21e:	647b      	str	r3, [r7, #68]	; 0x44
 800a220:	e023      	b.n	800a26a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b63      	cmp	r3, #99	; 0x63
 800a226:	d802      	bhi.n	800a22e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800a228:	2305      	movs	r3, #5
 800a22a:	647b      	str	r3, [r7, #68]	; 0x44
 800a22c:	e01d      	b.n	800a26a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a22e:	4b19      	ldr	r3, [pc, #100]	; (800a294 <_txe_byte_pool_create+0x134>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a236:	4a18      	ldr	r2, [pc, #96]	; (800a298 <_txe_byte_pool_create+0x138>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d101      	bne.n	800a240 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a23c:	2313      	movs	r3, #19
 800a23e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a240:	f3ef 8305 	mrs	r3, IPSR
 800a244:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a246:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a248:	4b14      	ldr	r3, [pc, #80]	; (800a29c <_txe_byte_pool_create+0x13c>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00b      	beq.n	800a26a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a252:	f3ef 8305 	mrs	r3, IPSR
 800a256:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a258:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a25a:	4b10      	ldr	r3, [pc, #64]	; (800a29c <_txe_byte_pool_create+0x13c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4313      	orrs	r3, r2
 800a260:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a264:	d201      	bcs.n	800a26a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a266:	2313      	movs	r3, #19
 800a268:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a26a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d106      	bne.n	800a27e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	68b9      	ldr	r1, [r7, #8]
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f7fc fdb0 	bl	8006ddc <_tx_byte_pool_create>
 800a27c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a280:	4618      	mov	r0, r3
 800a282:	3748      	adds	r7, #72	; 0x48
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	24004784 	.word	0x24004784
 800a28c:	240046dc 	.word	0x240046dc
 800a290:	240046e0 	.word	0x240046e0
 800a294:	240046ec 	.word	0x240046ec
 800a298:	24004834 	.word	0x24004834
 800a29c:	24000010 	.word	0x24000010

0800a2a0 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b092      	sub	sp, #72	; 0x48
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d102      	bne.n	800a2bc <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a2b6:	2306      	movs	r3, #6
 800a2b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a2ba:	e069      	b.n	800a390 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b24      	cmp	r3, #36	; 0x24
 800a2c0:	d002      	beq.n	800a2c8 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a2c2:	2306      	movs	r3, #6
 800a2c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a2c6:	e063      	b.n	800a390 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a2d0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2d2:	b672      	cpsid	i
    return(int_posture);
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a2d6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a2d8:	4b34      	ldr	r3, [pc, #208]	; (800a3ac <_txe_event_flags_create+0x10c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	4a33      	ldr	r2, [pc, #204]	; (800a3ac <_txe_event_flags_create+0x10c>)
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	f383 8810 	msr	PRIMASK, r3
}
 800a2ec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800a2ee:	4b30      	ldr	r3, [pc, #192]	; (800a3b0 <_txe_event_flags_create+0x110>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	643b      	str	r3, [r7, #64]	; 0x40
 800a2f8:	e009      	b.n	800a30e <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d00b      	beq.n	800a31a <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800a302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800a308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a30a:	3301      	adds	r3, #1
 800a30c:	643b      	str	r3, [r7, #64]	; 0x40
 800a30e:	4b29      	ldr	r3, [pc, #164]	; (800a3b4 <_txe_event_flags_create+0x114>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a314:	429a      	cmp	r2, r3
 800a316:	d3f0      	bcc.n	800a2fa <_txe_event_flags_create+0x5a>
 800a318:	e000      	b.n	800a31c <_txe_event_flags_create+0x7c>
                break;
 800a31a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a31c:	f3ef 8310 	mrs	r3, PRIMASK
 800a320:	623b      	str	r3, [r7, #32]
    return(posture);
 800a322:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a324:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a326:	b672      	cpsid	i
    return(int_posture);
 800a328:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a32a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a32c:	4b1f      	ldr	r3, [pc, #124]	; (800a3ac <_txe_event_flags_create+0x10c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3b01      	subs	r3, #1
 800a332:	4a1e      	ldr	r2, [pc, #120]	; (800a3ac <_txe_event_flags_create+0x10c>)
 800a334:	6013      	str	r3, [r2, #0]
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	f383 8810 	msr	PRIMASK, r3
}
 800a340:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a342:	f7ff f803 	bl	800934c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d102      	bne.n	800a354 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800a34e:	2306      	movs	r3, #6
 800a350:	647b      	str	r3, [r7, #68]	; 0x44
 800a352:	e01d      	b.n	800a390 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a354:	4b18      	ldr	r3, [pc, #96]	; (800a3b8 <_txe_event_flags_create+0x118>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35c:	4a17      	ldr	r2, [pc, #92]	; (800a3bc <_txe_event_flags_create+0x11c>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d101      	bne.n	800a366 <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a362:	2313      	movs	r3, #19
 800a364:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a366:	f3ef 8305 	mrs	r3, IPSR
 800a36a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a36c:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a36e:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <_txe_event_flags_create+0x120>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4313      	orrs	r3, r2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00b      	beq.n	800a390 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a378:	f3ef 8305 	mrs	r3, IPSR
 800a37c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a37e:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a380:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <_txe_event_flags_create+0x120>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4313      	orrs	r3, r2
 800a386:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a38a:	d201      	bcs.n	800a390 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a38c:	2313      	movs	r3, #19
 800a38e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a392:	2b00      	cmp	r3, #0
 800a394:	d104      	bne.n	800a3a0 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800a396:	68b9      	ldr	r1, [r7, #8]
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f7fc ff49 	bl	8007230 <_tx_event_flags_create>
 800a39e:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3748      	adds	r7, #72	; 0x48
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	24004784 	.word	0x24004784
 800a3b0:	240046c4 	.word	0x240046c4
 800a3b4:	240046c8 	.word	0x240046c8
 800a3b8:	240046ec 	.word	0x240046ec
 800a3bc:	24004834 	.word	0x24004834
 800a3c0:	24000010 	.word	0x24000010

0800a3c4 <_txe_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d102      	bne.n	800a3dc <_txe_event_flags_delete+0x18>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a3d6:	2306      	movs	r3, #6
 800a3d8:	617b      	str	r3, [r7, #20]
 800a3da:	e023      	b.n	800a424 <_txe_event_flags_delete+0x60>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a13      	ldr	r2, [pc, #76]	; (800a430 <_txe_event_flags_delete+0x6c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d002      	beq.n	800a3ec <_txe_event_flags_delete+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a3e6:	2306      	movs	r3, #6
 800a3e8:	617b      	str	r3, [r7, #20]
 800a3ea:	e01b      	b.n	800a424 <_txe_event_flags_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a3ec:	f3ef 8305 	mrs	r3, IPSR
 800a3f0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a3f2:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a3f4:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <_txe_event_flags_delete+0x70>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <_txe_event_flags_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800a3fe:	2313      	movs	r3, #19
 800a400:	617b      	str	r3, [r7, #20]
 800a402:	e00f      	b.n	800a424 <_txe_event_flags_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a404:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <_txe_event_flags_delete+0x74>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	4a0b      	ldr	r2, [pc, #44]	; (800a43c <_txe_event_flags_delete+0x78>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d101      	bne.n	800a416 <_txe_event_flags_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a412:	2313      	movs	r3, #19
 800a414:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <_txe_event_flags_delete+0x60>
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7fc ff55 	bl	80072cc <_tx_event_flags_delete>
 800a422:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800a424:	697b      	ldr	r3, [r7, #20]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	4456444e 	.word	0x4456444e
 800a434:	24000010 	.word	0x24000010
 800a438:	240046ec 	.word	0x240046ec
 800a43c:	24004834 	.word	0x24004834

0800a440 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08a      	sub	sp, #40	; 0x28
 800a444:	af02      	add	r7, sp, #8
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a44e:	2300      	movs	r3, #0
 800a450:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a458:	2306      	movs	r3, #6
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	e025      	b.n	800a4aa <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a1e      	ldr	r2, [pc, #120]	; (800a4dc <_txe_event_flags_get+0x9c>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d002      	beq.n	800a46e <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a468:	2306      	movs	r3, #6
 800a46a:	61fb      	str	r3, [r7, #28]
 800a46c:	e01d      	b.n	800a4aa <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d102      	bne.n	800a47a <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a474:	2303      	movs	r3, #3
 800a476:	61fb      	str	r3, [r7, #28]
 800a478:	e017      	b.n	800a4aa <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d014      	beq.n	800a4aa <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a480:	f3ef 8305 	mrs	r3, IPSR
 800a484:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a486:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a488:	4b15      	ldr	r3, [pc, #84]	; (800a4e0 <_txe_event_flags_get+0xa0>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a492:	2304      	movs	r3, #4
 800a494:	61fb      	str	r3, [r7, #28]
 800a496:	e008      	b.n	800a4aa <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800a498:	4b12      	ldr	r3, [pc, #72]	; (800a4e4 <_txe_event_flags_get+0xa4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	4a11      	ldr	r2, [pc, #68]	; (800a4e8 <_txe_event_flags_get+0xa8>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d101      	bne.n	800a4aa <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800a4a6:	2304      	movs	r3, #4
 800a4a8:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d104      	bne.n	800a4ba <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d901      	bls.n	800a4ba <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 800a4b6:	2308      	movs	r3, #8
 800a4b8:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d108      	bne.n	800a4d2 <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7fc ff8e 	bl	80073ec <_tx_event_flags_get>
 800a4d0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800a4d2:	69fb      	ldr	r3, [r7, #28]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3720      	adds	r7, #32
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	4456444e 	.word	0x4456444e
 800a4e0:	24000010 	.word	0x24000010
 800a4e4:	240046ec 	.word	0x240046ec
 800a4e8:	24004834 	.word	0x24004834

0800a4ec <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d102      	bne.n	800a508 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a502:	2306      	movs	r3, #6
 800a504:	617b      	str	r3, [r7, #20]
 800a506:	e00f      	b.n	800a528 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a0d      	ldr	r2, [pc, #52]	; (800a544 <_txe_event_flags_set+0x58>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d002      	beq.n	800a518 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800a512:	2306      	movs	r3, #6
 800a514:	617b      	str	r3, [r7, #20]
 800a516:	e007      	b.n	800a528 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d004      	beq.n	800a528 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 800a524:	2308      	movs	r3, #8
 800a526:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d105      	bne.n	800a53a <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	68b9      	ldr	r1, [r7, #8]
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7fd f844 	bl	80075c0 <_tx_event_flags_set>
 800a538:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800a53a:	697b      	ldr	r3, [r7, #20]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	4456444e 	.word	0x4456444e

0800a548 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b092      	sub	sp, #72	; 0x48
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a556:	2300      	movs	r3, #0
 800a558:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d102      	bne.n	800a566 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a560:	231c      	movs	r3, #28
 800a562:	647b      	str	r3, [r7, #68]	; 0x44
 800a564:	e053      	b.n	800a60e <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b34      	cmp	r3, #52	; 0x34
 800a56a:	d002      	beq.n	800a572 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a56c:	231c      	movs	r3, #28
 800a56e:	647b      	str	r3, [r7, #68]	; 0x44
 800a570:	e04d      	b.n	800a60e <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a572:	f3ef 8310 	mrs	r3, PRIMASK
 800a576:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a57a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a57c:	b672      	cpsid	i
    return(int_posture);
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a580:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a582:	4b3a      	ldr	r3, [pc, #232]	; (800a66c <_txe_mutex_create+0x124>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3301      	adds	r3, #1
 800a588:	4a38      	ldr	r2, [pc, #224]	; (800a66c <_txe_mutex_create+0x124>)
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	f383 8810 	msr	PRIMASK, r3
}
 800a596:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 800a598:	4b35      	ldr	r3, [pc, #212]	; (800a670 <_txe_mutex_create+0x128>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800a59e:	2300      	movs	r3, #0
 800a5a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a5a2:	e009      	b.n	800a5b8 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d00b      	beq.n	800a5c4 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800a5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ae:	6a1b      	ldr	r3, [r3, #32]
 800a5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800a5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	643b      	str	r3, [r7, #64]	; 0x40
 800a5b8:	4b2e      	ldr	r3, [pc, #184]	; (800a674 <_txe_mutex_create+0x12c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d3f0      	bcc.n	800a5a4 <_txe_mutex_create+0x5c>
 800a5c2:	e000      	b.n	800a5c6 <_txe_mutex_create+0x7e>
                break;
 800a5c4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a5c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ca:	623b      	str	r3, [r7, #32]
    return(posture);
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a5ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5d0:	b672      	cpsid	i
    return(int_posture);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a5d4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a5d6:	4b25      	ldr	r3, [pc, #148]	; (800a66c <_txe_mutex_create+0x124>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	4a23      	ldr	r2, [pc, #140]	; (800a66c <_txe_mutex_create+0x124>)
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	f383 8810 	msr	PRIMASK, r3
}
 800a5ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a5ec:	f7fe feae 	bl	800934c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d102      	bne.n	800a5fe <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 800a5f8:	231c      	movs	r3, #28
 800a5fa:	647b      	str	r3, [r7, #68]	; 0x44
 800a5fc:	e007      	b.n	800a60e <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d004      	beq.n	800a60e <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 800a60a:	231f      	movs	r3, #31
 800a60c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a60e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a610:	2b00      	cmp	r3, #0
 800a612:	d11d      	bne.n	800a650 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a614:	4b18      	ldr	r3, [pc, #96]	; (800a678 <_txe_mutex_create+0x130>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61c:	4a17      	ldr	r2, [pc, #92]	; (800a67c <_txe_mutex_create+0x134>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d101      	bne.n	800a626 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a622:	2313      	movs	r3, #19
 800a624:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a626:	f3ef 8305 	mrs	r3, IPSR
 800a62a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a62c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a62e:	4b14      	ldr	r3, [pc, #80]	; (800a680 <_txe_mutex_create+0x138>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4313      	orrs	r3, r2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00b      	beq.n	800a650 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a638:	f3ef 8305 	mrs	r3, IPSR
 800a63c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a63e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a640:	4b0f      	ldr	r3, [pc, #60]	; (800a680 <_txe_mutex_create+0x138>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4313      	orrs	r3, r2
 800a646:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a64a:	d201      	bcs.n	800a650 <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a64c:	2313      	movs	r3, #19
 800a64e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a652:	2b00      	cmp	r3, #0
 800a654:	d105      	bne.n	800a662 <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	68b9      	ldr	r1, [r7, #8]
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7fd faee 	bl	8007c3c <_tx_mutex_create>
 800a660:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a664:	4618      	mov	r0, r3
 800a666:	3748      	adds	r7, #72	; 0x48
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	24004784 	.word	0x24004784
 800a670:	240046cc 	.word	0x240046cc
 800a674:	240046d0 	.word	0x240046d0
 800a678:	240046ec 	.word	0x240046ec
 800a67c:	24004834 	.word	0x24004834
 800a680:	24000010 	.word	0x24000010

0800a684 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a68c:	2300      	movs	r3, #0
 800a68e:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d102      	bne.n	800a69c <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a696:	231c      	movs	r3, #28
 800a698:	617b      	str	r3, [r7, #20]
 800a69a:	e023      	b.n	800a6e4 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a13      	ldr	r2, [pc, #76]	; (800a6f0 <_txe_mutex_delete+0x6c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d002      	beq.n	800a6ac <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a6a6:	231c      	movs	r3, #28
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	e01b      	b.n	800a6e4 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a6ac:	f3ef 8305 	mrs	r3, IPSR
 800a6b0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a6b2:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a6b4:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <_txe_mutex_delete+0x70>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800a6be:	2313      	movs	r3, #19
 800a6c0:	617b      	str	r3, [r7, #20]
 800a6c2:	e00f      	b.n	800a6e4 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a6c4:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <_txe_mutex_delete+0x74>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	4a0b      	ldr	r2, [pc, #44]	; (800a6fc <_txe_mutex_delete+0x78>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d101      	bne.n	800a6d6 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a6d2:	2313      	movs	r3, #19
 800a6d4:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d103      	bne.n	800a6e4 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7fd fb07 	bl	8007cf0 <_tx_mutex_delete>
 800a6e2:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800a6e4:	697b      	ldr	r3, [r7, #20]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	4d555445 	.word	0x4d555445
 800a6f4:	24000010 	.word	0x24000010
 800a6f8:	240046ec 	.word	0x240046ec
 800a6fc:	24004834 	.word	0x24004834

0800a700 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a70a:	2300      	movs	r3, #0
 800a70c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d102      	bne.n	800a71a <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a714:	231c      	movs	r3, #28
 800a716:	61fb      	str	r3, [r7, #28]
 800a718:	e01f      	b.n	800a75a <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a21      	ldr	r2, [pc, #132]	; (800a7a4 <_txe_mutex_get+0xa4>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d002      	beq.n	800a72a <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a724:	231c      	movs	r3, #28
 800a726:	61fb      	str	r3, [r7, #28]
 800a728:	e017      	b.n	800a75a <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d014      	beq.n	800a75a <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a730:	f3ef 8305 	mrs	r3, IPSR
 800a734:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a736:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a738:	4b1b      	ldr	r3, [pc, #108]	; (800a7a8 <_txe_mutex_get+0xa8>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a742:	2304      	movs	r3, #4
 800a744:	61fb      	str	r3, [r7, #28]
 800a746:	e008      	b.n	800a75a <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800a748:	4b18      	ldr	r3, [pc, #96]	; (800a7ac <_txe_mutex_get+0xac>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	4a17      	ldr	r2, [pc, #92]	; (800a7b0 <_txe_mutex_get+0xb0>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d101      	bne.n	800a75a <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800a756:	2304      	movs	r3, #4
 800a758:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d114      	bne.n	800a78a <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a760:	f3ef 8305 	mrs	r3, IPSR
 800a764:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a766:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a768:	4b0f      	ldr	r3, [pc, #60]	; (800a7a8 <_txe_mutex_get+0xa8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a772:	f3ef 8305 	mrs	r3, IPSR
 800a776:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a778:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a77a:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <_txe_mutex_get+0xa8>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4313      	orrs	r3, r2
 800a780:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a784:	d201      	bcs.n	800a78a <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a786:	2313      	movs	r3, #19
 800a788:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d104      	bne.n	800a79a <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7fd fb56 	bl	8007e44 <_tx_mutex_get>
 800a798:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800a79a:	69fb      	ldr	r3, [r7, #28]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3720      	adds	r7, #32
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	4d555445 	.word	0x4d555445
 800a7a8:	24000010 	.word	0x24000010
 800a7ac:	240046ec 	.word	0x240046ec
 800a7b0:	24004834 	.word	0x24004834

0800a7b4 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a7c6:	231c      	movs	r3, #28
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	e01c      	b.n	800a806 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a13      	ldr	r2, [pc, #76]	; (800a820 <_txe_mutex_put+0x6c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d002      	beq.n	800a7dc <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800a7d6:	231c      	movs	r3, #28
 800a7d8:	617b      	str	r3, [r7, #20]
 800a7da:	e014      	b.n	800a806 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a7dc:	f3ef 8305 	mrs	r3, IPSR
 800a7e0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a7e2:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a7e4:	4b0f      	ldr	r3, [pc, #60]	; (800a824 <_txe_mutex_put+0x70>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a7ee:	f3ef 8305 	mrs	r3, IPSR
 800a7f2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a7f4:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <_txe_mutex_put+0x70>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a800:	d201      	bcs.n	800a806 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a802:	2313      	movs	r3, #19
 800a804:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7fd fd91 	bl	8008334 <_tx_mutex_put>
 800a812:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800a814:	697b      	ldr	r3, [r7, #20]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	4d555445 	.word	0x4d555445
 800a824:	24000010 	.word	0x24000010

0800a828 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b092      	sub	sp, #72	; 0x48
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a836:	2300      	movs	r3, #0
 800a838:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d102      	bne.n	800a846 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a840:	230c      	movs	r3, #12
 800a842:	647b      	str	r3, [r7, #68]	; 0x44
 800a844:	e054      	b.n	800a8f0 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b1c      	cmp	r3, #28
 800a84a:	d002      	beq.n	800a852 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a84c:	230c      	movs	r3, #12
 800a84e:	647b      	str	r3, [r7, #68]	; 0x44
 800a850:	e04e      	b.n	800a8f0 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a852:	f3ef 8310 	mrs	r3, PRIMASK
 800a856:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a85a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a85c:	b672      	cpsid	i
    return(int_posture);
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a860:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a862:	4b36      	ldr	r3, [pc, #216]	; (800a93c <_txe_semaphore_create+0x114>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3301      	adds	r3, #1
 800a868:	4a34      	ldr	r2, [pc, #208]	; (800a93c <_txe_semaphore_create+0x114>)
 800a86a:	6013      	str	r3, [r2, #0]
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	f383 8810 	msr	PRIMASK, r3
}
 800a876:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800a878:	4b31      	ldr	r3, [pc, #196]	; (800a940 <_txe_semaphore_create+0x118>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a87e:	2300      	movs	r3, #0
 800a880:	643b      	str	r3, [r7, #64]	; 0x40
 800a882:	e009      	b.n	800a898 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a888:	429a      	cmp	r2, r3
 800a88a:	d00b      	beq.n	800a8a4 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800a88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a894:	3301      	adds	r3, #1
 800a896:	643b      	str	r3, [r7, #64]	; 0x40
 800a898:	4b2a      	ldr	r3, [pc, #168]	; (800a944 <_txe_semaphore_create+0x11c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d3f0      	bcc.n	800a884 <_txe_semaphore_create+0x5c>
 800a8a2:	e000      	b.n	800a8a6 <_txe_semaphore_create+0x7e>
                break;
 800a8a4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8aa:	623b      	str	r3, [r7, #32]
    return(posture);
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a8ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8b0:	b672      	cpsid	i
    return(int_posture);
 800a8b2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a8b4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a8b6:	4b21      	ldr	r3, [pc, #132]	; (800a93c <_txe_semaphore_create+0x114>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	4a1f      	ldr	r2, [pc, #124]	; (800a93c <_txe_semaphore_create+0x114>)
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	f383 8810 	msr	PRIMASK, r3
}
 800a8ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a8cc:	f7fe fd3e 	bl	800934c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d102      	bne.n	800a8de <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800a8d8:	230c      	movs	r3, #12
 800a8da:	647b      	str	r3, [r7, #68]	; 0x44
 800a8dc:	e008      	b.n	800a8f0 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a8de:	4b1a      	ldr	r3, [pc, #104]	; (800a948 <_txe_semaphore_create+0x120>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e6:	4a19      	ldr	r2, [pc, #100]	; (800a94c <_txe_semaphore_create+0x124>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d101      	bne.n	800a8f0 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a8ec:	2313      	movs	r3, #19
 800a8ee:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d114      	bne.n	800a920 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a8f6:	f3ef 8305 	mrs	r3, IPSR
 800a8fa:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a8fc:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a8fe:	4b14      	ldr	r3, [pc, #80]	; (800a950 <_txe_semaphore_create+0x128>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4313      	orrs	r3, r2
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00b      	beq.n	800a920 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a908:	f3ef 8305 	mrs	r3, IPSR
 800a90c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a90e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a910:	4b0f      	ldr	r3, [pc, #60]	; (800a950 <_txe_semaphore_create+0x128>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4313      	orrs	r3, r2
 800a916:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a91a:	d201      	bcs.n	800a920 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a91c:	2313      	movs	r3, #19
 800a91e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a922:	2b00      	cmp	r3, #0
 800a924:	d105      	bne.n	800a932 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	68b9      	ldr	r1, [r7, #8]
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7fd ffa4 	bl	8008878 <_tx_semaphore_create>
 800a930:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a934:	4618      	mov	r0, r3
 800a936:	3748      	adds	r7, #72	; 0x48
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	24004784 	.word	0x24004784
 800a940:	240046b4 	.word	0x240046b4
 800a944:	240046b8 	.word	0x240046b8
 800a948:	240046ec 	.word	0x240046ec
 800a94c:	24004834 	.word	0x24004834
 800a950:	24000010 	.word	0x24000010

0800a954 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a95c:	2300      	movs	r3, #0
 800a95e:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d102      	bne.n	800a96c <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a966:	230c      	movs	r3, #12
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	e01c      	b.n	800a9a6 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a13      	ldr	r2, [pc, #76]	; (800a9c0 <_txe_semaphore_delete+0x6c>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d002      	beq.n	800a97c <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a976:	230c      	movs	r3, #12
 800a978:	617b      	str	r3, [r7, #20]
 800a97a:	e014      	b.n	800a9a6 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a97c:	f3ef 8305 	mrs	r3, IPSR
 800a980:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a982:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a984:	4b0f      	ldr	r3, [pc, #60]	; (800a9c4 <_txe_semaphore_delete+0x70>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4313      	orrs	r3, r2
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a98e:	2313      	movs	r3, #19
 800a990:	617b      	str	r3, [r7, #20]
 800a992:	e008      	b.n	800a9a6 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a994:	4b0c      	ldr	r3, [pc, #48]	; (800a9c8 <_txe_semaphore_delete+0x74>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	4a0b      	ldr	r2, [pc, #44]	; (800a9cc <_txe_semaphore_delete+0x78>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d101      	bne.n	800a9a6 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a9a2:	2313      	movs	r3, #19
 800a9a4:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d103      	bne.n	800a9b4 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7fd ffb5 	bl	800891c <_tx_semaphore_delete>
 800a9b2:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800a9b4:	697b      	ldr	r3, [r7, #20]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	53454d41 	.word	0x53454d41
 800a9c4:	24000010 	.word	0x24000010
 800a9c8:	240046ec 	.word	0x240046ec
 800a9cc:	24004834 	.word	0x24004834

0800a9d0 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d102      	bne.n	800a9ea <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a9e4:	230c      	movs	r3, #12
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	e01f      	b.n	800aa2a <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a15      	ldr	r2, [pc, #84]	; (800aa44 <_txe_semaphore_get+0x74>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d002      	beq.n	800a9fa <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a9f4:	230c      	movs	r3, #12
 800a9f6:	617b      	str	r3, [r7, #20]
 800a9f8:	e017      	b.n	800aa2a <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d014      	beq.n	800aa2a <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aa00:	f3ef 8305 	mrs	r3, IPSR
 800aa04:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800aa06:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800aa08:	4b0f      	ldr	r3, [pc, #60]	; (800aa48 <_txe_semaphore_get+0x78>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800aa12:	2304      	movs	r3, #4
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	e008      	b.n	800aa2a <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800aa18:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <_txe_semaphore_get+0x7c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	4a0b      	ldr	r2, [pc, #44]	; (800aa50 <_txe_semaphore_get+0x80>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d101      	bne.n	800aa2a <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800aa26:	2304      	movs	r3, #4
 800aa28:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d104      	bne.n	800aa3a <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7fe f802 	bl	8008a3c <_tx_semaphore_get>
 800aa38:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800aa3a:	697b      	ldr	r3, [r7, #20]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	53454d41 	.word	0x53454d41
 800aa48:	24000010 	.word	0x24000010
 800aa4c:	240046ec 	.word	0x240046ec
 800aa50:	24004834 	.word	0x24004834

0800aa54 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d102      	bne.n	800aa68 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800aa62:	230c      	movs	r3, #12
 800aa64:	60fb      	str	r3, [r7, #12]
 800aa66:	e00b      	b.n	800aa80 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a07      	ldr	r2, [pc, #28]	; (800aa8c <_txe_semaphore_put+0x38>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d002      	beq.n	800aa78 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800aa72:	230c      	movs	r3, #12
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	e003      	b.n	800aa80 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7fe f871 	bl	8008b60 <_tx_semaphore_put>
 800aa7e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800aa80:	68fb      	ldr	r3, [r7, #12]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	53454d41 	.word	0x53454d41

0800aa90 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b09a      	sub	sp, #104	; 0x68
 800aa94:	af06      	add	r7, sp, #24
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d102      	bne.n	800aaae <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800aaa8:	230e      	movs	r3, #14
 800aaaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aaac:	e0bb      	b.n	800ac26 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800aaae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aab0:	2bb0      	cmp	r3, #176	; 0xb0
 800aab2:	d002      	beq.n	800aaba <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800aab4:	230e      	movs	r3, #14
 800aab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aab8:	e0b5      	b.n	800ac26 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aaba:	f3ef 8310 	mrs	r3, PRIMASK
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800aac4:	b672      	cpsid	i
    return(int_posture);
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800aac8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800aaca:	4b64      	ldr	r3, [pc, #400]	; (800ac5c <_txe_thread_create+0x1cc>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3301      	adds	r3, #1
 800aad0:	4a62      	ldr	r2, [pc, #392]	; (800ac5c <_txe_thread_create+0x1cc>)
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	f383 8810 	msr	PRIMASK, r3
}
 800aade:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800aae0:	2300      	movs	r3, #0
 800aae2:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800aae4:	4b5e      	ldr	r3, [pc, #376]	; (800ac60 <_txe_thread_create+0x1d0>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800aaea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaec:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800aaee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaf4:	4413      	add	r3, r2
 800aaf6:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafa:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800aafc:	2300      	movs	r3, #0
 800aafe:	647b      	str	r3, [r7, #68]	; 0x44
 800ab00:	e02b      	b.n	800ab5a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d101      	bne.n	800ab0e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800ab0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d028      	beq.n	800ab66 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800ab14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d308      	bcc.n	800ab30 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800ab1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d203      	bcs.n	800ab30 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800ab30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d308      	bcc.n	800ab4c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800ab3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d203      	bcs.n	800ab4c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800ab44:	2300      	movs	r3, #0
 800ab46:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800ab4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab52:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800ab54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab56:	3301      	adds	r3, #1
 800ab58:	647b      	str	r3, [r7, #68]	; 0x44
 800ab5a:	4b42      	ldr	r3, [pc, #264]	; (800ac64 <_txe_thread_create+0x1d4>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d3ce      	bcc.n	800ab02 <_txe_thread_create+0x72>
 800ab64:	e000      	b.n	800ab68 <_txe_thread_create+0xd8>
                break;
 800ab66:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab68:	f3ef 8310 	mrs	r3, PRIMASK
 800ab6c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ab6e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ab70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab72:	b672      	cpsid	i
    return(int_posture);
 800ab74:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800ab78:	4b38      	ldr	r3, [pc, #224]	; (800ac5c <_txe_thread_create+0x1cc>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	4a37      	ldr	r2, [pc, #220]	; (800ac5c <_txe_thread_create+0x1cc>)
 800ab80:	6013      	str	r3, [r2, #0]
 800ab82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab84:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	f383 8810 	msr	PRIMASK, r3
}
 800ab8c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ab8e:	f7fe fbdd 	bl	800934c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d102      	bne.n	800aba0 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800ab9a:	230e      	movs	r3, #14
 800ab9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab9e:	e042      	b.n	800ac26 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800aba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d102      	bne.n	800abac <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800aba6:	2303      	movs	r3, #3
 800aba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abaa:	e03c      	b.n	800ac26 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800abb2:	2303      	movs	r3, #3
 800abb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abb6:	e036      	b.n	800ac26 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800abb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abba:	2bc7      	cmp	r3, #199	; 0xc7
 800abbc:	d802      	bhi.n	800abc4 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800abbe:	2305      	movs	r3, #5
 800abc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abc2:	e030      	b.n	800ac26 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800abc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abc6:	2b1f      	cmp	r3, #31
 800abc8:	d902      	bls.n	800abd0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800abca:	230f      	movs	r3, #15
 800abcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abce:	e02a      	b.n	800ac26 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800abd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d902      	bls.n	800abde <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800abd8:	2318      	movs	r3, #24
 800abda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abdc:	e023      	b.n	800ac26 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800abde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d902      	bls.n	800abea <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800abe4:	2310      	movs	r3, #16
 800abe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abe8:	e01d      	b.n	800ac26 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800abea:	4b1f      	ldr	r3, [pc, #124]	; (800ac68 <_txe_thread_create+0x1d8>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	4a1e      	ldr	r2, [pc, #120]	; (800ac6c <_txe_thread_create+0x1dc>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d101      	bne.n	800abfc <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800abf8:	2313      	movs	r3, #19
 800abfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800abfc:	f3ef 8305 	mrs	r3, IPSR
 800ac00:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ac02:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ac04:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <_txe_thread_create+0x1e0>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00b      	beq.n	800ac26 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac0e:	f3ef 8305 	mrs	r3, IPSR
 800ac12:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ac14:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ac16:	4b16      	ldr	r3, [pc, #88]	; (800ac70 <_txe_thread_create+0x1e0>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ac20:	d201      	bcs.n	800ac26 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800ac22:	2313      	movs	r3, #19
 800ac24:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ac26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d112      	bne.n	800ac52 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800ac2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac2e:	9305      	str	r3, [sp, #20]
 800ac30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac36:	9303      	str	r3, [sp, #12]
 800ac38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac3a:	9302      	str	r3, [sp, #8]
 800ac3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7fd ffe0 	bl	8008c10 <_tx_thread_create>
 800ac50:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800ac52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3750      	adds	r7, #80	; 0x50
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	24004784 	.word	0x24004784
 800ac60:	240046f4 	.word	0x240046f4
 800ac64:	240046f8 	.word	0x240046f8
 800ac68:	240046ec 	.word	0x240046ec
 800ac6c:	24004834 	.word	0x24004834
 800ac70:	24000010 	.word	0x24000010

0800ac74 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac7c:	f3ef 8305 	mrs	r3, IPSR
 800ac80:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800ac82:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ac84:	4b0f      	ldr	r3, [pc, #60]	; (800acc4 <_txe_thread_delete+0x50>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800ac8e:	2313      	movs	r3, #19
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	e011      	b.n	800acb8 <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d102      	bne.n	800aca0 <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ac9a:	230e      	movs	r3, #14
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	e00b      	b.n	800acb8 <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a08      	ldr	r2, [pc, #32]	; (800acc8 <_txe_thread_delete+0x54>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d002      	beq.n	800acb0 <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800acaa:	230e      	movs	r3, #14
 800acac:	60fb      	str	r3, [r7, #12]
 800acae:	e003      	b.n	800acb8 <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7fe f8a3 	bl	8008dfc <_tx_thread_delete>
 800acb6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800acb8:	68fb      	ldr	r3, [r7, #12]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	24000010 	.word	0x24000010
 800acc8:	54485244 	.word	0x54485244

0800accc <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08c      	sub	sp, #48	; 0x30
 800acd0:	af06      	add	r7, sp, #24
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
 800acd8:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ace0:	230e      	movs	r3, #14
 800ace2:	617b      	str	r3, [r7, #20]
 800ace4:	e018      	b.n	800ad18 <_txe_thread_info_get+0x4c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a0e      	ldr	r2, [pc, #56]	; (800ad24 <_txe_thread_info_get+0x58>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d002      	beq.n	800acf6 <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800acf0:	230e      	movs	r3, #14
 800acf2:	617b      	str	r3, [r7, #20]
 800acf4:	e010      	b.n	800ad18 <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	9304      	str	r3, [sp, #16]
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	9303      	str	r3, [sp, #12]
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	9302      	str	r3, [sp, #8]
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	68b9      	ldr	r1, [r7, #8]
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7fe f8eb 	bl	8008eec <_tx_thread_info_get>
 800ad16:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 800ad18:	697b      	ldr	r3, [r7, #20]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	54485244 	.word	0x54485244

0800ad28 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d102      	bne.n	800ad3c <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ad36:	230e      	movs	r3, #14
 800ad38:	60fb      	str	r3, [r7, #12]
 800ad3a:	e00b      	b.n	800ad54 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a07      	ldr	r2, [pc, #28]	; (800ad60 <_txe_thread_resume+0x38>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d002      	beq.n	800ad4c <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ad46:	230e      	movs	r3, #14
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	e003      	b.n	800ad54 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7fe f961 	bl	8009014 <_tx_thread_resume>
 800ad52:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800ad54:	68fb      	ldr	r3, [r7, #12]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	54485244 	.word	0x54485244

0800ad64 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d102      	bne.n	800ad78 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ad72:	230e      	movs	r3, #14
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	e00b      	b.n	800ad90 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a07      	ldr	r2, [pc, #28]	; (800ad9c <_txe_thread_suspend+0x38>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d002      	beq.n	800ad88 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ad82:	230e      	movs	r3, #14
 800ad84:	60fb      	str	r3, [r7, #12]
 800ad86:	e003      	b.n	800ad90 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7fe fa6f 	bl	800926c <_tx_thread_suspend>
 800ad8e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800ad90:	68fb      	ldr	r3, [r7, #12]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	54485244 	.word	0x54485244

0800ada0 <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d102      	bne.n	800adb4 <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800adae:	230e      	movs	r3, #14
 800adb0:	60fb      	str	r3, [r7, #12]
 800adb2:	e017      	b.n	800ade4 <_txe_thread_terminate+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a0d      	ldr	r2, [pc, #52]	; (800adf0 <_txe_thread_terminate+0x50>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d002      	beq.n	800adc4 <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800adbe:	230e      	movs	r3, #14
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	e00f      	b.n	800ade4 <_txe_thread_terminate+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800adc4:	f3ef 8305 	mrs	r3, IPSR
 800adc8:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800adca:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <_txe_thread_terminate+0x54>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4313      	orrs	r3, r2
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <_txe_thread_terminate+0x3c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800add6:	2313      	movs	r3, #19
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	e003      	b.n	800ade4 <_txe_thread_terminate+0x44>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7fe fd07 	bl	80097f0 <_tx_thread_terminate>
 800ade2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800ade4:	68fb      	ldr	r3, [r7, #12]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	54485244 	.word	0x54485244
 800adf4:	24000010 	.word	0x24000010

0800adf8 <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ae00:	4b1b      	ldr	r3, [pc, #108]	; (800ae70 <_ux_device_stack_alternate_setting_get+0x78>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3320      	adds	r3, #32
 800ae06:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d129      	bne.n	800ae64 <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae16:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 800ae18:	e021      	b.n	800ae5e <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d119      	bne.n	800ae58 <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	333c      	adds	r3, #60	; 0x3c
 800ae28:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	3330      	adds	r3, #48	; 0x30
 800ae2e:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800ae38:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800ae3a:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	2203      	movs	r2, #3
 800ae46:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800ae48:	2201      	movs	r2, #1
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	6938      	ldr	r0, [r7, #16]
 800ae4e:	f001 fd89 	bl	800c964 <_ux_device_stack_transfer_request>
 800ae52:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	e006      	b.n	800ae66 <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5c:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1da      	bne.n	800ae1a <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800ae64:	23ff      	movs	r3, #255	; 0xff
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3720      	adds	r7, #32
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	24004cf4 	.word	0x24004cf4

0800ae74 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b0ae      	sub	sp, #184	; 0xb8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ae7e:	4bc0      	ldr	r3, [pc, #768]	; (800b180 <_ux_device_stack_alternate_setting_set+0x30c>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3320      	adds	r3, #32
 800ae84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800ae88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d001      	beq.n	800ae96 <_ux_device_stack_alternate_setting_set+0x22>
        return(UX_FUNCTION_NOT_SUPPORTED);
 800ae92:	2354      	movs	r3, #84	; 0x54
 800ae94:	e216      	b.n	800b2c4 <_ux_device_stack_alternate_setting_set+0x450>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 800ae96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 800aea2:	e00a      	b.n	800aeba <_ux_device_stack_alternate_setting_set+0x46>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800aea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d009      	beq.n	800aec4 <_ux_device_stack_alternate_setting_set+0x50>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800aeb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aeb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (interface_ptr != UX_NULL)
 800aeba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1f0      	bne.n	800aea4 <_ux_device_stack_alternate_setting_set+0x30>
 800aec2:	e000      	b.n	800aec6 <_ux_device_stack_alternate_setting_set+0x52>
            break;
 800aec4:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 800aec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <_ux_device_stack_alternate_setting_set+0x68>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800aece:	2252      	movs	r2, #82	; 0x52
 800aed0:	2107      	movs	r1, #7
 800aed2:	2002      	movs	r0, #2
 800aed4:	f001 fdd0 	bl	800ca78 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800aed8:	2352      	movs	r3, #82	; 0x52
 800aeda:	e1f3      	b.n	800b2c4 <_ux_device_stack_alternate_setting_set+0x450>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800aedc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aee0:	699b      	ldr	r3, [r3, #24]
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d101      	bne.n	800aeec <_ux_device_stack_alternate_setting_set+0x78>
        return(UX_SUCCESS);       
 800aee8:	2300      	movs	r3, #0
 800aeea:	e1eb      	b.n	800b2c4 <_ux_device_stack_alternate_setting_set+0x450>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800aeec:	4ba4      	ldr	r3, [pc, #656]	; (800b180 <_ux_device_stack_alternate_setting_set+0x30c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800aef4:	4ba2      	ldr	r3, [pc, #648]	; (800b180 <_ux_device_stack_alternate_setting_set+0x30c>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800aefc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800af00:	4b9f      	ldr	r3, [pc, #636]	; (800b180 <_ux_device_stack_alternate_setting_set+0x30c>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800af08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800af0c:	e1d4      	b.n	800b2b8 <_ux_device_stack_alternate_setting_set+0x444>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800af0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800af18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800af1c:	785b      	ldrb	r3, [r3, #1]
 800af1e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800af22:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800af26:	2b02      	cmp	r3, #2
 800af28:	f040 81b8 	bne.w	800b29c <_ux_device_stack_alternate_setting_set+0x428>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800af2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af30:	2208      	movs	r2, #8
 800af32:	4994      	ldr	r1, [pc, #592]	; (800b184 <_ux_device_stack_alternate_setting_set+0x310>)
 800af34:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800af38:	f001 fe8c 	bl	800cc54 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800af3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800af46:	429a      	cmp	r2, r3
 800af48:	f040 81a8 	bne.w	800b29c <_ux_device_stack_alternate_setting_set+0x428>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800af4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 800af52:	e19d      	b.n	800b290 <_ux_device_stack_alternate_setting_set+0x41c>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800af54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800af5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800af62:	785b      	ldrb	r3, [r3, #1]
 800af64:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800af68:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	f040 8181 	bne.w	800b274 <_ux_device_stack_alternate_setting_set+0x400>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 800af72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800af76:	2209      	movs	r2, #9
 800af78:	4983      	ldr	r1, [pc, #524]	; (800b188 <_ux_device_stack_alternate_setting_set+0x314>)
 800af7a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800af7e:	f001 fe69 	bl	800cc54 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800af82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	429a      	cmp	r2, r3
 800af88:	f040 8174 	bne.w	800b274 <_ux_device_stack_alternate_setting_set+0x400>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800af8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	429a      	cmp	r2, r3
 800af92:	f040 816f 	bne.w	800b274 <_ux_device_stack_alternate_setting_set+0x400>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800af96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800af9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 800afa0:	e028      	b.n	800aff4 <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800afa2:	2126      	movs	r1, #38	; 0x26
 800afa4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800afa8:	f001 fcca 	bl	800c940 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800afac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afb6:	210f      	movs	r1, #15
 800afb8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800afbc:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800afbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	67bb      	str	r3, [r7, #120]	; 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800afc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 800afce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afd2:	2200      	movs	r2, #0
 800afd4:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800afd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afda:	2200      	movs	r2, #0
 800afdc:	625a      	str	r2, [r3, #36]	; 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800afde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afe2:	2200      	movs	r2, #0
 800afe4:	629a      	str	r2, [r3, #40]	; 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800afe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afea:	2200      	movs	r2, #0
 800afec:	62da      	str	r2, [r3, #44]	; 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 800afee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 800aff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1d2      	bne.n	800afa2 <_ux_device_stack_alternate_setting_set+0x12e>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 800affc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b000:	2200      	movs	r2, #0
 800b002:	635a      	str	r2, [r3, #52]	; 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800b004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b010:	1a9b      	subs	r3, r3, r2
 800b012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                            device_framework +=  (ULONG) *device_framework;
 800b016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	461a      	mov	r2, r3
 800b01e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b022:	4413      	add	r3, r2
 800b024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800b028:	e0e7      	b.n	800b1fa <_ux_device_stack_alternate_setting_set+0x386>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800b02a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800b034:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b038:	785b      	ldrb	r3, [r3, #1]
 800b03a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 800b03e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b042:	2b05      	cmp	r3, #5
 800b044:	d009      	beq.n	800b05a <_ux_device_stack_alternate_setting_set+0x1e6>
 800b046:	2b05      	cmp	r3, #5
 800b048:	f300 80c8 	bgt.w	800b1dc <_ux_device_stack_alternate_setting_set+0x368>
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	f000 80c0 	beq.w	800b1d2 <_ux_device_stack_alternate_setting_set+0x35e>
 800b052:	2b04      	cmp	r3, #4
 800b054:	f000 80bd 	beq.w	800b1d2 <_ux_device_stack_alternate_setting_set+0x35e>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800b058:	e0c0      	b.n	800b1dc <_ux_device_stack_alternate_setting_set+0x368>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800b05a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b05e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800b066:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b06a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b06e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 800b072:	e013      	b.n	800b09c <_ux_device_stack_alternate_setting_set+0x228>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800b074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <_ux_device_stack_alternate_setting_set+0x214>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800b07e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b082:	2201      	movs	r2, #1
 800b084:	601a      	str	r2, [r3, #0]
                                            break;
 800b086:	e00d      	b.n	800b0a4 <_ux_device_stack_alternate_setting_set+0x230>
                                        endpoint++;
 800b088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b08c:	3390      	adds	r3, #144	; 0x90
 800b08e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                       endpoints_pool_number--; 
 800b092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b096:	3b01      	subs	r3, #1
 800b098:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 800b09c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e7      	bne.n	800b074 <_ux_device_stack_alternate_setting_set+0x200>
                                    if (endpoints_pool_number == 0)
 800b0a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <_ux_device_stack_alternate_setting_set+0x23c>
                                        return(UX_MEMORY_INSUFFICIENT);
 800b0ac:	2312      	movs	r3, #18
 800b0ae:	e109      	b.n	800b2c4 <_ux_device_stack_alternate_setting_set+0x450>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800b0b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0b4:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800b0b6:	2206      	movs	r2, #6
 800b0b8:	4934      	ldr	r1, [pc, #208]	; (800b18c <_ux_device_stack_alternate_setting_set+0x318>)
 800b0ba:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800b0be:	f001 fdc9 	bl	800cc54 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800b0c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0c6:	3330      	adds	r3, #48	; 0x30
 800b0c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800b0cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0d0:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 800b0d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800b0da:	4b29      	ldr	r3, [pc, #164]	; (800b180 <_ux_device_stack_alternate_setting_set+0x30c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d11c      	bne.n	800b120 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800b0e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d015      	beq.n	800b120 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800b0f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800b0fe:	67fb      	str	r3, [r7, #124]	; 0x7c
                                        if (n_trans)
 800b100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00c      	beq.n	800b120 <_ux_device_stack_alternate_setting_set+0x2ac>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800b106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b108:	0adb      	lsrs	r3, r3, #11
 800b10a:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            n_trans ++;
 800b10c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b10e:	3301      	adds	r3, #1
 800b110:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            max_transfer_length *= n_trans;
 800b112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b116:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b118:	fb02 f303 	mul.w	r3, r2, r3
 800b11c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800b120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b124:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b128:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800b12a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b12e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b132:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800b134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b138:	f04f 32ff 	mov.w	r2, #4294967295
 800b13c:	64da      	str	r2, [r3, #76]	; 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800b13e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b146:	629a      	str	r2, [r3, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 800b148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b14c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b150:	62da      	str	r2, [r3, #44]	; 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800b152:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b15c:	210e      	movs	r1, #14
 800b15e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800b162:	4798      	blx	r3
 800b164:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                                    if (status != UX_SUCCESS)
 800b168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00f      	beq.n	800b190 <_ux_device_stack_alternate_setting_set+0x31c>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800b170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b174:	2200      	movs	r2, #0
 800b176:	601a      	str	r2, [r3, #0]
                                        return(status);
 800b178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b17c:	e0a2      	b.n	800b2c4 <_ux_device_stack_alternate_setting_set+0x450>
 800b17e:	bf00      	nop
 800b180:	24004cf4 	.word	0x24004cf4
 800b184:	24000058 	.word	0x24000058
 800b188:	24000060 	.word	0x24000060
 800b18c:	24000040 	.word	0x24000040
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800b190:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b196:	2b00      	cmp	r3, #0
 800b198:	d105      	bne.n	800b1a6 <_ux_device_stack_alternate_setting_set+0x332>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800b19a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b19e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b1a2:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 800b1a4:	e01b      	b.n	800b1de <_ux_device_stack_alternate_setting_set+0x36a>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800b1a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800b1b0:	e004      	b.n	800b1bc <_ux_device_stack_alternate_setting_set+0x348>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800b1b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800b1bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1f5      	bne.n	800b1b2 <_ux_device_stack_alternate_setting_set+0x33e>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800b1c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b1ce:	625a      	str	r2, [r3, #36]	; 0x24
                                    break;
 800b1d0:	e005      	b.n	800b1de <_ux_device_stack_alternate_setting_set+0x36a>
                                    device_framework_length =  descriptor_length;
 800b1d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                                    break;
 800b1da:	e000      	b.n	800b1de <_ux_device_stack_alternate_setting_set+0x36a>
                                    break;
 800b1dc:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800b1de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 800b1ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                            while (device_framework_length != 0)
 800b1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f47f af13 	bne.w	800b02a <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800b204:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b208:	330c      	adds	r3, #12
 800b20a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800b20e:	2224      	movs	r2, #36	; 0x24
 800b210:	4618      	mov	r0, r3
 800b212:	f001 ff1a 	bl	800d04a <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800b216:	4b2d      	ldr	r3, [pc, #180]	; (800b2cc <_ux_device_stack_alternate_setting_set+0x458>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b21e:	6952      	ldr	r2, [r2, #20]
 800b220:	3258      	adds	r2, #88	; 0x58
 800b222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 800b22a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d004      	beq.n	800b23c <_ux_device_stack_alternate_setting_set+0x3c8>
 800b232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d101      	bne.n	800b240 <_ux_device_stack_alternate_setting_set+0x3cc>
                            {

                                return (UX_NO_CLASS_MATCH);
 800b23c:	2357      	movs	r3, #87	; 0x57
 800b23e:	e041      	b.n	800b2c4 <_ux_device_stack_alternate_setting_set+0x450>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800b240:	2306      	movs	r3, #6
 800b242:	60bb      	str	r3, [r7, #8]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800b244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b248:	613b      	str	r3, [r7, #16]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800b24a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b24e:	62bb      	str	r3, [r7, #40]	; 0x28
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 800b250:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b254:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b258:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800b25c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b262:	f107 0208 	add.w	r2, r7, #8
 800b266:	4610      	mov	r0, r2
 800b268:	4798      	blx	r3
 800b26a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

                            /* We are done here.  */
                            return(status); 
 800b26e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b272:	e027      	b.n	800b2c4 <_ux_device_stack_alternate_setting_set+0x450>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800b274:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800b282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b28a:	4413      	add	r3, r2
 800b28c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                while (device_framework_length != 0)
 800b290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b294:	2b00      	cmp	r3, #0
 800b296:	f47f ae5d 	bne.w	800af54 <_ux_device_stack_alternate_setting_set+0xe0>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 800b29a:	e012      	b.n	800b2c2 <_ux_device_stack_alternate_setting_set+0x44e>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800b29c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b2a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800b2aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b2ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    while (device_framework_length != 0)
 800b2b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f47f ae26 	bne.w	800af0e <_ux_device_stack_alternate_setting_set+0x9a>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800b2c2:	23ff      	movs	r3, #255	; 0xff
#endif
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	37b8      	adds	r7, #184	; 0xb8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	24004cf4 	.word	0x24004cf4

0800b2d0 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b094      	sub	sp, #80	; 0x50
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
 800b2dc:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	617b      	str	r3, [r7, #20]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800b2e2:	f107 0314 	add.w	r3, r7, #20
 800b2e6:	223f      	movs	r2, #63	; 0x3f
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f002 f891 	bl	800d412 <_ux_utility_string_length_check>
 800b2f0:	6478      	str	r0, [r7, #68]	; 0x44
    if (status)
 800b2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <_ux_device_stack_class_register+0x2c>
        return(status);
 800b2f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2fa:	e046      	b.n	800b38a <_ux_device_stack_class_register+0xba>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800b2fc:	4b25      	ldr	r3, [pc, #148]	; (800b394 <_ux_device_stack_class_register+0xc4>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b304:	64fb      	str	r3, [r7, #76]	; 0x4c

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800b306:	2300      	movs	r3, #0
 800b308:	64bb      	str	r3, [r7, #72]	; 0x48
 800b30a:	e036      	b.n	800b37a <_ux_device_stack_class_register+0xaa>
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800b30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b310:	2b00      	cmp	r3, #0
 800b312:	d12b      	bne.n	800b36c <_ux_device_stack_class_register+0x9c>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800b314:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	3301      	adds	r3, #1
 800b31a:	461a      	mov	r2, r3
 800b31c:	68f9      	ldr	r1, [r7, #12]
 800b31e:	f001 fe94 	bl	800d04a <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 800b322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	645a      	str	r2, [r3, #68]	; 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800b328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b32a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b32c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 800b330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800b338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800b340:	2305      	movs	r3, #5
 800b342:	61bb      	str	r3, [r7, #24]
            command.ux_slave_class_command_parameter  =  parameter;
 800b344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b346:	63fb      	str	r3, [r7, #60]	; 0x3c
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800b348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b34a:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 800b34c:	f107 0218 	add.w	r2, r7, #24
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	4610      	mov	r0, r2
 800b354:	4798      	blx	r3
 800b356:	6478      	str	r0, [r7, #68]	; 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 800b358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <_ux_device_stack_class_register+0x92>
                return(status);
 800b35e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b360:	e013      	b.n	800b38a <_ux_device_stack_class_register+0xba>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 800b362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b364:	2201      	movs	r2, #1
 800b366:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800b368:	2300      	movs	r3, #0
 800b36a:	e00e      	b.n	800b38a <_ux_device_stack_class_register+0xba>
        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
        /* Move to the next class.  */
        class_inst ++;
 800b36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b36e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800b372:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800b374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b376:	3301      	adds	r3, #1
 800b378:	64bb      	str	r3, [r7, #72]	; 0x48
 800b37a:	4b06      	ldr	r3, [pc, #24]	; (800b394 <_ux_device_stack_class_register+0xc4>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b384:	429a      	cmp	r2, r3
 800b386:	d3c1      	bcc.n	800b30c <_ux_device_stack_class_register+0x3c>
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 800b388:	2312      	movs	r3, #18
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3750      	adds	r7, #80	; 0x50
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	24004cf4 	.word	0x24004cf4

0800b398 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b08a      	sub	sp, #40	; 0x28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800b3a4:	4b2a      	ldr	r3, [pc, #168]	; (800b450 <_ux_device_stack_clear_feature+0xb8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b3aa:	4b29      	ldr	r3, [pc, #164]	; (800b450 <_ux_device_stack_clear_feature+0xb8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3320      	adds	r3, #32
 800b3b0:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	333c      	adds	r3, #60	; 0x3c
 800b3b6:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f003 0303 	and.w	r3, r3, #3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <_ux_device_stack_clear_feature+0x30>
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d011      	beq.n	800b3ea <_ux_device_stack_clear_feature+0x52>
 800b3c6:	e035      	b.n	800b434 <_ux_device_stack_clear_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d13a      	bne.n	800b444 <_ux_device_stack_clear_feature+0xac>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800b3ce:	4b20      	ldr	r3, [pc, #128]	; (800b450 <_ux_device_stack_clear_feature+0xb8>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d005      	beq.n	800b3e6 <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800b3da:	4b1d      	ldr	r3, [pc, #116]	; (800b450 <_ux_device_stack_clear_feature+0xb8>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 800b3e4:	e02e      	b.n	800b444 <_ux_device_stack_clear_feature+0xac>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800b3e6:	2354      	movs	r3, #84	; 0x54
 800b3e8:	e02e      	b.n	800b448 <_ux_device_stack_clear_feature+0xb0>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3f0:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800b3f2:	e01c      	b.n	800b42e <_ux_device_stack_clear_feature+0x96>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f8:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800b3fa:	e012      	b.n	800b422 <_ux_device_stack_clear_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	695b      	ldr	r3, [r3, #20]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	429a      	cmp	r2, r3
 800b404:	d10a      	bne.n	800b41c <_ux_device_stack_clear_feature+0x84>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	6a3a      	ldr	r2, [r7, #32]
 800b40c:	2110      	movs	r1, #16
 800b40e:	69f8      	ldr	r0, [r7, #28]
 800b410:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	2200      	movs	r2, #0
 800b416:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800b418:	2300      	movs	r3, #0
 800b41a:	e015      	b.n	800b448 <_ux_device_stack_clear_feature+0xb0>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b420:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e9      	bne.n	800b3fc <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1df      	bne.n	800b3f4 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	697a      	ldr	r2, [r7, #20]
 800b43a:	2114      	movs	r1, #20
 800b43c:	69f8      	ldr	r0, [r7, #28]
 800b43e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800b440:	2300      	movs	r3, #0
 800b442:	e001      	b.n	800b448 <_ux_device_stack_clear_feature+0xb0>
        break;
 800b444:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3728      	adds	r7, #40	; 0x28
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	24004cf4 	.word	0x24004cf4

0800b454 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b45a:	4b0f      	ldr	r3, [pc, #60]	; (800b498 <_ux_device_stack_configuration_get+0x44>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3320      	adds	r3, #32
 800b460:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	333c      	adds	r3, #60	; 0x3c
 800b466:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	3330      	adds	r3, #48	; 0x30
 800b46c:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800b478:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800b47a:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2203      	movs	r2, #3
 800b480:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800b482:	2201      	movs	r2, #1
 800b484:	2101      	movs	r1, #1
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f001 fa6c 	bl	800c964 <_ux_device_stack_transfer_request>
 800b48c:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 800b48e:	683b      	ldr	r3, [r7, #0]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	24004cf4 	.word	0x24004cf4

0800b49c <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b0ac      	sub	sp, #176	; 0xb0
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800b4a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f005 f9fd 	bl	80108ac <memset>
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
ULONG                           iad_number_interfaces =  0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800b4c4:	4bbc      	ldr	r3, [pc, #752]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b4cc:	4bba      	ldr	r3, [pc, #744]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3320      	adds	r3, #32
 800b4d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800b4dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d101      	bne.n	800b4ee <_ux_device_stack_configuration_set+0x52>
        return(UX_SUCCESS);
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e1a4      	b.n	800b838 <_ux_device_stack_configuration_set+0x39c>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800b4ee:	4bb2      	ldr	r3, [pc, #712]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800b4f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800b4fa:	4baf      	ldr	r3, [pc, #700]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800b502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800b506:	e027      	b.n	800b558 <_ux_device_stack_configuration_set+0xbc>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800b508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800b512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b516:	785b      	ldrb	r3, [r3, #1]
 800b518:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800b51c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b520:	2b02      	cmp	r3, #2
 800b522:	d10b      	bne.n	800b53c <_ux_device_stack_configuration_set+0xa0>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800b524:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b528:	2208      	movs	r2, #8
 800b52a:	49a4      	ldr	r1, [pc, #656]	; (800b7bc <_ux_device_stack_configuration_set+0x320>)
 800b52c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b530:	f001 fb90 	bl	800cc54 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800b534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d012      	beq.n	800b562 <_ux_device_stack_configuration_set+0xc6>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800b53c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800b54a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b54e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b552:	4413      	add	r3, r2
 800b554:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 800b558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1d3      	bne.n	800b508 <_ux_device_stack_configuration_set+0x6c>
 800b560:	e000      	b.n	800b564 <_ux_device_stack_configuration_set+0xc8>
                break;
 800b562:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 800b564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d104      	bne.n	800b576 <_ux_device_stack_configuration_set+0xda>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <_ux_device_stack_configuration_set+0xda>
        return(UX_ERROR);
 800b572:	23ff      	movs	r3, #255	; 0xff
 800b574:	e160      	b.n	800b838 <_ux_device_stack_configuration_set+0x39c>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800b576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b57a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d02d      	beq.n	800b5de <_ux_device_stack_configuration_set+0x142>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800b582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b58a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800b58e:	e022      	b.n	800b5d6 <_ux_device_stack_configuration_set+0x13a>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800b590:	2303      	movs	r3, #3
 800b592:	60bb      	str	r3, [r7, #8]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800b594:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b598:	613b      	str	r3, [r7, #16]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 800b59a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800b5a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5a8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 800b5aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d006      	beq.n	800b5c0 <_ux_device_stack_configuration_set+0x124>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 800b5b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b8:	f107 0208 	add.w	r2, r7, #8
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800b5c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c6:	67bb      	str	r3, [r7, #120]	; 0x78
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800b5c8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800b5cc:	f000 ff78 	bl	800c4c0 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800b5d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        while (interface_ptr != UX_NULL)
 800b5d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1d8      	bne.n	800b590 <_ux_device_stack_configuration_set+0xf4>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800b5de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800b5e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800b5f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	2113      	movs	r1, #19
 800b5fa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800b5fe:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <_ux_device_stack_configuration_set+0x16e>
        return(UX_SUCCESS);
 800b606:	2300      	movs	r3, #0
 800b608:	e116      	b.n	800b838 <_ux_device_stack_configuration_set+0x39c>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800b60a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 800b614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b618:	33d0      	adds	r3, #208	; 0xd0
    _ux_utility_descriptor_parse(device_framework,
 800b61a:	2208      	movs	r2, #8
 800b61c:	4967      	ldr	r1, [pc, #412]	; (800b7bc <_ux_device_stack_configuration_set+0x320>)
 800b61e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b622:	f001 fb17 	bl	800cc54 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800b626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d001      	beq.n	800b634 <_ux_device_stack_configuration_set+0x198>
 800b630:	2202      	movs	r2, #2
 800b632:	e000      	b.n	800b636 <_ux_device_stack_configuration_set+0x19a>
 800b634:	2201      	movs	r2, #1
 800b636:	4b60      	ldr	r3, [pc, #384]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800b63e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b640:	095a      	lsrs	r2, r3, #5
 800b642:	4b5d      	ldr	r3, [pc, #372]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f002 0201 	and.w	r2, r2, #1
 800b64a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800b64e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800b654:	e0de      	b.n	800b814 <_ux_device_stack_configuration_set+0x378>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800b656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800b660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b664:	785b      	ldrb	r3, [r3, #1]
 800b666:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800b66a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b66e:	2b0b      	cmp	r3, #11
 800b670:	d10e      	bne.n	800b690 <_ux_device_stack_configuration_set+0x1f4>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 800b672:	2301      	movs	r3, #1
 800b674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800b678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b67c:	3302      	adds	r3, #2
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800b684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b688:	3303      	adds	r3, #3
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800b690:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b694:	2b04      	cmp	r3, #4
 800b696:	f040 80af 	bne.w	800b7f8 <_ux_device_stack_configuration_set+0x35c>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800b69a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b69e:	2209      	movs	r2, #9
 800b6a0:	4947      	ldr	r1, [pc, #284]	; (800b7c0 <_ux_device_stack_configuration_set+0x324>)
 800b6a2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6a6:	f001 fad5 	bl	800cc54 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 800b6aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f040 80a3 	bne.w	800b7f8 <_ux_device_stack_configuration_set+0x35c>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 800b6b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d157      	bne.n	800b76a <_ux_device_stack_configuration_set+0x2ce>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800b6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d13d      	bne.n	800b740 <_ux_device_stack_configuration_set+0x2a4>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800b6c4:	4b3c      	ldr	r3, [pc, #240]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b6cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Parse all the class drivers.  */
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6d6:	e02a      	b.n	800b72e <_ux_device_stack_configuration_set+0x292>
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800b6d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d11a      	bne.n	800b718 <_ux_device_stack_configuration_set+0x27c>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800b6e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d113      	bne.n	800b718 <_ux_device_stack_configuration_set+0x27c>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800b6f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6f4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d10c      	bne.n	800b718 <_ux_device_stack_configuration_set+0x27c>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800b6fe:	4b2e      	ldr	r3, [pc, #184]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b704:	3258      	adds	r2, #88	; 0x58
 800b706:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800b70a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800b70e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                    /* We are done here.  */
                                    break;
 800b716:	e01b      	b.n	800b750 <_ux_device_stack_configuration_set+0x2b4>
                                }
                            }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                            /* Move to the next registered class.  */
                            class_inst ++;
 800b718:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b71c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800b720:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800b724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b728:	3301      	adds	r3, #1
 800b72a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b72e:	4b22      	ldr	r3, [pc, #136]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b736:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d3cc      	bcc.n	800b6d8 <_ux_device_stack_configuration_set+0x23c>
 800b73e:	e007      	b.n	800b750 <_ux_device_stack_configuration_set+0x2b4>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800b740:	4b1d      	ldr	r3, [pc, #116]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b746:	3258      	adds	r2, #88	; 0x58
 800b748:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800b74c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 800b750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b754:	3b01      	subs	r3, #1
 800b756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 800b75a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d143      	bne.n	800b7ea <_ux_device_stack_configuration_set+0x34e>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800b762:	2300      	movs	r3, #0
 800b764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b768:	e03f      	b.n	800b7ea <_ux_device_stack_configuration_set+0x34e>
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800b76a:	4b13      	ldr	r3, [pc, #76]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                    /* Parse all the class drivers.  */
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800b776:	2300      	movs	r3, #0
 800b778:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b77c:	e02d      	b.n	800b7da <_ux_device_stack_configuration_set+0x33e>
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800b77e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b784:	2b01      	cmp	r3, #1
 800b786:	d11d      	bne.n	800b7c4 <_ux_device_stack_configuration_set+0x328>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800b788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b78a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b78e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b792:	429a      	cmp	r2, r3
 800b794:	d116      	bne.n	800b7c4 <_ux_device_stack_configuration_set+0x328>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800b796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b79a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d10f      	bne.n	800b7c4 <_ux_device_stack_configuration_set+0x328>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800b7a4:	4b04      	ldr	r3, [pc, #16]	; (800b7b8 <_ux_device_stack_configuration_set+0x31c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7aa:	3258      	adds	r2, #88	; 0x58
 800b7ac:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800b7b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                /* We are done here.  */
                                break;
 800b7b4:	e019      	b.n	800b7ea <_ux_device_stack_configuration_set+0x34e>
 800b7b6:	bf00      	nop
 800b7b8:	24004cf4 	.word	0x24004cf4
 800b7bc:	24000058 	.word	0x24000058
 800b7c0:	24000060 	.word	0x24000060
                            }
                        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Move to the next registered class.  */
                        class_inst ++;
 800b7c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7c8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800b7cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800b7d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b7da:	4b19      	ldr	r3, [pc, #100]	; (800b840 <_ux_device_stack_configuration_set+0x3a4>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b7e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d3c9      	bcc.n	800b77e <_ux_device_stack_configuration_set+0x2e2>
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800b7f0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7f4:	f000 feac 	bl	800c550 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800b7f8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b800:	1ad3      	subs	r3, r2, r3
 800b802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800b806:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b80a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b80e:	4413      	add	r3, r2
 800b810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 800b814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f47f af1c 	bne.w	800b656 <_ux_device_stack_configuration_set+0x1ba>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800b81e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b822:	2203      	movs	r2, #3
 800b824:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800b826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	2203      	movs	r2, #3
 800b82e:	2113      	movs	r1, #19
 800b830:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800b834:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	37b0      	adds	r7, #176	; 0xb0
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	24004cf4 	.word	0x24004cf4

0800b844 <_ux_device_stack_control_request_process>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800b844:	b590      	push	{r4, r7, lr}
 800b846:	b09d      	sub	sp, #116	; 0x74
 800b848:	af02      	add	r7, sp, #8
 800b84a:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 800b84c:	23ff      	movs	r3, #255	; 0xff
 800b84e:	65fb      	str	r3, [r7, #92]	; 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800b850:	4b9e      	ldr	r3, [pc, #632]	; (800bacc <_ux_device_stack_control_request_process+0x288>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b856:	4b9d      	ldr	r3, [pc, #628]	; (800bacc <_ux_device_stack_control_request_process+0x288>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3320      	adds	r3, #32
 800b85c:	657b      	str	r3, [r7, #84]	; 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2b00      	cmp	r3, #0
 800b864:	f040 812c 	bne.w	800bac0 <_ux_device_stack_control_request_process+0x27c>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b86e:	667b      	str	r3, [r7, #100]	; 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b876:	653b      	str	r3, [r7, #80]	; 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3354      	adds	r3, #84	; 0x54
 800b87c:	3302      	adds	r3, #2
 800b87e:	4618      	mov	r0, r3
 800b880:	f001 fdaf 	bl	800d3e2 <_ux_utility_short_get>
 800b884:	64f8      	str	r0, [r7, #76]	; 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3354      	adds	r3, #84	; 0x54
 800b88a:	3304      	adds	r3, #4
 800b88c:	4618      	mov	r0, r3
 800b88e:	f001 fda8 	bl	800d3e2 <_ux_utility_short_get>
 800b892:	64b8      	str	r0, [r7, #72]	; 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3354      	adds	r3, #84	; 0x54
 800b898:	3306      	adds	r3, #6
 800b89a:	4618      	mov	r0, r3
 800b89c:	f001 fda1 	bl	800d3e2 <_ux_utility_short_get>
 800b8a0:	6478      	str	r0, [r7, #68]	; 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800b8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8a4:	2b06      	cmp	r3, #6
 800b8a6:	d002      	beq.n	800b8ae <_ux_device_stack_control_request_process+0x6a>
 800b8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8aa:	2b07      	cmp	r3, #7
 800b8ac:	d10d      	bne.n	800b8ca <_ux_device_stack_control_request_process+0x86>
 800b8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b0:	0a1b      	lsrs	r3, r3, #8
 800b8b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d007      	beq.n	800b8ca <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800b8ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8bc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b8c0:	667b      	str	r3, [r7, #100]	; 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 800b8c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8c4:	f043 0320 	orr.w	r3, r3, #32
 800b8c8:	667b      	str	r3, [r7, #100]	; 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800b8ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8d0:	2b40      	cmp	r3, #64	; 0x40
 800b8d2:	d134      	bne.n	800b93e <_ux_device_stack_control_request_process+0xfa>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 800b8d4:	4b7d      	ldr	r3, [pc, #500]	; (800bacc <_ux_device_stack_control_request_process+0x288>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b8dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d12d      	bne.n	800b93e <_ux_device_stack_control_request_process+0xfa>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800b8e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8e6:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800b8e8:	4b78      	ldr	r3, [pc, #480]	; (800bacc <_ux_device_stack_control_request_process+0x288>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f8d3 41cc 	ldr.w	r4, [r3, #460]	; 0x1cc
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	f107 020c 	add.w	r2, r7, #12
 800b8f8:	9201      	str	r2, [sp, #4]
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b900:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b902:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b904:	47a0      	blx	r4
 800b906:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 800b908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d110      	bne.n	800b930 <_ux_device_stack_control_request_process+0xec>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 800b90e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b910:	333c      	adds	r3, #60	; 0x3c
 800b912:	643b      	str	r3, [r7, #64]	; 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800b914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b916:	3330      	adds	r3, #48	; 0x30
 800b918:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2203      	movs	r2, #3
 800b91e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 f81c 	bl	800c964 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 800b92c:	2300      	movs	r3, #0
 800b92e:	e0c8      	b.n	800bac2 <_ux_device_stack_control_request_process+0x27e>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800b930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b932:	333c      	adds	r3, #60	; 0x3c
 800b934:	4618      	mov	r0, r3
 800b936:	f000 fb5b 	bl	800bff0 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 800b93a:	2300      	movs	r3, #0
 800b93c:	e0c1      	b.n	800bac2 <_ux_device_stack_control_request_process+0x27e>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800b93e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b944:	2b20      	cmp	r3, #32
 800b946:	d004      	beq.n	800b952 <_ux_device_stack_control_request_process+0x10e>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 800b948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b94a:	f003 0360 	and.w	r3, r3, #96	; 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800b94e:	2b40      	cmp	r3, #64	; 0x40
 800b950:	d14a      	bne.n	800b9e8 <_ux_device_stack_control_request_process+0x1a4>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800b952:	2304      	movs	r3, #4
 800b954:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800b956:	2300      	movs	r3, #0
 800b958:	663b      	str	r3, [r7, #96]	; 0x60
 800b95a:	e036      	b.n	800b9ca <_ux_device_stack_control_request_process+0x186>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800b95c:	4b5b      	ldr	r3, [pc, #364]	; (800bacc <_ux_device_stack_control_request_process+0x288>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b962:	3258      	adds	r2, #88	; 0x58
 800b964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b968:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 800b96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d026      	beq.n	800b9be <_ux_device_stack_control_request_process+0x17a>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800b970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b972:	f003 0303 	and.w	r3, r3, #3
 800b976:	2b01      	cmp	r3, #1
 800b978:	d114      	bne.n	800b9a4 <_ux_device_stack_control_request_process+0x160>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 800b97a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b980:	429a      	cmp	r2, r3
 800b982:	d11e      	bne.n	800b9c2 <_ux_device_stack_control_request_process+0x17e>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 800b984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b986:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b98a:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 800b98c:	2b07      	cmp	r3, #7
 800b98e:	d109      	bne.n	800b9a4 <_ux_device_stack_control_request_process+0x160>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 800b990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b992:	2b00      	cmp	r3, #0
 800b994:	d106      	bne.n	800b9a4 <_ux_device_stack_control_request_process+0x160>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b99c:	461a      	mov	r2, r3
                         (request == 0x00) &&
 800b99e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d10e      	bne.n	800b9c2 <_ux_device_stack_control_request_process+0x17e>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 800b9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a6:	633b      	str	r3, [r7, #48]	; 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800b9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ac:	f107 0210 	add.w	r2, r7, #16
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4798      	blx	r3
 800b9b4:	65f8      	str	r0, [r7, #92]	; 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 800b9b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00a      	beq.n	800b9d2 <_ux_device_stack_control_request_process+0x18e>
 800b9bc:	e002      	b.n	800b9c4 <_ux_device_stack_control_request_process+0x180>
                    continue;
 800b9be:	bf00      	nop
 800b9c0:	e000      	b.n	800b9c4 <_ux_device_stack_control_request_process+0x180>
                        continue;
 800b9c2:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800b9c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	663b      	str	r3, [r7, #96]	; 0x60
 800b9ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9cc:	2b0f      	cmp	r3, #15
 800b9ce:	d9c5      	bls.n	800b95c <_ux_device_stack_control_request_process+0x118>
 800b9d0:	e000      	b.n	800b9d4 <_ux_device_stack_control_request_process+0x190>

                    /* We are done, break the loop!  */
                    break;
 800b9d2:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 800b9d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d004      	beq.n	800b9e4 <_ux_device_stack_control_request_process+0x1a0>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800b9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9dc:	333c      	adds	r3, #60	; 0x3c
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f000 fb06 	bl	800bff0 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 800b9e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9e6:	e06c      	b.n	800bac2 <_ux_device_stack_control_request_process+0x27e>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 800b9e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ea:	2b0c      	cmp	r3, #12
 800b9ec:	d85d      	bhi.n	800baaa <_ux_device_stack_control_request_process+0x266>
 800b9ee:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <_ux_device_stack_control_request_process+0x1b0>)
 800b9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f4:	0800ba29 	.word	0x0800ba29
 800b9f8:	0800ba37 	.word	0x0800ba37
 800b9fc:	0800baab 	.word	0x0800baab
 800ba00:	0800ba45 	.word	0x0800ba45
 800ba04:	0800baab 	.word	0x0800baab
 800ba08:	0800ba53 	.word	0x0800ba53
 800ba0c:	0800ba69 	.word	0x0800ba69
 800ba10:	0800ba77 	.word	0x0800ba77
 800ba14:	0800ba7d 	.word	0x0800ba7d
 800ba18:	0800ba85 	.word	0x0800ba85
 800ba1c:	0800ba8f 	.word	0x0800ba8f
 800ba20:	0800ba99 	.word	0x0800ba99
 800ba24:	0800baa5 	.word	0x0800baa5
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800ba28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba2c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ba2e:	f000 fb17 	bl	800c060 <_ux_device_stack_get_status>
 800ba32:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800ba34:	e03c      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800ba36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ba3a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ba3c:	f7ff fcac 	bl	800b398 <_ux_device_stack_clear_feature>
 800ba40:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800ba42:	e035      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800ba44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba46:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ba48:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ba4a:	f000 fee3 	bl	800c814 <_ux_device_stack_set_feature>
 800ba4e:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800ba50:	e02e      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 800ba52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba56:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800ba58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba5e:	2111      	movs	r1, #17
 800ba60:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ba62:	4798      	blx	r3
 800ba64:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800ba66:	e023      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800ba68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba6e:	f000 f82f 	bl	800bad0 <_ux_device_stack_descriptor_send>
 800ba72:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800ba74:	e01c      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800ba76:	2354      	movs	r3, #84	; 0x54
 800ba78:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800ba7a:	e019      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800ba7c:	f7ff fcea 	bl	800b454 <_ux_device_stack_configuration_get>
 800ba80:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800ba82:	e015      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800ba84:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba86:	f7ff fd09 	bl	800b49c <_ux_device_stack_configuration_set>
 800ba8a:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800ba8c:	e010      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 800ba8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ba90:	f7ff f9b2 	bl	800adf8 <_ux_device_stack_alternate_setting_get>
 800ba94:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800ba96:	e00b      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800ba98:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ba9a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ba9c:	f7ff f9ea 	bl	800ae74 <_ux_device_stack_alternate_setting_set>
 800baa0:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800baa2:	e005      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 800baa4:	2300      	movs	r3, #0
 800baa6:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800baa8:	e002      	b.n	800bab0 <_ux_device_stack_control_request_process+0x26c>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 800baaa:	2354      	movs	r3, #84	; 0x54
 800baac:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800baae:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 800bab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d004      	beq.n	800bac0 <_ux_device_stack_control_request_process+0x27c>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800bab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bab8:	333c      	adds	r3, #60	; 0x3c
 800baba:	4618      	mov	r0, r3
 800babc:	f000 fa98 	bl	800bff0 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 800bac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	376c      	adds	r7, #108	; 0x6c
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd90      	pop	{r4, r7, pc}
 800baca:	bf00      	nop
 800bacc:	24004cf4 	.word	0x24004cf4

0800bad0 <_ux_device_stack_descriptor_send>:
/*                                            internal clean up,          */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b0a2      	sub	sp, #136	; 0x88
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 800badc:	2300      	movs	r3, #0
 800bade:	677b      	str	r3, [r7, #116]	; 0x74
UINT                            status =  UX_ERROR;
 800bae0:	23ff      	movs	r3, #255	; 0xff
 800bae2:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800bae4:	4ba4      	ldr	r3, [pc, #656]	; (800bd78 <_ux_device_stack_descriptor_send+0x2a8>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800baea:	4ba3      	ldr	r3, [pc, #652]	; (800bd78 <_ux_device_stack_descriptor_send+0x2a8>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3320      	adds	r3, #32
 800baf0:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800baf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800baf4:	333c      	adds	r3, #60	; 0x3c
 800baf6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800baf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bafa:	3330      	adds	r3, #48	; 0x30
 800bafc:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800bafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb00:	2203      	movs	r2, #3
 800bb02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	0a1b      	lsrs	r3, r3, #8
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	2b0e      	cmp	r3, #14
 800bb22:	f200 81f8 	bhi.w	800bf16 <_ux_device_stack_descriptor_send+0x446>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <_ux_device_stack_descriptor_send+0x5c>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb69 	.word	0x0800bb69
 800bb30:	0800bc0d 	.word	0x0800bc0d
 800bb34:	0800bd49 	.word	0x0800bd49
 800bb38:	0800bf17 	.word	0x0800bf17
 800bb3c:	0800bf17 	.word	0x0800bf17
 800bb40:	0800bb73 	.word	0x0800bb73
 800bb44:	0800bc0d 	.word	0x0800bc0d
 800bb48:	0800bf17 	.word	0x0800bf17
 800bb4c:	0800bb83 	.word	0x0800bb83
 800bb50:	0800bf17 	.word	0x0800bf17
 800bb54:	0800bf17 	.word	0x0800bf17
 800bb58:	0800bf17 	.word	0x0800bf17
 800bb5c:	0800bf17 	.word	0x0800bf17
 800bb60:	0800bf17 	.word	0x0800bf17
 800bb64:	0800bc0d 	.word	0x0800bc0d
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b12      	cmp	r3, #18
 800bb6c:	d901      	bls.n	800bb72 <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800bb6e:	2312      	movs	r3, #18
 800bb70:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b06      	cmp	r3, #6
 800bb76:	d104      	bne.n	800bb82 <_ux_device_stack_descriptor_send+0xb2>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b0a      	cmp	r3, #10
 800bb7c:	d901      	bls.n	800bb82 <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800bb7e:	230a      	movs	r3, #10
 800bb80:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2b09      	cmp	r3, #9
 800bb86:	d104      	bne.n	800bb92 <_ux_device_stack_descriptor_send+0xc2>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b05      	cmp	r3, #5
 800bb8c:	d901      	bls.n	800bb92 <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800bb8e:	2305      	movs	r3, #5
 800bb90:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800bb92:	4b79      	ldr	r3, [pc, #484]	; (800bd78 <_ux_device_stack_descriptor_send+0x2a8>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800bb9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800bb9e:	4b76      	ldr	r3, [pc, #472]	; (800bd78 <_ux_device_stack_descriptor_send+0x2a8>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800bba6:	67bb      	str	r3, [r7, #120]	; 0x78
        device_framework_end = device_framework + device_framework_length;
 800bba8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bbac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbae:	4413      	add	r3, r2
 800bbb0:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800bbb2:	e025      	b.n	800bc00 <_ux_device_stack_descriptor_send+0x130>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800bbb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	647b      	str	r3, [r7, #68]	; 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800bbbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d10f      	bne.n	800bbec <_ux_device_stack_descriptor_send+0x11c>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800bbcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bbd2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f001 fa37 	bl	800d04a <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bbe0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bbe2:	f000 febf 	bl	800c964 <_ux_device_stack_transfer_request>
 800bbe6:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 800bbe8:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800bbea:	e19f      	b.n	800bf2c <_ux_device_stack_descriptor_send+0x45c>
            device_framework_length -=  descriptor_length;
 800bbec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bbee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework +=  descriptor_length;
 800bbf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bbf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 800bc00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d3d4      	bcc.n	800bbb4 <_ux_device_stack_descriptor_send+0xe4>
        break;
 800bc0a:	e18f      	b.n	800bf2c <_ux_device_stack_descriptor_send+0x45c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b07      	cmp	r3, #7
 800bc10:	d110      	bne.n	800bc34 <_ux_device_stack_descriptor_send+0x164>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800bc12:	4b59      	ldr	r3, [pc, #356]	; (800bd78 <_ux_device_stack_descriptor_send+0x2a8>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800bc1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800bc1e:	4b56      	ldr	r3, [pc, #344]	; (800bd78 <_ux_device_stack_descriptor_send+0x2a8>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bc26:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 800bc28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc2e:	4413      	add	r3, r2
 800bc30:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc32:	e051      	b.n	800bcd8 <_ux_device_stack_descriptor_send+0x208>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800bc34:	4b50      	ldr	r3, [pc, #320]	; (800bd78 <_ux_device_stack_descriptor_send+0x2a8>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800bc3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800bc40:	4b4d      	ldr	r3, [pc, #308]	; (800bd78 <_ux_device_stack_descriptor_send+0x2a8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800bc48:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 800bc4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc50:	4413      	add	r3, r2
 800bc52:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800bc54:	e040      	b.n	800bcd8 <_ux_device_stack_descriptor_send+0x208>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800bc56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	647b      	str	r3, [r7, #68]	; 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b0f      	cmp	r3, #15
 800bc62:	d112      	bne.n	800bc8a <_ux_device_stack_descriptor_send+0x1ba>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800bc64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc68:	3301      	adds	r3, #1
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	2b0f      	cmp	r3, #15
 800bc6e:	d129      	bne.n	800bcc4 <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800bc70:	f107 0314 	add.w	r3, r7, #20
 800bc74:	2204      	movs	r2, #4
 800bc76:	4941      	ldr	r1, [pc, #260]	; (800bd7c <_ux_device_stack_descriptor_send+0x2ac>)
 800bc78:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800bc7c:	f000 ffea 	bl	800cc54 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800bc84:	2300      	movs	r3, #0
 800bc86:	673b      	str	r3, [r7, #112]	; 0x70
                    break;
 800bc88:	e02b      	b.n	800bce2 <_ux_device_stack_descriptor_send+0x212>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800bc8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc8e:	3301      	adds	r3, #1
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d116      	bne.n	800bcc4 <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800bc96:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d10c      	bne.n	800bcba <_ux_device_stack_descriptor_send+0x1ea>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800bca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bca4:	2208      	movs	r2, #8
 800bca6:	4936      	ldr	r1, [pc, #216]	; (800bd80 <_ux_device_stack_descriptor_send+0x2b0>)
 800bca8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800bcac:	f000 ffd2 	bl	800cc54 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 800bcb8:	e013      	b.n	800bce2 <_ux_device_stack_descriptor_send+0x212>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800bcba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800bcc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bcc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800bccc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcd2:	4413      	add	r3, r2
 800bcd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 800bcd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d3b9      	bcc.n	800bc56 <_ux_device_stack_descriptor_send+0x186>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800bce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f040 811e 	bne.w	800bf26 <_ux_device_stack_descriptor_send+0x456>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800bcea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d202      	bcs.n	800bcf8 <_ux_device_stack_descriptor_send+0x228>
                length =  target_descriptor_length;
 800bcf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bcf6:	e001      	b.n	800bcfc <_ux_device_stack_descriptor_send+0x22c>
            else
                length =  host_length;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800bcfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd02:	d90c      	bls.n	800bd1e <_ux_device_stack_descriptor_send+0x24e>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800bd04:	2212      	movs	r2, #18
 800bd06:	2109      	movs	r1, #9
 800bd08:	2002      	movs	r0, #2
 800bd0a:	f000 feb5 	bl	800ca78 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800bd0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd14:	2114      	movs	r1, #20
 800bd16:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bd18:	4798      	blx	r3
 800bd1a:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 800bd1c:	e106      	b.n	800bf2c <_ux_device_stack_descriptor_send+0x45c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800bd1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd24:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f001 f98e 	bl	800d04a <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800bd2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	3301      	adds	r3, #1
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	b2d2      	uxtb	r2, r2
 800bd38:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bd3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bd40:	f000 fe10 	bl	800c964 <_ux_device_stack_transfer_request>
 800bd44:	6738      	str	r0, [r7, #112]	; 0x70
        }
        break;
 800bd46:	e0ee      	b.n	800bf26 <_ux_device_stack_descriptor_send+0x456>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800bd48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d14f      	bne.n	800bdee <_ux_device_stack_descriptor_send+0x31e>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800bd4e:	4b0a      	ldr	r3, [pc, #40]	; (800bd78 <_ux_device_stack_descriptor_send+0x2a8>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bd56:	3302      	adds	r3, #2
 800bd58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd5c:	d912      	bls.n	800bd84 <_ux_device_stack_descriptor_send+0x2b4>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800bd5e:	2212      	movs	r2, #18
 800bd60:	2109      	movs	r1, #9
 800bd62:	2002      	movs	r0, #2
 800bd64:	f000 fe88 	bl	800ca78 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800bd68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd6a:	699b      	ldr	r3, [r3, #24]
 800bd6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd6e:	2114      	movs	r1, #20
 800bd70:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bd72:	4798      	blx	r3
 800bd74:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 800bd76:	e0d9      	b.n	800bf2c <_ux_device_stack_descriptor_send+0x45c>
 800bd78:	24004cf4 	.word	0x24004cf4
 800bd7c:	2400006c 	.word	0x2400006c
 800bd80:	24000058 	.word	0x24000058
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800bd84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800bd8a:	4b6b      	ldr	r3, [pc, #428]	; (800bf38 <_ux_device_stack_descriptor_send+0x468>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	3302      	adds	r3, #2
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd9a:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800bd9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd9e:	3301      	adds	r3, #1
 800bda0:	2203      	movs	r2, #3
 800bda2:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800bda4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bda6:	1c98      	adds	r0, r3, #2
 800bda8:	4b63      	ldr	r3, [pc, #396]	; (800bf38 <_ux_device_stack_descriptor_send+0x468>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800bdb0:	4b61      	ldr	r3, [pc, #388]	; (800bf38 <_ux_device_stack_descriptor_send+0x468>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800bdb4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bdb8:	461a      	mov	r2, r3
 800bdba:	f001 f946 	bl	800d04a <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800bdbe:	4b5e      	ldr	r3, [pc, #376]	; (800bf38 <_ux_device_stack_descriptor_send+0x468>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bdc6:	3302      	adds	r3, #2
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d906      	bls.n	800bddc <_ux_device_stack_descriptor_send+0x30c>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800bdce:	4b5a      	ldr	r3, [pc, #360]	; (800bf38 <_ux_device_stack_descriptor_send+0x468>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bdd6:	3302      	adds	r3, #2
 800bdd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdda:	e001      	b.n	800bde0 <_ux_device_stack_descriptor_send+0x310>
            else
                length =  host_length;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bde4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bde6:	f000 fdbd 	bl	800c964 <_ux_device_stack_transfer_request>
 800bdea:	6738      	str	r0, [r7, #112]	; 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800bdec:	e09d      	b.n	800bf2a <_ux_device_stack_descriptor_send+0x45a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800bdee:	4b52      	ldr	r3, [pc, #328]	; (800bf38 <_ux_device_stack_descriptor_send+0x468>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bdf6:	66bb      	str	r3, [r7, #104]	; 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800bdf8:	4b4f      	ldr	r3, [pc, #316]	; (800bf38 <_ux_device_stack_descriptor_send+0x468>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800be00:	667b      	str	r3, [r7, #100]	; 0x64
            while (string_framework_length != 0)
 800be02:	e07a      	b.n	800befa <_ux_device_stack_descriptor_send+0x42a>
                if (_ux_utility_short_get(string_framework) == request_index)
 800be04:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800be06:	f001 faec 	bl	800d3e2 <_ux_utility_short_get>
 800be0a:	4602      	mov	r2, r0
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	4293      	cmp	r3, r2
 800be10:	d164      	bne.n	800bedc <_ux_device_stack_descriptor_send+0x40c>
                    if (*(string_framework + 2) == descriptor_index)
 800be12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be14:	3302      	adds	r3, #2
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d15d      	bne.n	800bedc <_ux_device_stack_descriptor_send+0x40c>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800be20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be22:	3303      	adds	r3, #3
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	3301      	adds	r3, #1
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be2e:	dd0c      	ble.n	800be4a <_ux_device_stack_descriptor_send+0x37a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800be30:	2212      	movs	r2, #18
 800be32:	2109      	movs	r1, #9
 800be34:	2002      	movs	r0, #2
 800be36:	f000 fe1f 	bl	800ca78 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800be3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be40:	2114      	movs	r1, #20
 800be42:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800be44:	4798      	blx	r3
 800be46:	6738      	str	r0, [r7, #112]	; 0x70
                            break;
 800be48:	e05a      	b.n	800bf00 <_ux_device_stack_descriptor_send+0x430>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800be4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	64bb      	str	r3, [r7, #72]	; 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800be50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be52:	3303      	adds	r3, #3
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	3301      	adds	r3, #1
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be60:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800be62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be64:	3301      	adds	r3, #1
 800be66:	2203      	movs	r2, #3
 800be68:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800be6a:	2300      	movs	r3, #0
 800be6c:	663b      	str	r3, [r7, #96]	; 0x60
 800be6e:	e015      	b.n	800be9c <_ux_device_stack_descriptor_send+0x3cc>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800be70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be72:	3304      	adds	r3, #4
 800be74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be76:	441a      	add	r2, r3
 800be78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be7a:	3301      	adds	r3, #1
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800be80:	440b      	add	r3, r1
 800be82:	7812      	ldrb	r2, [r2, #0]
 800be84:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800be86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be88:	3301      	adds	r3, #1
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	3301      	adds	r3, #1
 800be8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be90:	4413      	add	r3, r2
 800be92:	2200      	movs	r2, #0
 800be94:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800be96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be98:	3301      	adds	r3, #1
 800be9a:	663b      	str	r3, [r7, #96]	; 0x60
 800be9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be9e:	3303      	adds	r3, #3
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d3e2      	bcc.n	800be70 <_ux_device_stack_descriptor_send+0x3a0>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800beaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beac:	3303      	adds	r3, #3
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	3301      	adds	r3, #1
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	461a      	mov	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4293      	cmp	r3, r2
 800beba:	d906      	bls.n	800beca <_ux_device_stack_descriptor_send+0x3fa>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800bebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bebe:	3303      	adds	r3, #3
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	3301      	adds	r3, #1
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bec8:	e001      	b.n	800bece <_ux_device_stack_descriptor_send+0x3fe>
                            length =  host_length;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	66fb      	str	r3, [r7, #108]	; 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bed2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bed4:	f000 fd46 	bl	800c964 <_ux_device_stack_transfer_request>
 800bed8:	6738      	str	r0, [r7, #112]	; 0x70
                        break;
 800beda:	e011      	b.n	800bf00 <_ux_device_stack_descriptor_send+0x430>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800bedc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bede:	3303      	adds	r3, #3
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bee6:	1a9b      	subs	r3, r3, r2
 800bee8:	3b04      	subs	r3, #4
 800beea:	667b      	str	r3, [r7, #100]	; 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800beec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beee:	3303      	adds	r3, #3
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	3304      	adds	r3, #4
 800bef4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bef6:	4413      	add	r3, r2
 800bef8:	66bb      	str	r3, [r7, #104]	; 0x68
            while (string_framework_length != 0)
 800befa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800befc:	2b00      	cmp	r3, #0
 800befe:	d181      	bne.n	800be04 <_ux_device_stack_descriptor_send+0x334>
            if (string_framework_length == 0)
 800bf00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d111      	bne.n	800bf2a <_ux_device_stack_descriptor_send+0x45a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800bf06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf0c:	2114      	movs	r1, #20
 800bf0e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bf10:	4798      	blx	r3
                return(UX_ERROR);
 800bf12:	23ff      	movs	r3, #255	; 0xff
 800bf14:	e00b      	b.n	800bf2e <_ux_device_stack_descriptor_send+0x45e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800bf16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf1c:	2114      	movs	r1, #20
 800bf1e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bf20:	4798      	blx	r3
        return(UX_ERROR);
 800bf22:	23ff      	movs	r3, #255	; 0xff
 800bf24:	e003      	b.n	800bf2e <_ux_device_stack_descriptor_send+0x45e>
        break;
 800bf26:	bf00      	nop
 800bf28:	e000      	b.n	800bf2c <_ux_device_stack_descriptor_send+0x45c>
        break;
 800bf2a:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 800bf2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3788      	adds	r7, #136	; 0x88
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	24004cf4 	.word	0x24004cf4

0800bf3c <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b092      	sub	sp, #72	; 0x48
 800bf40:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800bf42:	23ff      	movs	r3, #255	; 0xff
 800bf44:	643b      	str	r3, [r7, #64]	; 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800bf46:	4b29      	ldr	r3, [pc, #164]	; (800bfec <_ux_device_stack_disconnect+0xb0>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800bf4c:	4b27      	ldr	r3, [pc, #156]	; (800bfec <_ux_device_stack_disconnect+0xb0>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	3320      	adds	r3, #32
 800bf52:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d123      	bne.n	800bfa4 <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf62:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800bf64:	e018      	b.n	800bf98 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800bf66:	2303      	movs	r3, #3
 800bf68:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800bf6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf6c:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800bf6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800bf74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf76:	627b      	str	r3, [r7, #36]	; 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d004      	beq.n	800bf88 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800bf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf82:	1d3a      	adds	r2, r7, #4
 800bf84:	4610      	mov	r0, r2
 800bf86:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800bf88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800bf8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bf90:	f000 fa96 	bl	800c4c0 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800bf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf96:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface_ptr != UX_NULL)
 800bf98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1e3      	bne.n	800bf66 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d107      	bne.n	800bfbc <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800bfac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfae:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800bfb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfb2:	323c      	adds	r2, #60	; 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800bfb4:	210f      	movs	r1, #15
 800bfb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bfb8:	4798      	blx	r3
 800bfba:	6438      	str	r0, [r7, #64]	; 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800bfca:	4b08      	ldr	r3, [pc, #32]	; (800bfec <_ux_device_stack_disconnect+0xb0>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d005      	beq.n	800bfe2 <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800bfd6:	4b05      	ldr	r3, [pc, #20]	; (800bfec <_ux_device_stack_disconnect+0xb0>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800bfde:	200a      	movs	r0, #10
 800bfe0:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800bfe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3748      	adds	r7, #72	; 0x48
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	24004cf4 	.word	0x24004cf4

0800bff0 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800bff8:	4b18      	ldr	r3, [pc, #96]	; (800c05c <_ux_device_stack_endpoint_stall+0x6c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800bffe:	23ff      	movs	r3, #255	; 0xff
 800c000:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c002:	f3ef 8310 	mrs	r3, PRIMASK
 800c006:	613b      	str	r3, [r7, #16]
    return(posture);
 800c008:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800c00a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c00c:	b672      	cpsid	i
    return(int_posture);
 800c00e:	68fb      	ldr	r3, [r7, #12]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800c010:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800c012:	4b12      	ldr	r3, [pc, #72]	; (800c05c <_ux_device_stack_endpoint_stall+0x6c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d013      	beq.n	800c044 <_ux_device_stack_endpoint_stall+0x54>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800c020:	2b02      	cmp	r3, #2
 800c022:	d00f      	beq.n	800c044 <_ux_device_stack_endpoint_stall+0x54>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	2114      	movs	r1, #20
 800c02c:	69b8      	ldr	r0, [r7, #24]
 800c02e:	4798      	blx	r3
 800c030:	61f8      	str	r0, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	f003 0303 	and.w	r3, r3, #3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d002      	beq.n	800c044 <_ux_device_stack_endpoint_stall+0x54>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2202      	movs	r2, #2
 800c042:	605a      	str	r2, [r3, #4]
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	f383 8810 	msr	PRIMASK, r3
}
 800c04e:	bf00      	nop

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 800c050:	69fb      	ldr	r3, [r7, #28]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3720      	adds	r7, #32
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	24004cf4 	.word	0x24004cf4

0800c060 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08a      	sub	sp, #40	; 0x28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c06c:	4b39      	ldr	r3, [pc, #228]	; (800c154 <_ux_device_stack_get_status+0xf4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c072:	4b38      	ldr	r3, [pc, #224]	; (800c154 <_ux_device_stack_get_status+0xf4>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3320      	adds	r3, #32
 800c078:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	333c      	adds	r3, #60	; 0x3c
 800c07e:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	3330      	adds	r3, #48	; 0x30
 800c084:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	2200      	movs	r2, #0
 800c08c:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	3301      	adds	r3, #1
 800c094:	2200      	movs	r2, #0
 800c096:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800c098:	2302      	movs	r3, #2
 800c09a:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f003 0303 	and.w	r3, r3, #3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <_ux_device_stack_get_status+0x4c>
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d021      	beq.n	800c0ee <_ux_device_stack_get_status+0x8e>
 800c0aa:	e03a      	b.n	800c122 <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800c0b2:	d102      	bne.n	800c0ba <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	627b      	str	r3, [r7, #36]	; 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800c0b8:	e03b      	b.n	800c132 <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800c0ba:	4b26      	ldr	r3, [pc, #152]	; (800c154 <_ux_device_stack_get_status+0xf4>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d103      	bne.n	800c0ce <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800c0ce:	4b21      	ldr	r3, [pc, #132]	; (800c154 <_ux_device_stack_get_status+0xf4>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d02b      	beq.n	800c132 <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	781a      	ldrb	r2, [r3, #0]
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	f042 0202 	orr.w	r2, r2, #2
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	701a      	strb	r2, [r3, #0]
        break;
 800c0ec:	e021      	b.n	800c132 <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800c0ee:	6a3b      	ldr	r3, [r7, #32]
 800c0f0:	699b      	ldr	r3, [r3, #24]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	2115      	movs	r1, #21
 800c0f6:	6a38      	ldr	r0, [r7, #32]
 800c0f8:	4798      	blx	r3
 800c0fa:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	2bff      	cmp	r3, #255	; 0xff
 800c100:	d007      	beq.n	800c112 <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d116      	bne.n	800c136 <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800c110:	e011      	b.n	800c136 <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c112:	6a3b      	ldr	r3, [r7, #32]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	69ba      	ldr	r2, [r7, #24]
 800c118:	2114      	movs	r1, #20
 800c11a:	6a38      	ldr	r0, [r7, #32]
 800c11c:	4798      	blx	r3
            return(UX_SUCCESS);            
 800c11e:	2300      	movs	r3, #0
 800c120:	e014      	b.n	800c14c <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c122:	6a3b      	ldr	r3, [r7, #32]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	69ba      	ldr	r2, [r7, #24]
 800c128:	2114      	movs	r1, #20
 800c12a:	6a38      	ldr	r0, [r7, #32]
 800c12c:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800c12e:	2300      	movs	r3, #0
 800c130:	e00c      	b.n	800c14c <_ux_device_stack_get_status+0xec>
        break;
 800c132:	bf00      	nop
 800c134:	e000      	b.n	800c138 <_ux_device_stack_get_status+0xd8>
        break;
 800c136:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	2203      	movs	r2, #3
 800c13c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800c13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c142:	6978      	ldr	r0, [r7, #20]
 800c144:	f000 fc0e 	bl	800c964 <_ux_device_stack_transfer_request>
 800c148:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 800c14a:	693b      	ldr	r3, [r7, #16]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3728      	adds	r7, #40	; 0x28
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	24004cf4 	.word	0x24004cf4

0800c158 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b094      	sub	sp, #80	; 0x50
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
 800c164:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c166:	4b95      	ldr	r3, [pc, #596]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	3320      	adds	r3, #32
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 800c16e:	4b93      	ldr	r3, [pc, #588]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800c178:	4b90      	ldr	r3, [pc, #576]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 800c182:	4b8e      	ldr	r3, [pc, #568]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800c18c:	4b8b      	ldr	r3, [pc, #556]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	683a      	ldr	r2, [r7, #0]
 800c192:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800c196:	4b89      	ldr	r3, [pc, #548]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c19c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800c1a0:	4b86      	ldr	r3, [pc, #536]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1a6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800c1aa:	4b84      	ldr	r3, [pc, #528]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1b0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800c1b4:	4b81      	ldr	r3, [pc, #516]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1ba:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 800c1be:	4b7f      	ldr	r3, [pc, #508]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800c1c8:	4b7c      	ldr	r3, [pc, #496]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c1ce:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800c1d2:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	2000      	movs	r0, #0
 800c1da:	f000 fe0d 	bl	800cdf8 <_ux_utility_memory_allocate>
 800c1de:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 800c1e0:	6a3b      	ldr	r3, [r7, #32]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <_ux_device_stack_initialize+0x92>
        return(UX_MEMORY_INSUFFICIENT);
 800c1e6:	2312      	movs	r3, #18
 800c1e8:	e161      	b.n	800c4ae <_ux_device_stack_initialize+0x356>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800c1ea:	4b74      	ldr	r3, [pc, #464]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	6a3a      	ldr	r2, [r7, #32]
 800c1f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	336c      	adds	r3, #108	; 0x6c
 800c1f8:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800c1fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1fe:	2101      	movs	r1, #1
 800c200:	2000      	movs	r0, #0
 800c202:	f000 fdf9 	bl	800cdf8 <_ux_utility_memory_allocate>
 800c206:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d102      	bne.n	800c21a <_ux_device_stack_initialize+0xc2>
        status = UX_MEMORY_INSUFFICIENT;
 800c214:	2312      	movs	r3, #18
 800c216:	64bb      	str	r3, [r7, #72]	; 0x48
 800c218:	e001      	b.n	800c21e <_ux_device_stack_initialize+0xc6>
    else
        status = UX_SUCCESS;
 800c21a:	2300      	movs	r3, #0
 800c21c:	64bb      	str	r3, [r7, #72]	; 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 800c21e:	2300      	movs	r3, #0
 800c220:	647b      	str	r3, [r7, #68]	; 0x44
    endpoints_found                    =  0;
 800c222:	2300      	movs	r3, #0
 800c224:	643b      	str	r3, [r7, #64]	; 0x40
    max_interface_number               =  0;
 800c226:	2300      	movs	r3, #0
 800c228:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 800c22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f040 8090 	bne.w	800c352 <_ux_device_stack_initialize+0x1fa>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800c232:	4b62      	ldr	r3, [pc, #392]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c23a:	62fb      	str	r3, [r7, #44]	; 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800c23c:	4b5f      	ldr	r3, [pc, #380]	; (800c3bc <_ux_device_stack_initialize+0x264>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c244:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 800c246:	2300      	movs	r3, #0
 800c248:	63bb      	str	r3, [r7, #56]	; 0x38
        local_endpoints_found              =  0;
 800c24a:	2300      	movs	r3, #0
 800c24c:	637b      	str	r3, [r7, #52]	; 0x34
        endpoints_in_interface_found       =  0;
 800c24e:	2300      	movs	r3, #0
 800c250:	633b      	str	r3, [r7, #48]	; 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800c252:	e054      	b.n	800c2fe <_ux_device_stack_initialize+0x1a6>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 800c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25c:	785b      	ldrb	r3, [r3, #1]
 800c25e:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800c260:	7dfb      	ldrb	r3, [r7, #23]
 800c262:	2b02      	cmp	r3, #2
 800c264:	d029      	beq.n	800c2ba <_ux_device_stack_initialize+0x162>
 800c266:	2b04      	cmp	r3, #4
 800c268:	d13e      	bne.n	800c2e8 <_ux_device_stack_initialize+0x190>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	3303      	adds	r3, #3
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10b      	bne.n	800c28c <_ux_device_stack_initialize+0x134>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800c274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	4413      	add	r3, r2
 800c27a:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	3304      	adds	r3, #4
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	633b      	str	r3, [r7, #48]	; 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800c284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c286:	3301      	adds	r3, #1
 800c288:	63bb      	str	r3, [r7, #56]	; 0x38
 800c28a:	e00a      	b.n	800c2a2 <_ux_device_stack_initialize+0x14a>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800c28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28e:	3304      	adds	r3, #4
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	461a      	mov	r2, r3
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	4293      	cmp	r3, r2
 800c298:	d203      	bcs.n	800c2a2 <_ux_device_stack_initialize+0x14a>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29c:	3304      	adds	r3, #4
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	633b      	str	r3, [r7, #48]	; 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	3302      	adds	r3, #2
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d21d      	bcs.n	800c2ec <_ux_device_stack_initialize+0x194>
                    max_interface_number = *(device_framework + 2);
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	3302      	adds	r3, #2
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	63fb      	str	r3, [r7, #60]	; 0x3c

                break;
 800c2b8:	e018      	b.n	800c2ec <_ux_device_stack_initialize+0x194>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 800c2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d901      	bls.n	800c2c6 <_ux_device_stack_initialize+0x16e>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	647b      	str	r3, [r7, #68]	; 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 800c2ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ce:	4413      	add	r3, r2
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800c2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d901      	bls.n	800c2de <_ux_device_stack_initialize+0x186>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 800c2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2dc:	643b      	str	r3, [r7, #64]	; 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	637b      	str	r3, [r7, #52]	; 0x34
                endpoints_in_interface_found  =  0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	633b      	str	r3, [r7, #48]	; 0x30

                break;
 800c2e6:	e002      	b.n	800c2ee <_ux_device_stack_initialize+0x196>

            default:
                break;
 800c2e8:	bf00      	nop
 800c2ea:	e000      	b.n	800c2ee <_ux_device_stack_initialize+0x196>
                break;
 800c2ec:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800c2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800c2f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (device_framework_length != 0)
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1a7      	bne.n	800c254 <_ux_device_stack_initialize+0xfc>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 800c304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	4413      	add	r3, r2
 800c30a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 800c30c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c310:	429a      	cmp	r2, r3
 800c312:	d901      	bls.n	800c318 <_ux_device_stack_initialize+0x1c0>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 800c314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c316:	643b      	str	r3, [r7, #64]	; 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800c318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d901      	bls.n	800c324 <_ux_device_stack_initialize+0x1cc>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 800c320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c322:	647b      	str	r3, [r7, #68]	; 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800c324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c326:	2b00      	cmp	r3, #0
 800c328:	d106      	bne.n	800c338 <_ux_device_stack_initialize+0x1e0>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800c32a:	2242      	movs	r2, #66	; 0x42
 800c32c:	2103      	movs	r1, #3
 800c32e:	2002      	movs	r0, #2
 800c330:	f000 fba2 	bl	800ca78 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 800c334:	2342      	movs	r3, #66	; 0x42
 800c336:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800c338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d109      	bne.n	800c352 <_ux_device_stack_initialize+0x1fa>
 800c33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c340:	2b0f      	cmp	r3, #15
 800c342:	d906      	bls.n	800c352 <_ux_device_stack_initialize+0x1fa>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800c344:	2212      	movs	r2, #18
 800c346:	2103      	movs	r1, #3
 800c348:	2002      	movs	r0, #2
 800c34a:	f000 fb95 	bl	800ca78 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 800c34e:	2312      	movs	r3, #18
 800c350:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 800c352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c354:	2b00      	cmp	r3, #0
 800c356:	d118      	bne.n	800c38a <_ux_device_stack_initialize+0x232>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c35c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c364:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800c368:	2338      	movs	r3, #56	; 0x38
 800c36a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c36c:	2100      	movs	r1, #0
 800c36e:	2000      	movs	r0, #0
 800c370:	f000 fe46 	bl	800d000 <_ux_utility_memory_allocate_mulc_safe>
 800c374:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d102      	bne.n	800c382 <_ux_device_stack_initialize+0x22a>
            status = UX_MEMORY_INSUFFICIENT;
 800c37c:	2312      	movs	r3, #18
 800c37e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c380:	e003      	b.n	800c38a <_ux_device_stack_initialize+0x232>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800c38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d046      	beq.n	800c41e <_ux_device_stack_initialize+0x2c6>
 800c390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c392:	2b00      	cmp	r3, #0
 800c394:	d143      	bne.n	800c41e <_ux_device_stack_initialize+0x2c6>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800c396:	2390      	movs	r3, #144	; 0x90
 800c398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c39a:	2100      	movs	r1, #0
 800c39c:	2000      	movs	r0, #0
 800c39e:	f000 fe2f 	bl	800d000 <_ux_utility_memory_allocate_mulc_safe>
 800c3a2:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (endpoints_pool == UX_NULL)
 800c3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d102      	bne.n	800c3b0 <_ux_device_stack_initialize+0x258>
            status = UX_MEMORY_INSUFFICIENT;
 800c3aa:	2312      	movs	r3, #18
 800c3ac:	64bb      	str	r3, [r7, #72]	; 0x48
        if (endpoints_pool == UX_NULL)
 800c3ae:	e038      	b.n	800c422 <_ux_device_stack_initialize+0x2ca>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3b4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800c3b8:	e023      	b.n	800c402 <_ux_device_stack_initialize+0x2aa>
 800c3ba:	bf00      	nop
 800c3bc:	24004cf4 	.word	0x24004cf4
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800c3c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3c4:	2101      	movs	r1, #1
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	f000 fd16 	bl	800cdf8 <_ux_utility_memory_allocate>
 800c3cc:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800c3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3d0:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800c3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d102      	bne.n	800c3e0 <_ux_device_stack_initialize+0x288>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800c3da:	2312      	movs	r3, #18
 800c3dc:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 800c3de:	e01d      	b.n	800c41c <_ux_device_stack_initialize+0x2c4>
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 800c3e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e2:	3360      	adds	r3, #96	; 0x60
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	4934      	ldr	r1, [pc, #208]	; (800c4b8 <_ux_device_stack_initialize+0x360>)
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 ff8d 	bl	800d308 <_ux_utility_semaphore_create>
 800c3ee:	64b8      	str	r0, [r7, #72]	; 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800c3f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <_ux_device_stack_initialize+0x2a4>
                {
                    status = UX_SEMAPHORE_ERROR;
 800c3f6:	2315      	movs	r3, #21
 800c3f8:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 800c3fa:	e00f      	b.n	800c41c <_ux_device_stack_initialize+0x2c4>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800c3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3fe:	3390      	adds	r3, #144	; 0x90
 800c400:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c404:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
 800c408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c40a:	4613      	mov	r3, r2
 800c40c:	00db      	lsls	r3, r3, #3
 800c40e:	4413      	add	r3, r2
 800c410:	011b      	lsls	r3, r3, #4
 800c412:	440b      	add	r3, r1
 800c414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c416:	429a      	cmp	r2, r3
 800c418:	d3d2      	bcc.n	800c3c0 <_ux_device_stack_initialize+0x268>
        if (endpoints_pool == UX_NULL)
 800c41a:	e002      	b.n	800c422 <_ux_device_stack_initialize+0x2ca>
 800c41c:	e001      	b.n	800c422 <_ux_device_stack_initialize+0x2ca>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 800c41e:	2300      	movs	r3, #0
 800c420:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 800c422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <_ux_device_stack_initialize+0x2d4>
        return(UX_SUCCESS);
 800c428:	2300      	movs	r3, #0
 800c42a:	e040      	b.n	800c4ae <_ux_device_stack_initialize+0x356>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 800c42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d021      	beq.n	800c476 <_ux_device_stack_initialize+0x31e>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800c432:	e014      	b.n	800c45e <_ux_device_stack_initialize+0x306>
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 800c434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d004      	beq.n	800c446 <_ux_device_stack_initialize+0x2ee>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800c43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c43e:	3360      	adds	r3, #96	; 0x60
 800c440:	4618      	mov	r0, r3
 800c442:	f000 ff7b 	bl	800d33c <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800c446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d004      	beq.n	800c458 <_ux_device_stack_initialize+0x300>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800c44e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c452:	4618      	mov	r0, r3
 800c454:	f000 fe18 	bl	800d088 <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800c458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c45a:	3b90      	subs	r3, #144	; 0x90
 800c45c:	64fb      	str	r3, [r7, #76]	; 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c466:	429a      	cmp	r2, r3
 800c468:	d2e4      	bcs.n	800c434 <_ux_device_stack_initialize+0x2dc>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c470:	4618      	mov	r0, r3
 800c472:	f000 fe09 	bl	800d088 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800c476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <_ux_device_stack_initialize+0x334>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fdfe 	bl	800d088 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c490:	2b00      	cmp	r3, #0
 800c492:	d004      	beq.n	800c49e <_ux_device_stack_initialize+0x346>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 fdf5 	bl	800d088 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800c49e:	4b07      	ldr	r3, [pc, #28]	; (800c4bc <_ux_device_stack_initialize+0x364>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 fdee 	bl	800d088 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800c4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3750      	adds	r7, #80	; 0x50
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	08010958 	.word	0x08010958
 800c4bc:	24004cf4 	.word	0x24004cf4

0800c4c0 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c4c8:	4b20      	ldr	r3, [pc, #128]	; (800c54c <_ux_device_stack_interface_delete+0x8c>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3320      	adds	r3, #32
 800c4ce:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4d4:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800c4d6:	e01c      	b.n	800c512 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e0:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800c4e2:	4b1a      	ldr	r3, [pc, #104]	; (800c54c <_ux_device_stack_interface_delete+0x8c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	210f      	movs	r1, #15
 800c4f0:	68b8      	ldr	r0, [r7, #8]
 800c4f2:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2200      	movs	r2, #0
 800c504:	625a      	str	r2, [r3, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2200      	movs	r2, #0
 800c50a:	629a      	str	r2, [r3, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	62da      	str	r2, [r3, #44]	; 0x2c
    while (next_endpoint != UX_NULL)
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1df      	bne.n	800c4d8 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	631a      	str	r2, [r3, #48]	; 0x30
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	635a      	str	r2, [r3, #52]	; 0x34
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	24004cf4 	.word	0x24004cf4

0800c550 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b092      	sub	sp, #72	; 0x48
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c55c:	4b82      	ldr	r3, [pc, #520]	; (800c768 <_ux_device_stack_interface_set+0x218>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c562:	4b81      	ldr	r3, [pc, #516]	; (800c768 <_ux_device_stack_interface_set+0x218>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3320      	adds	r3, #32
 800c568:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c570:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800c572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c574:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800c578:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 800c57a:	e009      	b.n	800c590 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800c57c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d009      	beq.n	800c598 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800c584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c586:	3338      	adds	r3, #56	; 0x38
 800c588:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800c58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c58c:	3b01      	subs	r3, #1
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 800c590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c592:	2b00      	cmp	r3, #0
 800c594:	d1f2      	bne.n	800c57c <_ux_device_stack_interface_set+0x2c>
 800c596:	e000      	b.n	800c59a <_ux_device_stack_interface_set+0x4a>
            break;
 800c598:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800c59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d101      	bne.n	800c5a4 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800c5a0:	2312      	movs	r3, #18
 800c5a2:	e0dd      	b.n	800c760 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800c5a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800c5aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ac:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800c5ae:	2209      	movs	r2, #9
 800c5b0:	496e      	ldr	r1, [pc, #440]	; (800c76c <_ux_device_stack_interface_set+0x21c>)
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f000 fb4e 	bl	800cc54 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d104      	bne.n	800c5cc <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5c6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800c5ca:	e00e      	b.n	800c5ea <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5d2:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800c5d4:	e002      	b.n	800c5dc <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800c5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5da:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800c5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1f8      	bne.n	800c5d6 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800c5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5e8:	631a      	str	r2, [r3, #48]	; 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	1a9b      	subs	r3, r3, r2
 800c5f4:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800c602:	e0a4      	b.n	800c74e <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800c610:	7efb      	ldrb	r3, [r7, #27]
 800c612:	2b05      	cmp	r3, #5
 800c614:	d009      	beq.n	800c62a <_ux_device_stack_interface_set+0xda>
 800c616:	2b05      	cmp	r3, #5
 800c618:	f300 8090 	bgt.w	800c73c <_ux_device_stack_interface_set+0x1ec>
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	f000 8087 	beq.w	800c730 <_ux_device_stack_interface_set+0x1e0>
 800c622:	2b04      	cmp	r3, #4
 800c624:	f000 8084 	beq.w	800c730 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800c628:	e088      	b.n	800c73c <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c630:	63bb      	str	r3, [r7, #56]	; 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c638:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 800c63a:	e00d      	b.n	800c658 <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800c63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d103      	bne.n	800c64c <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800c644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c646:	2201      	movs	r2, #1
 800c648:	601a      	str	r2, [r3, #0]
                    break;
 800c64a:	e008      	b.n	800c65e <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	3390      	adds	r3, #144	; 0x90
 800c650:	63bb      	str	r3, [r7, #56]	; 0x38
               endpoints_pool_number--; 
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	3b01      	subs	r3, #1
 800c656:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1ee      	bne.n	800c63c <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 800c664:	2312      	movs	r3, #18
 800c666:	e07b      	b.n	800c760 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66a:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800c66c:	2206      	movs	r2, #6
 800c66e:	4940      	ldr	r1, [pc, #256]	; (800c770 <_ux_device_stack_interface_set+0x220>)
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f000 faef 	bl	800cc54 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	3330      	adds	r3, #48	; 0x30
 800c67a:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67e:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 800c680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c684:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800c686:	4b38      	ldr	r3, [pc, #224]	; (800c768 <_ux_device_stack_interface_set+0x218>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d118      	bne.n	800c6c4 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d012      	beq.n	800c6c4 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a0:	69db      	ldr	r3, [r3, #28]
 800c6a2:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800c6a6:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00a      	beq.n	800c6c4 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	0adb      	lsrs	r3, r3, #11
 800c6b2:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	fb02 f303 	mul.w	r3, r2, r3
 800c6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6c8:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ce:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d6:	64da      	str	r2, [r3, #76]	; 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800c6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6dc:	629a      	str	r2, [r3, #40]	; 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 800c6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6e2:	62da      	str	r2, [r3, #44]	; 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	699b      	ldr	r3, [r3, #24]
 800c6e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ea:	210e      	movs	r1, #14
 800c6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ee:	4798      	blx	r3
 800c6f0:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d004      	beq.n	800c702 <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	601a      	str	r2, [r3, #0]
                return(status);
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	e02e      	b.n	800c760 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800c702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c706:	2b00      	cmp	r3, #0
 800c708:	d103      	bne.n	800c712 <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800c70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c70e:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 800c710:	e015      	b.n	800c73e <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800c712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c716:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800c718:	e002      	b.n	800c720 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800c71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71e:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1f8      	bne.n	800c71a <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800c728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c72c:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 800c72e:	e006      	b.n	800c73e <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800c730:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c732:	f000 f81f 	bl	800c774 <_ux_device_stack_interface_start>
 800c736:	6238      	str	r0, [r7, #32]
            return(status);
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	e011      	b.n	800c760 <_ux_device_stack_interface_set+0x210>
            break;
 800c73c:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	4413      	add	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2b00      	cmp	r3, #0
 800c752:	f47f af57 	bne.w	800c604 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800c756:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c758:	f000 f80c 	bl	800c774 <_ux_device_stack_interface_start>
 800c75c:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800c75e:	6a3b      	ldr	r3, [r7, #32]
}
 800c760:	4618      	mov	r0, r3
 800c762:	3748      	adds	r7, #72	; 0x48
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	24004cf4 	.word	0x24004cf4
 800c76c:	24000060 	.word	0x24000060
 800c770:	24000040 	.word	0x24000040

0800c774 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b090      	sub	sp, #64	; 0x40
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800c77c:	4b24      	ldr	r3, [pc, #144]	; (800c810 <_ux_device_stack_interface_start+0x9c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	6952      	ldr	r2, [r2, #20]
 800c784:	3258      	adds	r2, #88	; 0x58
 800c786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800c78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d101      	bne.n	800c796 <_ux_device_stack_interface_start+0x22>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800c792:	2357      	movs	r3, #87	; 0x57
 800c794:	e038      	b.n	800c808 <_ux_device_stack_interface_start+0x94>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c796:	4b1e      	ldr	r3, [pc, #120]	; (800c810 <_ux_device_stack_interface_start+0x9c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3320      	adds	r3, #32
 800c79c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b0:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b6:	627b      	str	r3, [r7, #36]	; 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	6a1b      	ldr	r3, [r3, #32]
 800c7bc:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800c7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c2:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800c7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d0:	f107 0208 	add.w	r2, r7, #8
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	6378      	str	r0, [r7, #52]	; 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800c7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d112      	bne.n	800c806 <_ux_device_stack_interface_start+0x92>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800c7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e2:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800c7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ec:	f107 0208 	add.w	r2, r7, #8
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	4798      	blx	r3
 800c7f4:	6378      	str	r0, [r7, #52]	; 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d102      	bne.n	800c802 <_ux_device_stack_interface_start+0x8e>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c800:	605a      	str	r2, [r3, #4]

        return(status); 
 800c802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c804:	e000      	b.n	800c808 <_ux_device_stack_interface_start+0x94>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800c806:	2357      	movs	r3, #87	; 0x57
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3740      	adds	r7, #64	; 0x40
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	24004cf4 	.word	0x24004cf4

0800c814 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b08a      	sub	sp, #40	; 0x28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c820:	4b29      	ldr	r3, [pc, #164]	; (800c8c8 <_ux_device_stack_set_feature+0xb4>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c826:	4b28      	ldr	r3, [pc, #160]	; (800c8c8 <_ux_device_stack_set_feature+0xb4>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	3320      	adds	r3, #32
 800c82c:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	333c      	adds	r3, #60	; 0x3c
 800c832:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f003 0303 	and.w	r3, r3, #3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <_ux_device_stack_set_feature+0x30>
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d014      	beq.n	800c86c <_ux_device_stack_set_feature+0x58>
 800c842:	e035      	b.n	800c8b0 <_ux_device_stack_set_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d10e      	bne.n	800c868 <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800c84a:	4b1f      	ldr	r3, [pc, #124]	; (800c8c8 <_ux_device_stack_set_feature+0xb4>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800c852:	2b00      	cmp	r3, #0
 800c854:	d006      	beq.n	800c864 <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800c856:	4b1c      	ldr	r3, [pc, #112]	; (800c8c8 <_ux_device_stack_set_feature+0xb4>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

                /* OK. */
                return (UX_SUCCESS);
 800c860:	2300      	movs	r3, #0
 800c862:	e02c      	b.n	800c8be <_ux_device_stack_set_feature+0xaa>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800c864:	2354      	movs	r3, #84	; 0x54
 800c866:	e02a      	b.n	800c8be <_ux_device_stack_set_feature+0xaa>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800c868:	2354      	movs	r3, #84	; 0x54
 800c86a:	e028      	b.n	800c8be <_ux_device_stack_set_feature+0xaa>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c872:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800c874:	e019      	b.n	800c8aa <_ux_device_stack_set_feature+0x96>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c87a:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800c87c:	e00f      	b.n	800c89e <_ux_device_stack_set_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800c87e:	6a3b      	ldr	r3, [r7, #32]
 800c880:	695b      	ldr	r3, [r3, #20]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	429a      	cmp	r2, r3
 800c886:	d107      	bne.n	800c898 <_ux_device_stack_set_feature+0x84>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	6a3a      	ldr	r2, [r7, #32]
 800c88e:	2114      	movs	r1, #20
 800c890:	69f8      	ldr	r0, [r7, #28]
 800c892:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800c894:	2300      	movs	r3, #0
 800c896:	e012      	b.n	800c8be <_ux_device_stack_set_feature+0xaa>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800c898:	6a3b      	ldr	r3, [r7, #32]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89c:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1ec      	bne.n	800c87e <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1e2      	bne.n	800c876 <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	2114      	movs	r1, #20
 800c8b8:	69f8      	ldr	r0, [r7, #28]
 800c8ba:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800c8bc:	2300      	movs	r3, #0
    }
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3728      	adds	r7, #40	; 0x28
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	24004cf4 	.word	0x24004cf4

0800c8cc <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c8d6:	4b19      	ldr	r3, [pc, #100]	; (800c93c <_ux_device_stack_transfer_abort+0x70>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	625a      	str	r2, [r3, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c8e6:	617b      	str	r3, [r7, #20]
    return(posture);
 800c8e8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c8ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8ec:	b672      	cpsid	i
    return(int_posture);
 800c8ee:	693b      	ldr	r3, [r7, #16]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800c8f0:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d114      	bne.n	800c924 <_ux_device_stack_transfer_abort+0x58>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	210d      	movs	r1, #13
 800c902:	69f8      	ldr	r0, [r7, #28]
 800c904:	4798      	blx	r3
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f383 8810 	msr	PRIMASK, r3
}
 800c910:	bf00      	nop

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2204      	movs	r2, #4
 800c916:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3330      	adds	r3, #48	; 0x30
 800c91c:	4618      	mov	r0, r3
 800c91e:	f000 fd53 	bl	800d3c8 <_ux_utility_semaphore_put>
 800c922:	e005      	b.n	800c930 <_ux_device_stack_transfer_abort+0x64>
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	f383 8810 	msr	PRIMASK, r3
}
 800c92e:	bf00      	nop
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3720      	adds	r7, #32
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	24004cf4 	.word	0x24004cf4

0800c940 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3330      	adds	r3, #48	; 0x30
 800c94e:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800c950:	6839      	ldr	r1, [r7, #0]
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f7ff ffba 	bl	800c8cc <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
	...

0800c964 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08e      	sub	sp, #56	; 0x38
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c974:	2b01      	cmp	r3, #1
 800c976:	d101      	bne.n	800c97c <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 800c978:	2300      	movs	r3, #0
 800c97a:	e077      	b.n	800ca6c <_ux_device_stack_transfer_request+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c97c:	f3ef 8310 	mrs	r3, PRIMASK
 800c980:	623b      	str	r3, [r7, #32]
    return(posture);
 800c982:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c984:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c986:	b672      	cpsid	i
    return(int_posture);
 800c988:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 800c98a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800c98c:	4b39      	ldr	r3, [pc, #228]	; (800ca74 <_ux_device_stack_transfer_request+0x110>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	633b      	str	r3, [r7, #48]	; 0x30

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 800c994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c996:	2b01      	cmp	r3, #1
 800c998:	d005      	beq.n	800c9a6 <_ux_device_stack_transfer_request+0x42>
 800c99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d002      	beq.n	800c9a6 <_ux_device_stack_transfer_request+0x42>
            || (device_state == UX_DEVICE_CONFIGURED))
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	2b03      	cmp	r3, #3
 800c9a4:	d115      	bne.n	800c9d2 <_ux_device_stack_transfer_request+0x6e>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	601a      	str	r2, [r3, #0]
 800c9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	f383 8810 	msr	PRIMASK, r3
}
 800c9b6:	bf00      	nop
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c9b8:	4b2e      	ldr	r3, [pc, #184]	; (800ca74 <_ux_device_stack_transfer_request+0x110>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800c9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	f003 0303 	and.w	r3, r3, #3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10b      	bne.n	800c9e8 <_ux_device_stack_transfer_request+0x84>
 800c9d0:	e01b      	b.n	800ca0a <_ux_device_stack_transfer_request+0xa6>
 800c9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	f383 8810 	msr	PRIMASK, r3
}
 800c9dc:	bf00      	nop
        return(UX_TRANSFER_NOT_READY);
 800c9de:	2325      	movs	r3, #37	; 0x25
 800c9e0:	e044      	b.n	800ca6c <_ux_device_stack_transfer_request+0x108>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 800c9e2:	2064      	movs	r0, #100	; 0x64
 800c9e4:	f000 f91c 	bl	800cc20 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d0f8      	beq.n	800c9e2 <_ux_device_stack_transfer_request+0x7e>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	695b      	ldr	r3, [r3, #20]
 800c9f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <_ux_device_stack_transfer_request+0xa0>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2203      	movs	r2, #3
 800ca00:	629a      	str	r2, [r3, #40]	; 0x28
 800ca02:	e002      	b.n	800ca0a <_ux_device_stack_transfer_request+0xa6>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2202      	movs	r2, #2
 800ca08:	629a      	str	r2, [r3, #40]	; 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d114      	bne.n	800ca3c <_ux_device_stack_transfer_request+0xd8>
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d011      	beq.n	800ca3c <_ux_device_stack_transfer_request+0xd8>
        (slave_length != 0) && (host_length != slave_length) && 
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d00d      	beq.n	800ca3c <_ux_device_stack_transfer_request+0xd8>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	69da      	ldr	r2, [r3, #28]
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca2a:	fb01 f202 	mul.w	r2, r1, r2
 800ca2e:	1a9b      	subs	r3, r3, r2
        (slave_length != 0) && (host_length != slave_length) && 
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d103      	bne.n	800ca3c <_ux_device_stack_transfer_request+0xd8>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2201      	movs	r2, #1
 800ca38:	651a      	str	r2, [r3, #80]	; 0x50
 800ca3a:	e002      	b.n	800ca42 <_ux_device_stack_transfer_request+0xde>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 800ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5e:	699b      	ldr	r3, [r3, #24]
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	210c      	movs	r1, #12
 800ca64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca66:	4798      	blx	r3
 800ca68:	6278      	str	r0, [r7, #36]	; 0x24

    /* And return the status.  */
    return(status);
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

#endif
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3738      	adds	r7, #56	; 0x38
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	24004cf4 	.word	0x24004cf4

0800ca78 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800ca84:	4b0c      	ldr	r3, [pc, #48]	; (800cab8 <_ux_system_error_handler+0x40>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	651a      	str	r2, [r3, #80]	; 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800ca8c:	4b0a      	ldr	r3, [pc, #40]	; (800cab8 <_ux_system_error_handler+0x40>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca92:	3201      	adds	r2, #1
 800ca94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800ca96:	4b08      	ldr	r3, [pc, #32]	; (800cab8 <_ux_system_error_handler+0x40>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d006      	beq.n	800caae <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800caa0:	4b05      	ldr	r3, [pc, #20]	; (800cab8 <_ux_system_error_handler+0x40>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	68b9      	ldr	r1, [r7, #8]
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	4798      	blx	r3
    }
}
 800caae:	bf00      	nop
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	24004cf8 	.word	0x24004cf8

0800cabc <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08a      	sub	sp, #40	; 0x28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	2100      	movs	r1, #0
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f000 fbb8 	bl	800d244 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800cad4:	4a4f      	ldr	r2, [pc, #316]	; (800cc14 <_ux_system_initialize+0x158>)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800cada:	235c      	movs	r3, #92	; 0x5c
 800cadc:	627b      	str	r3, [r7, #36]	; 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae2:	4413      	add	r3, r2
 800cae4:	4a4c      	ldr	r2, [pc, #304]	; (800cc18 <_ux_system_initialize+0x15c>)
 800cae6:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800caee:	627b      	str	r3, [r7, #36]	; 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 800caf0:	4b48      	ldr	r3, [pc, #288]	; (800cc14 <_ux_system_initialize+0x158>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68f9      	ldr	r1, [r7, #12]
 800caf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf8:	440a      	add	r2, r1
 800cafa:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 800cafc:	4b45      	ldr	r3, [pc, #276]	; (800cc14 <_ux_system_initialize+0x158>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 800cb04:	6a3b      	ldr	r3, [r7, #32]
 800cb06:	330f      	adds	r3, #15
 800cb08:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800cb0a:	6a3b      	ldr	r3, [r7, #32]
 800cb0c:	f023 030f 	bic.w	r3, r3, #15
 800cb10:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	4413      	add	r3, r2
 800cb18:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	6a3a      	ldr	r2, [r7, #32]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d301      	bcc.n	800cb26 <_ux_system_initialize+0x6a>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800cb22:	2312      	movs	r3, #18
 800cb24:	e071      	b.n	800cc0a <_ux_system_initialize+0x14e>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800cb26:	69f9      	ldr	r1, [r7, #28]
 800cb28:	4b3a      	ldr	r3, [pc, #232]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6a3a      	ldr	r2, [r7, #32]
 800cb2e:	1a8a      	subs	r2, r1, r2
 800cb30:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 800cb32:	4b38      	ldr	r3, [pc, #224]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	4b37      	ldr	r3, [pc, #220]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	6852      	ldr	r2, [r2, #4]
 800cb3c:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 800cb3e:	4b35      	ldr	r3, [pc, #212]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	6a3a      	ldr	r2, [r7, #32]
 800cb44:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 800cb46:	4b33      	ldr	r3, [pc, #204]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800cb4e:	4b31      	ldr	r3, [pc, #196]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	f1a3 0210 	sub.w	r2, r3, #16
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d112      	bne.n	800cb8e <_ux_system_initialize+0xd2>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 800cb68:	4b2a      	ldr	r3, [pc, #168]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	4b29      	ldr	r3, [pc, #164]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6852      	ldr	r2, [r2, #4]
 800cb72:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 800cb74:	4b27      	ldr	r3, [pc, #156]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	4b26      	ldr	r3, [pc, #152]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6892      	ldr	r2, [r2, #8]
 800cb7e:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 800cb80:	4b24      	ldr	r3, [pc, #144]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	4b23      	ldr	r3, [pc, #140]	; (800cc14 <_ux_system_initialize+0x158>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	6812      	ldr	r2, [r2, #0]
 800cb8a:	60da      	str	r2, [r3, #12]
 800cb8c:	e02f      	b.n	800cbee <_ux_system_initialize+0x132>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800cb92:	6a3b      	ldr	r3, [r7, #32]
 800cb94:	330f      	adds	r3, #15
 800cb96:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	f023 030f 	bic.w	r3, r3, #15
 800cb9e:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 800cba0:	4b1c      	ldr	r3, [pc, #112]	; (800cc14 <_ux_system_initialize+0x158>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	683a      	ldr	r2, [r7, #0]
 800cba6:	3a0f      	subs	r2, #15
 800cba8:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 800cbaa:	4b1a      	ldr	r3, [pc, #104]	; (800cc14 <_ux_system_initialize+0x158>)
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	4b19      	ldr	r3, [pc, #100]	; (800cc14 <_ux_system_initialize+0x158>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6912      	ldr	r2, [r2, #16]
 800cbb4:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 800cbb6:	4b17      	ldr	r3, [pc, #92]	; (800cc14 <_ux_system_initialize+0x158>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	6a3a      	ldr	r2, [r7, #32]
 800cbbc:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 800cbbe:	4b15      	ldr	r3, [pc, #84]	; (800cc14 <_ux_system_initialize+0x158>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68d8      	ldr	r0, [r3, #12]
 800cbc4:	4b13      	ldr	r3, [pc, #76]	; (800cc14 <_ux_system_initialize+0x158>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	2100      	movs	r1, #0
 800cbce:	f000 fb39 	bl	800d244 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 800cbd2:	4b10      	ldr	r3, [pc, #64]	; (800cc14 <_ux_system_initialize+0x158>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800cbda:	4b0e      	ldr	r3, [pc, #56]	; (800cc14 <_ux_system_initialize+0x158>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	f1a3 0210 	sub.w	r2, r3, #16
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	2200      	movs	r2, #0
 800cbec:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 800cbee:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <_ux_system_initialize+0x158>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	331c      	adds	r3, #28
 800cbf4:	4909      	ldr	r1, [pc, #36]	; (800cc1c <_ux_system_initialize+0x160>)
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fb3e 	bl	800d278 <_ux_utility_mutex_create>
 800cbfc:	6178      	str	r0, [r7, #20]
    if(status != UX_SUCCESS)
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d001      	beq.n	800cc08 <_ux_system_initialize+0x14c>
        return(UX_MUTEX_ERROR);
 800cc04:	2317      	movs	r3, #23
 800cc06:	e000      	b.n	800cc0a <_ux_system_initialize+0x14e>
#endif

    return(UX_SUCCESS);
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3728      	adds	r7, #40	; 0x28
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	24004cf8 	.word	0x24004cf8
 800cc18:	24004cf4 	.word	0x24004cf4
 800cc1c:	08010978 	.word	0x08010978

0800cc20 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2264      	movs	r2, #100	; 0x64
 800cc2c:	fb02 f303 	mul.w	r3, r2, r3
 800cc30:	4a07      	ldr	r2, [pc, #28]	; (800cc50 <_ux_utility_delay_ms+0x30>)
 800cc32:	fba2 2303 	umull	r2, r3, r2, r3
 800cc36:	099b      	lsrs	r3, r3, #6
 800cc38:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f7fc fa93 	bl	800916c <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 800cc46:	bf00      	nop
}
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	10624dd3 	.word	0x10624dd3

0800cc54 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800cc62:	e026      	b.n	800ccb2 <_ux_utility_descriptor_parse+0x5e>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	60ba      	str	r2, [r7, #8]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d00b      	beq.n	800cc88 <_ux_utility_descriptor_parse+0x34>
 800cc70:	2b04      	cmp	r3, #4
 800cc72:	d113      	bne.n	800cc9c <_ux_utility_descriptor_parse+0x48>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f000 f875 	bl	800cd64 <_ux_utility_long_get>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3304      	adds	r3, #4
 800cc84:	60fb      	str	r3, [r7, #12]
            break;                   
 800cc86:	e011      	b.n	800ccac <_ux_utility_descriptor_parse+0x58>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f000 fbaa 	bl	800d3e2 <_ux_utility_short_get>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	3302      	adds	r3, #2
 800cc98:	60fb      	str	r3, [r7, #12]
            break;                   
 800cc9a:	e007      	b.n	800ccac <_ux_utility_descriptor_parse+0x58>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	461a      	mov	r2, r3
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	1e5a      	subs	r2, r3, #1
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1d3      	bne.n	800cc64 <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 800ccbc:	bf00      	nop
}
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <_ux_utility_event_flags_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_create(UX_EVENT_FLAGS_GROUP*group_ptr, CHAR *name)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]

UINT    status;

    /* Call ThreadX to create the event flags.  */
    status =  tx_event_flags_create(group_ptr, name);
 800ccce:	2224      	movs	r2, #36	; 0x24
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7fd fae4 	bl	800a2a0 <_txe_event_flags_create>
 800ccd8:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d004      	beq.n	800ccea <_ux_utility_event_flags_create+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_EVENT_ERROR);
 800cce0:	2218      	movs	r2, #24
 800cce2:	2108      	movs	r1, #8
 800cce4:	2002      	movs	r0, #2
 800cce6:	f7ff fec7 	bl	800ca78 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_EVENT_ERROR, group_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800ccea:	68fb      	ldr	r3, [r7, #12]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <_ux_utility_event_flags_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_delete(UX_EVENT_FLAGS_GROUP*group_ptr)            
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to delete the event flags.  */
    status =  tx_event_flags_delete(group_ptr);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7fd fb61 	bl	800a3c4 <_txe_event_flags_delete>
 800cd02:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800cd04:	68fb      	ldr	r3, [r7, #12]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <_ux_utility_event_flags_get>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_get(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG requested_flags, 
                                        UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b088      	sub	sp, #32
 800cd12:	af02      	add	r7, sp, #8
 800cd14:	60f8      	str	r0, [r7, #12]
 800cd16:	60b9      	str	r1, [r7, #8]
 800cd18:	607a      	str	r2, [r7, #4]
 800cd1a:	603b      	str	r3, [r7, #0]

UINT    status;
ULONG   local_actual_flags_ptr;

    /* Call ThreadX to get the event flags.  */
    status =  tx_event_flags_get(group_ptr, requested_flags, get_option, &local_actual_flags_ptr, wait_option);
 800cd1c:	f107 0210 	add.w	r2, r7, #16
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	4613      	mov	r3, r2
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	68b9      	ldr	r1, [r7, #8]
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f7fd fb88 	bl	800a440 <_txe_event_flags_get>
 800cd30:	6178      	str	r0, [r7, #20]

    /* Update the actual flags.  */
    *actual_flags_ptr = local_actual_flags_ptr;
 800cd32:	693a      	ldr	r2, [r7, #16]
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	601a      	str	r2, [r3, #0]
    
    /* Return completion status.  */
    return(status);
 800cd38:	697b      	ldr	r3, [r7, #20]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3718      	adds	r7, #24
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <_ux_utility_event_flags_set>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_set(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG flags_to_set,
                                  UINT set_option)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b086      	sub	sp, #24
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	60f8      	str	r0, [r7, #12]
 800cd4a:	60b9      	str	r1, [r7, #8]
 800cd4c:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to set the event flags.  */
    status =  tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	68b9      	ldr	r1, [r7, #8]
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f7fd fbca 	bl	800a4ec <_txe_event_flags_set>
 800cd58:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800cd5a:	697b      	ldr	r3, [r7, #20]
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3718      	adds	r7, #24
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	1c5a      	adds	r2, r3, #1
 800cd70:	607a      	str	r2, [r7, #4]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	021b      	lsls	r3, r3, #8
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	607a      	str	r2, [r7, #4]
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	041b      	lsls	r3, r3, #16
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	061b      	lsls	r3, r3, #24
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800cda2:	68fb      	ldr	r3, [r7, #12]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	683a      	ldr	r2, [r7, #0]
 800cdc2:	b2d2      	uxtb	r2, r2
 800cdc4:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	0a19      	lsrs	r1, r3, #8
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	607a      	str	r2, [r7, #4]
 800cdd0:	b2ca      	uxtb	r2, r1
 800cdd2:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	0c19      	lsrs	r1, r3, #16
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	1c5a      	adds	r2, r3, #1
 800cddc:	607a      	str	r2, [r7, #4]
 800cdde:	b2ca      	uxtb	r2, r1
 800cde0:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	0e1b      	lsrs	r3, r3, #24
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800cdec:	bf00      	nop
}
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08c      	sub	sp, #48	; 0x30
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800ce04:	4b7d      	ldr	r3, [pc, #500]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	331c      	adds	r3, #28
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 fa65 	bl	800d2da <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce16:	d101      	bne.n	800ce1c <_ux_utility_memory_allocate+0x24>
        memory_alignment = UX_NO_ALIGN;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2b0e      	cmp	r3, #14
 800ce20:	d801      	bhi.n	800ce26 <_ux_utility_memory_allocate+0x2e>
        memory_alignment =  UX_ALIGN_MIN;
 800ce22:	230f      	movs	r3, #15
 800ce24:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	330f      	adds	r3, #15
 800ce34:	f023 030f 	bic.w	r3, r3, #15
 800ce38:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	4413      	add	r3, r2
 800ce40:	3310      	adds	r3, #16
 800ce42:	4619      	mov	r1, r3
 800ce44:	68b8      	ldr	r0, [r7, #8]
 800ce46:	f000 f9bb 	bl	800d1c0 <_ux_utility_memory_free_block_best_get>
 800ce4a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10c      	bne.n	800ce6c <_ux_utility_memory_allocate+0x74>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800ce52:	4b6a      	ldr	r3, [pc, #424]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	331c      	adds	r3, #28
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 fa33 	bl	800d2c4 <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800ce5e:	2212      	movs	r2, #18
 800ce60:	2108      	movs	r1, #8
 800ce62:	2002      	movs	r0, #2
 800ce64:	f7ff fe08 	bl	800ca78 <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 800ce68:	2300      	movs	r3, #0
 800ce6a:	e0c3      	b.n	800cff4 <_ux_utility_memory_allocate+0x1fc>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	3310      	adds	r3, #16
 800ce70:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	1e5a      	subs	r2, r3, #1
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	4013      	ands	r3, r2
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d126      	bne.n	800cecc <_ux_utility_memory_allocate+0xd4>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	3310      	adds	r3, #16
 800ce82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce84:	4413      	add	r3, r2
 800ce86:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	689a      	ldr	r2, [r3, #8]
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce94:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800ce96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	f1a3 0210 	sub.w	r2, r3, #16
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 800ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 800ceb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb4:	69fa      	ldr	r2, [r7, #28]
 800ceb6:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3310      	adds	r3, #16
 800cec8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ceca:	e05e      	b.n	800cf8a <_ux_utility_memory_allocate+0x192>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 800cecc:	6a3b      	ldr	r3, [r7, #32]
 800cece:	3310      	adds	r3, #16
 800ced0:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	6a3b      	ldr	r3, [r7, #32]
 800ced6:	4413      	add	r3, r2
 800ced8:	3b01      	subs	r3, #1
 800ceda:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	425b      	negs	r3, r3
 800cee0:	6a3a      	ldr	r2, [r7, #32]
 800cee2:	4013      	ands	r3, r2
 800cee4:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 800cee6:	6a3b      	ldr	r3, [r7, #32]
 800cee8:	3b10      	subs	r3, #16
 800ceea:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cef0:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	689a      	ldr	r2, [r3, #8]
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 800cefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	3310      	adds	r3, #16
 800cf10:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	69fa      	ldr	r2, [r7, #28]
 800cf16:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 800cf18:	69fa      	ldr	r2, [r7, #28]
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	1ad2      	subs	r2, r2, r3
 800cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf20:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	f1a3 0210 	sub.w	r2, r3, #16
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	2b10      	cmp	r3, #16
 800cf42:	d91c      	bls.n	800cf7e <_ux_utility_memory_allocate+0x186>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) (((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested) & 0xFFFFFFFFu);
 800cf44:	69fa      	ldr	r2, [r7, #28]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4413      	add	r3, r2
 800cf4a:	3310      	adds	r3, #16
 800cf4c:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	689a      	ldr	r2, [r3, #8]
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	69fa      	ldr	r2, [r7, #28]
 800cf5a:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	f1a3 0210 	sub.w	r2, r3, #16
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	697a      	ldr	r2, [r7, #20]
 800cf70:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	1ad2      	subs	r2, r2, r3
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3310      	adds	r3, #16
 800cf84:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	3310      	adds	r3, #16
 800cf8e:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	2100      	movs	r1, #0
 800cf94:	6938      	ldr	r0, [r7, #16]
 800cf96:	f000 f955 	bl	800d244 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 800cf9a:	4b18      	ldr	r3, [pc, #96]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68da      	ldr	r2, [r3, #12]
 800cfa0:	4b16      	ldr	r3, [pc, #88]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d108      	bne.n	800cfbc <_ux_utility_memory_allocate+0x1c4>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800cfaa:	4b14      	ldr	r3, [pc, #80]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	6899      	ldr	r1, [r3, #8]
 800cfb0:	4b12      	ldr	r3, [pc, #72]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfb6:	1a8a      	subs	r2, r1, r2
 800cfb8:	609a      	str	r2, [r3, #8]
 800cfba:	e014      	b.n	800cfe6 <_ux_utility_memory_allocate+0x1ee>
    }
    else
    {

       switch (memory_cache_flag)
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d108      	bne.n	800cfd4 <_ux_utility_memory_allocate+0x1dc>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 800cfc2:	4b0e      	ldr	r3, [pc, #56]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6959      	ldr	r1, [r3, #20]
 800cfc8:	4b0c      	ldr	r3, [pc, #48]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfce:	1a8a      	subs	r2, r1, r2
 800cfd0:	615a      	str	r2, [r3, #20]

            break;
 800cfd2:	e008      	b.n	800cfe6 <_ux_utility_memory_allocate+0x1ee>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800cfd4:	4b09      	ldr	r3, [pc, #36]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	6899      	ldr	r1, [r3, #8]
 800cfda:	4b08      	ldr	r3, [pc, #32]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfe0:	1a8a      	subs	r2, r1, r2
 800cfe2:	609a      	str	r2, [r3, #8]
            break;
 800cfe4:	bf00      	nop
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800cfe6:	4b05      	ldr	r3, [pc, #20]	; (800cffc <_ux_utility_memory_allocate+0x204>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	331c      	adds	r3, #28
 800cfec:	4618      	mov	r0, r3
 800cfee:	f000 f969 	bl	800d2c4 <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 800cff2:	693b      	ldr	r3, [r7, #16]
}                                
 800cff4:	4618      	mov	r0, r3
 800cff6:	3730      	adds	r7, #48	; 0x30
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	24004cf8 	.word	0x24004cf8

0800d000 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
 800d00c:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00a      	beq.n	800d02a <_ux_utility_memory_allocate_mulc_safe+0x2a>
 800d014:	2100      	movs	r1, #0
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	fba3 2302 	umull	r2, r3, r3, r2
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d000      	beq.n	800d024 <_ux_utility_memory_allocate_mulc_safe+0x24>
 800d022:	2101      	movs	r1, #1
 800d024:	460b      	mov	r3, r1
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10a      	bne.n	800d040 <_ux_utility_memory_allocate_mulc_safe+0x40>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	fb02 f303 	mul.w	r3, r2, r3
 800d032:	461a      	mov	r2, r3
 800d034:	68b9      	ldr	r1, [r7, #8]
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f7ff fede 	bl	800cdf8 <_ux_utility_memory_allocate>
 800d03c:	4603      	mov	r3, r0
 800d03e:	e000      	b.n	800d042 <_ux_utility_memory_allocate_mulc_safe+0x42>
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800d04a:	b480      	push	{r7}
 800d04c:	b087      	sub	sp, #28
 800d04e:	af00      	add	r7, sp, #0
 800d050:	60f8      	str	r0, [r7, #12]
 800d052:	60b9      	str	r1, [r7, #8]
 800d054:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800d05e:	e007      	b.n	800d070 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800d060:	697a      	ldr	r2, [r7, #20]
 800d062:	1c53      	adds	r3, r2, #1
 800d064:	617b      	str	r3, [r7, #20]
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	1c59      	adds	r1, r3, #1
 800d06a:	6139      	str	r1, [r7, #16]
 800d06c:	7812      	ldrb	r2, [r2, #0]
 800d06e:	701a      	strb	r2, [r3, #0]
    while(length--)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	1e5a      	subs	r2, r3, #1
 800d074:	607a      	str	r2, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1f2      	bne.n	800d060 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800d07a:	bf00      	nop
}
 800d07c:	371c      	adds	r7, #28
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
	...

0800d088 <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800d090:	4b49      	ldr	r3, [pc, #292]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	331c      	adds	r3, #28
 800d096:	4618      	mov	r0, r3
 800d098:	f000 f91f 	bl	800d2da <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	3b10      	subs	r3, #16
 800d0a0:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	3310      	adds	r3, #16
 800d0a8:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0b2:	d010      	beq.n	800d0d6 <_ux_utility_memory_free+0x4e>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 800d0b8:	4a40      	ldr	r2, [pc, #256]	; (800d1bc <_ux_utility_memory_free+0x134>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d00b      	beq.n	800d0d6 <_ux_utility_memory_free+0x4e>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800d0be:	4b3e      	ldr	r3, [pc, #248]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	331c      	adds	r3, #28
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 f8fd 	bl	800d2c4 <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 800d0ca:	2219      	movs	r2, #25
 800d0cc:	2108      	movs	r1, #8
 800d0ce:	2002      	movs	r0, #2
 800d0d0:	f7ff fcd2 	bl	800ca78 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 800d0d4:	e06c      	b.n	800d1b0 <_ux_utility_memory_free+0x128>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 800d0dc:	e007      	b.n	800d0ee <_ux_utility_memory_free+0x66>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d107      	bne.n	800d0f8 <_ux_utility_memory_free+0x70>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1f3      	bne.n	800d0de <_ux_utility_memory_free+0x56>
 800d0f6:	e000      	b.n	800d0fa <_ux_utility_memory_free+0x72>

        else

            /* The previous memory block is not free.  */
            break;
 800d0f8:	bf00      	nop
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 800d100:	e01a      	b.n	800d138 <_ux_utility_memory_free+0xb0>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d006      	beq.n	800d118 <_ux_utility_memory_free+0x90>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	693a      	ldr	r2, [r7, #16]
 800d10e:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	697a      	ldr	r2, [r7, #20]
 800d114:	60da      	str	r2, [r3, #12]
            break;
 800d116:	e012      	b.n	800d13e <_ux_utility_memory_free+0xb6>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	689a      	ldr	r2, [r3, #8]
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4413      	add	r3, r2
 800d12a:	f103 0210 	add.w	r2, r3, #16
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1e1      	bne.n	800d102 <_ux_utility_memory_free+0x7a>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 800d13e:	4b1e      	ldr	r3, [pc, #120]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68da      	ldr	r2, [r3, #12]
 800d144:	4b1c      	ldr	r3, [pc, #112]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d108      	bne.n	800d160 <_ux_utility_memory_free+0xd8>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 800d14e:	4b1a      	ldr	r3, [pc, #104]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	6899      	ldr	r1, [r3, #8]
 800d154:	4b18      	ldr	r3, [pc, #96]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	68fa      	ldr	r2, [r7, #12]
 800d15a:	440a      	add	r2, r1
 800d15c:	609a      	str	r2, [r3, #8]
 800d15e:	e020      	b.n	800d1a2 <_ux_utility_memory_free+0x11a>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 800d160:	4b15      	ldr	r3, [pc, #84]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 800d168:	697a      	ldr	r2, [r7, #20]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d310      	bcc.n	800d192 <_ux_utility_memory_free+0x10a>
 800d170:	4b11      	ldr	r3, [pc, #68]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	68ba      	ldr	r2, [r7, #8]
 800d178:	4413      	add	r3, r2
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d208      	bcs.n	800d192 <_ux_utility_memory_free+0x10a>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 800d180:	4b0d      	ldr	r3, [pc, #52]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6899      	ldr	r1, [r3, #8]
 800d186:	4b0c      	ldr	r3, [pc, #48]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	440a      	add	r2, r1
 800d18e:	609a      	str	r2, [r3, #8]
 800d190:	e007      	b.n	800d1a2 <_ux_utility_memory_free+0x11a>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 800d192:	4b09      	ldr	r3, [pc, #36]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6959      	ldr	r1, [r3, #20]
 800d198:	4b07      	ldr	r3, [pc, #28]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	440a      	add	r2, r1
 800d1a0:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800d1a2:	4b05      	ldr	r3, [pc, #20]	; (800d1b8 <_ux_utility_memory_free+0x130>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	331c      	adds	r3, #28
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f000 f88b 	bl	800d2c4 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 800d1ae:	bf00      	nop
}
 800d1b0:	3718      	adds	r7, #24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	24004cf8 	.word	0x24004cf8
 800d1bc:	80000001 	.word	0x80000001

0800d1c0 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d003      	beq.n	800d1dc <_ux_utility_memory_free_block_best_get+0x1c>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d005      	beq.n	800d1e6 <_ux_utility_memory_free_block_best_get+0x26>
 800d1da:	e009      	b.n	800d1f0 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 800d1dc:	4b18      	ldr	r3, [pc, #96]	; (800d240 <_ux_utility_memory_free_block_best_get+0x80>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60fb      	str	r3, [r7, #12]
            break;
 800d1e4:	e006      	b.n	800d1f4 <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 800d1e6:	4b16      	ldr	r3, [pc, #88]	; (800d240 <_ux_utility_memory_free_block_best_get+0x80>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	60fb      	str	r3, [r7, #12]
            break;
 800d1ee:	e001      	b.n	800d1f4 <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	e01e      	b.n	800d232 <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 800d1f4:	e019      	b.n	800d22a <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d112      	bne.n	800d224 <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	429a      	cmp	r2, r3
 800d206:	d20d      	bcs.n	800d224 <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d102      	bne.n	800d214 <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	60bb      	str	r3, [r7, #8]
 800d212:	e007      	b.n	800d224 <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d201      	bcs.n	800d224 <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d1e2      	bne.n	800d1f6 <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 800d230:	68bb      	ldr	r3, [r7, #8]
}                                
 800d232:	4618      	mov	r0, r3
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	24004cf8 	.word	0x24004cf8

0800d244 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800d244:	b480      	push	{r7}
 800d246:	b087      	sub	sp, #28
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	460b      	mov	r3, r1
 800d24e:	607a      	str	r2, [r7, #4]
 800d250:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800d256:	e004      	b.n	800d262 <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	617a      	str	r2, [r7, #20]
 800d25e:	7afa      	ldrb	r2, [r7, #11]
 800d260:	701a      	strb	r2, [r3, #0]
    while(length--)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	1e5a      	subs	r2, r3, #1
 800d266:	607a      	str	r2, [r7, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1f5      	bne.n	800d258 <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 800d26c:	bf00      	nop
}
 800d26e:	371c      	adds	r7, #28
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 800d282:	2334      	movs	r3, #52	; 0x34
 800d284:	2200      	movs	r2, #0
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7fd f95d 	bl	800a548 <_txe_mutex_create>
 800d28e:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d004      	beq.n	800d2a0 <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	2108      	movs	r1, #8
 800d29a:	2002      	movs	r0, #2
 800d29c:	f7ff fbec 	bl	800ca78 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7fd f9e6 	bl	800a684 <_txe_mutex_delete>
 800d2b8:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7fd fa71 	bl	800a7b4 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 800d2d2:	bf00      	nop
}
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b084      	sub	sp, #16
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 800d2e2:	f04f 31ff 	mov.w	r1, #4294967295
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7fd fa0a 	bl	800a700 <_txe_mutex_get>
 800d2ec:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d005      	beq.n	800d300 <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	2108      	movs	r1, #8
 800d2f8:	2002      	movs	r0, #2
 800d2fa:	f7ff fbbd 	bl	800ca78 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 800d2fe:	bf00      	nop
 800d300:	bf00      	nop
}
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800d314:	231c      	movs	r3, #28
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	68b9      	ldr	r1, [r7, #8]
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f7fd fa84 	bl	800a828 <_txe_semaphore_create>
 800d320:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d004      	beq.n	800d332 <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	2108      	movs	r1, #8
 800d32c:	2002      	movs	r0, #2
 800d32e:	f7ff fba3 	bl	800ca78 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 800d332:	697b      	ldr	r3, [r7, #20]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3718      	adds	r7, #24
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7fd fb05 	bl	800a954 <_txe_semaphore_delete>
 800d34a:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d34c:	68fb      	ldr	r3, [r7, #12]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
	...

0800d358 <_ux_utility_semaphore_get>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b092      	sub	sp, #72	; 0x48
 800d35c:	af06      	add	r7, sp, #24
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 800d362:	f7fb fda5 	bl	8008eb0 <_tx_thread_identify>
 800d366:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 800d368:	f107 001c 	add.w	r0, r7, #28
 800d36c:	f107 0220 	add.w	r2, r7, #32
 800d370:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d374:	f107 0308 	add.w	r3, r7, #8
 800d378:	9304      	str	r3, [sp, #16]
 800d37a:	f107 030c 	add.w	r3, r7, #12
 800d37e:	9303      	str	r3, [sp, #12]
 800d380:	f107 0310 	add.w	r3, r7, #16
 800d384:	9302      	str	r3, [sp, #8]
 800d386:	f107 0314 	add.w	r3, r7, #20
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	f107 0318 	add.w	r3, r7, #24
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	4603      	mov	r3, r0
 800d394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d396:	f7fd fc99 	bl	800accc <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 800d39a:	4b0a      	ldr	r3, [pc, #40]	; (800d3c4 <_ux_utility_semaphore_get+0x6c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	699a      	ldr	r2, [r3, #24]
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d203      	bcs.n	800d3ae <_ux_utility_semaphore_get+0x56>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 800d3a6:	4b07      	ldr	r3, [pc, #28]	; (800d3c4 <_ux_utility_semaphore_get+0x6c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 800d3ae:	6839      	ldr	r1, [r7, #0]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7fd fb0d 	bl	800a9d0 <_txe_semaphore_get>
 800d3b6:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Return completion status.  */
    return(status);
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3730      	adds	r7, #48	; 0x30
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	24004cf8 	.word	0x24004cf8

0800d3c8 <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f7fd fb3f 	bl	800aa54 <_txe_semaphore_put>
 800d3d6:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	b085      	sub	sp, #20
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	1c5a      	adds	r2, r3, #1
 800d3ee:	607a      	str	r2, [r7, #4]
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	021b      	lsls	r3, r3, #8
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	89fb      	ldrh	r3, [r7, #14]
 800d400:	4313      	orrs	r3, r2
 800d402:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 800d404:	89fb      	ldrh	r3, [r7, #14]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b086      	sub	sp, #24
 800d416:	af00      	add	r7, sp, #0
 800d418:	60f8      	str	r0, [r7, #12]
 800d41a:	60b9      	str	r1, [r7, #8]
 800d41c:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d101      	bne.n	800d428 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 800d424:	23ff      	movs	r3, #255	; 0xff
 800d426:	e01d      	b.n	800d464 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 800d428:	2300      	movs	r3, #0
 800d42a:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	4413      	add	r3, r2
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d00d      	beq.n	800d454 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	3301      	adds	r3, #1
 800d43c:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 800d43e:	697a      	ldr	r2, [r7, #20]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	429a      	cmp	r2, r3
 800d444:	d9f2      	bls.n	800d42c <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 800d446:	22ff      	movs	r2, #255	; 0xff
 800d448:	2108      	movs	r1, #8
 800d44a:	2002      	movs	r0, #2
 800d44c:	f7ff fb14 	bl	800ca78 <_ux_system_error_handler>

            return(UX_ERROR);
 800d450:	23ff      	movs	r3, #255	; 0xff
 800d452:	e007      	b.n	800d464 <_ux_utility_string_length_check+0x52>
            break;
 800d454:	bf00      	nop
        }
    }

    if (string_length_ptr)
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 800d462:	2300      	movs	r3, #0
}
 800d464:	4618      	mov	r0, r3
 800d466:	3718      	adds	r7, #24
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(UX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b08e      	sub	sp, #56	; 0x38
 800d470:	af08      	add	r7, sp, #32
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 800d47a:	23b0      	movs	r3, #176	; 0xb0
 800d47c:	9306      	str	r3, [sp, #24]
 800d47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d480:	9305      	str	r3, [sp, #20]
 800d482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d484:	9304      	str	r3, [sp, #16]
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	9303      	str	r3, [sp, #12]
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	9302      	str	r3, [sp, #8]
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	9301      	str	r3, [sp, #4]
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	9300      	str	r3, [sp, #0]
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	68b9      	ldr	r1, [r7, #8]
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f7fd faf7 	bl	800aa90 <_txe_thread_create>
 800d4a2:	6178      	str	r0, [r7, #20]
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d004      	beq.n	800d4b4 <_ux_utility_thread_create+0x48>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800d4aa:	697a      	ldr	r2, [r7, #20]
 800d4ac:	2108      	movs	r1, #8
 800d4ae:	2002      	movs	r0, #2
 800d4b0:	f7ff fae2 	bl	800ca78 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800d4b4:	697b      	ldr	r3, [r7, #20]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <_ux_utility_thread_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(UX_THREAD *thread_ptr)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b084      	sub	sp, #16
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7fd fc6a 	bl	800ada0 <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f7fd fbd1 	bl	800ac74 <_txe_thread_delete>
 800d4d2:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <_ux_utility_thread_resume>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_resume(UX_THREAD *thread_ptr)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b084      	sub	sp, #16
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to resume USBX thread.  */
    status =  tx_thread_resume(thread_ptr);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7fd fc1e 	bl	800ad28 <_txe_thread_resume>
 800d4ec:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <_ux_utility_thread_suspend>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_suspend(UX_THREAD *thread_ptr)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to suspend USBX thread.  */
    status =  tx_thread_suspend(thread_ptr);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7fd fc2f 	bl	800ad64 <_txe_thread_suspend>
 800d506:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d508:	68fb      	ldr	r3, [r7, #12]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d524:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d003      	beq.n	800d548 <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	6938      	ldr	r0, [r7, #16]
 800d546:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 800d548:	2300      	movs	r3, #0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3718      	adds	r7, #24
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
	...

0800d554 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08a      	sub	sp, #40	; 0x28
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d566:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d568:	4b51      	ldr	r3, [pc, #324]	; (800d6b0 <_ux_device_class_cdc_acm_control_request+0x15c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	3320      	adds	r3, #32
 800d56e:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	336c      	adds	r3, #108	; 0x6c
 800d574:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d57c:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	3354      	adds	r3, #84	; 0x54
 800d582:	3302      	adds	r3, #2
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff ff2c 	bl	800d3e2 <_ux_utility_short_get>
 800d58a:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	3354      	adds	r3, #84	; 0x54
 800d590:	3306      	adds	r3, #6
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff ff25 	bl	800d3e2 <_ux_utility_short_get>
 800d598:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	2b22      	cmp	r3, #34	; 0x22
 800d5a2:	d009      	beq.n	800d5b8 <_ux_device_class_cdc_acm_control_request+0x64>
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	2b22      	cmp	r3, #34	; 0x22
 800d5a8:	d877      	bhi.n	800d69a <_ux_device_class_cdc_acm_control_request+0x146>
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2b20      	cmp	r3, #32
 800d5ae:	d051      	beq.n	800d654 <_ux_device_class_cdc_acm_control_request+0x100>
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	2b21      	cmp	r3, #33	; 0x21
 800d5b4:	d023      	beq.n	800d5fe <_ux_device_class_cdc_acm_control_request+0xaa>
 800d5b6:	e070      	b.n	800d69a <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f003 0301 	and.w	r3, r3, #1
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d003      	beq.n	800d5da <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d003      	beq.n	800d5ec <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d054      	beq.n	800d69e <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	69f8      	ldr	r0, [r7, #28]
 800d5fa:	4798      	blx	r3
            }

            break ;
 800d5fc:	e04f      	b.n	800d69e <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	2b07      	cmp	r3, #7
 800d602:	d901      	bls.n	800d608 <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 800d604:	2307      	movs	r3, #7
 800d606:	627b      	str	r3, [r7, #36]	; 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	68da      	ldr	r2, [r3, #12]
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d610:	4619      	mov	r1, r3
 800d612:	4610      	mov	r0, r2
 800d614:	f7ff fbcc 	bl	800cdb0 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	3304      	adds	r3, #4
 800d61e:	69fa      	ldr	r2, [r7, #28]
 800d620:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 800d624:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	3305      	adds	r3, #5
 800d62c:	69fa      	ldr	r2, [r7, #28]
 800d62e:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800d632:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	3306      	adds	r3, #6
 800d63a:	69fa      	ldr	r2, [r7, #28]
 800d63c:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800d640:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	2203      	movs	r2, #3
 800d646:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d64c:	6978      	ldr	r0, [r7, #20]
 800d64e:	f7ff f989 	bl	800c964 <_ux_device_stack_transfer_request>
            break; 
 800d652:	e027      	b.n	800d6a4 <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff fb83 	bl	800cd64 <_ux_utility_long_get>
 800d65e:	4602      	mov	r2, r0
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	791a      	ldrb	r2, [r3, #4]
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	795a      	ldrb	r2, [r3, #5]
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	799a      	ldrb	r2, [r3, #6]
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d008      	beq.n	800d6a2 <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	69f8      	ldr	r0, [r7, #28]
 800d696:	4798      	blx	r3
            }

            break ;
 800d698:	e003      	b.n	800d6a2 <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 800d69a:	23ff      	movs	r3, #255	; 0xff
 800d69c:	e003      	b.n	800d6a6 <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 800d69e:	bf00      	nop
 800d6a0:	e000      	b.n	800d6a4 <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 800d6a2:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3728      	adds	r7, #40	; 0x28
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	24004cf4 	.word	0x24004cf4

0800d6b4 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b088      	sub	sp, #32
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6a1b      	ldr	r3, [r3, #32]
 800d6c0:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6c6:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d2:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	695b      	ldr	r3, [r3, #20]
 800d6d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d105      	bne.n	800d6ec <_ux_device_class_cdc_acm_deactivate+0x38>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e8:	61fb      	str	r3, [r7, #28]
 800d6ea:	e002      	b.n	800d6f2 <_ux_device_class_cdc_acm_deactivate+0x3e>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f0:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800d6f2:	2126      	movs	r1, #38	; 0x26
 800d6f4:	69f8      	ldr	r0, [r7, #28]
 800d6f6:	f7ff f923 	bl	800c940 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 800d6fa:	2126      	movs	r1, #38	; 0x26
 800d6fc:	69b8      	ldr	r0, [r7, #24]
 800d6fe:	f7ff f91f 	bl	800c940 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 800d702:	2200      	movs	r2, #0
 800d704:	2107      	movs	r1, #7
 800d706:	6938      	ldr	r0, [r7, #16]
 800d708:	f000 f8bc 	bl	800d884 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d003      	beq.n	800d71c <_ux_device_class_cdc_acm_deactivate+0x68>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	6938      	ldr	r0, [r7, #16]
 800d71a:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	2200      	movs	r2, #0
 800d720:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 800d72c:	2300      	movs	r3, #0
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3720      	adds	r7, #32
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
	...

0800d738 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3b01      	subs	r3, #1
 800d746:	2b06      	cmp	r3, #6
 800d748:	d836      	bhi.n	800d7b8 <_ux_device_class_cdc_acm_entry+0x80>
 800d74a:	a201      	add	r2, pc, #4	; (adr r2, 800d750 <_ux_device_class_cdc_acm_entry+0x18>)
 800d74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d750:	0800d785 	.word	0x0800d785
 800d754:	0800d795 	.word	0x0800d795
 800d758:	0800d7a1 	.word	0x0800d7a1
 800d75c:	0800d7ad 	.word	0x0800d7ad
 800d760:	0800d76d 	.word	0x0800d76d
 800d764:	0800d7b9 	.word	0x0800d7b9
 800d768:	0800d779 	.word	0x0800d779
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f829 	bl	800d7c4 <_ux_device_class_cdc_acm_initialize>
 800d772:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	e020      	b.n	800d7ba <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 f9e1 	bl	800db40 <_ux_device_class_cdc_acm_uninitialize>
 800d77e:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	e01a      	b.n	800d7ba <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	695b      	ldr	r3, [r3, #20]
 800d788:	2b0a      	cmp	r3, #10
 800d78a:	d101      	bne.n	800d790 <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 800d78c:	2300      	movs	r3, #0
 800d78e:	e014      	b.n	800d7ba <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 800d790:	2357      	movs	r3, #87	; 0x57
 800d792:	e012      	b.n	800d7ba <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7ff febc 	bl	800d512 <_ux_device_class_cdc_acm_activate>
 800d79a:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	e00c      	b.n	800d7ba <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7ff ff87 	bl	800d6b4 <_ux_device_class_cdc_acm_deactivate>
 800d7a6:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	e006      	b.n	800d7ba <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7ff fed1 	bl	800d554 <_ux_device_class_cdc_acm_control_request>
 800d7b2:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	e000      	b.n	800d7ba <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800d7b8:	2354      	movs	r3, #84	; 0x54
    }   
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop

0800d7c4 <_ux_device_class_cdc_acm_initialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a1b      	ldr	r3, [r3, #32]
 800d7d0:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800d7d2:	2284      	movs	r2, #132	; 0x84
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	f7ff fb0e 	bl	800cdf8 <_ux_utility_memory_allocate>
 800d7dc:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d101      	bne.n	800d7e8 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 800d7e4:	2312      	movs	r3, #18
 800d7e6:	e045      	b.n	800d874 <_ux_device_class_cdc_acm_initialize+0xb0>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	693a      	ldr	r2, [r7, #16]
 800d7ec:	649a      	str	r2, [r3, #72]	; 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	685a      	ldr	r2, [r3, #4]
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	689a      	ldr	r2, [r3, #8]
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	60da      	str	r2, [r3, #12]

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	3310      	adds	r3, #16
 800d810:	491a      	ldr	r1, [pc, #104]	; (800d87c <_ux_device_class_cdc_acm_initialize+0xb8>)
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff fd30 	bl	800d278 <_ux_utility_mutex_create>
 800d818:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d004      	beq.n	800d82a <_ux_device_class_cdc_acm_initialize+0x66>
    {

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800d820:	6938      	ldr	r0, [r7, #16]
 800d822:	f7ff fc31 	bl	800d088 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800d826:	2317      	movs	r3, #23
 800d828:	e024      	b.n	800d874 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	3344      	adds	r3, #68	; 0x44
 800d82e:	4914      	ldr	r1, [pc, #80]	; (800d880 <_ux_device_class_cdc_acm_initialize+0xbc>)
 800d830:	4618      	mov	r0, r3
 800d832:	f7ff fd21 	bl	800d278 <_ux_utility_mutex_create>
 800d836:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d009      	beq.n	800d852 <_ux_device_class_cdc_acm_initialize+0x8e>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	3310      	adds	r3, #16
 800d842:	4618      	mov	r0, r3
 800d844:	f7ff fd31 	bl	800d2aa <_ux_utility_mutex_delete>

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800d848:	6938      	ldr	r0, [r7, #16]
 800d84a:	f7ff fc1d 	bl	800d088 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800d84e:	2317      	movs	r3, #23
 800d850:	e010      	b.n	800d874 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d858:	679a      	str	r2, [r3, #120]	; 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	2201      	movs	r2, #1
 800d85e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	2200      	movs	r2, #0
 800d866:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	2208      	movs	r2, #8
 800d86e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3718      	adds	r7, #24
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	08010988 	.word	0x08010988
 800d880:	080109a8 	.word	0x080109a8

0800d884 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08a      	sub	sp, #40	; 0x28
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 800d890:	2300      	movs	r3, #0
 800d892:	627b      	str	r3, [r7, #36]	; 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	3b01      	subs	r3, #1
 800d898:	2b08      	cmp	r3, #8
 800d89a:	f200 80b0 	bhi.w	800d9fe <_ux_device_class_cdc_acm_ioctl+0x17a>
 800d89e:	a201      	add	r2, pc, #4	; (adr r2, 800d8a4 <_ux_device_class_cdc_acm_ioctl+0x20>)
 800d8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a4:	0800d8c9 	.word	0x0800d8c9
 800d8a8:	0800d8f5 	.word	0x0800d8f5
 800d8ac:	0800d921 	.word	0x0800d921
 800d8b0:	0800d955 	.word	0x0800d955
 800d8b4:	0800d93b 	.word	0x0800d93b
 800d8b8:	0800d9ff 	.word	0x0800d9ff
 800d8bc:	0800d9ff 	.word	0x0800d9ff
 800d8c0:	0800d9b9 	.word	0x0800d9b9
 800d8c4:	0800d9b9 	.word	0x0800d9b9
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	791a      	ldrb	r2, [r3, #4]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	795a      	ldrb	r2, [r3, #5]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	799a      	ldrb	r2, [r3, #6]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            
            break;
 800d8f2:	e08d      	b.n	800da10 <_ux_device_class_cdc_acm_ioctl+0x18c>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	719a      	strb	r2, [r3, #6]
            
            break;
 800d91e:	e077      	b.n	800da10 <_ux_device_class_cdc_acm_ioctl+0x18c>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	705a      	strb	r2, [r3, #1]
            
            break;
 800d938:	e06a      	b.n	800da10 <_ux_device_class_cdc_acm_ioctl+0x18c>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	781a      	ldrb	r2, [r3, #0]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	785a      	ldrb	r2, [r3, #1]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            
            break;
 800d952:	e05d      	b.n	800da10 <_ux_device_class_cdc_acm_ioctl+0x18c>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d95e:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b01      	cmp	r3, #1
 800d964:	d002      	beq.n	800d96c <_ux_device_class_cdc_acm_ioctl+0xe8>
 800d966:	2b02      	cmp	r3, #2
 800d968:	d00a      	beq.n	800d980 <_ux_device_class_cdc_acm_ioctl+0xfc>
 800d96a:	e013      	b.n	800d994 <_ux_device_class_cdc_acm_ioctl+0x110>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800d96c:	6a3b      	ldr	r3, [r7, #32]
 800d96e:	695b      	ldr	r3, [r3, #20]
 800d970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d974:	2b00      	cmp	r3, #0
 800d976:	d110      	bne.n	800d99a <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800d978:	6a3b      	ldr	r3, [r7, #32]
 800d97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d97c:	623b      	str	r3, [r7, #32]
                }
                break;
 800d97e:	e00c      	b.n	800d99a <_ux_device_class_cdc_acm_ioctl+0x116>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	695b      	ldr	r3, [r3, #20]
 800d984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d008      	beq.n	800d99e <_ux_device_class_cdc_acm_ioctl+0x11a>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800d98c:	6a3b      	ldr	r3, [r7, #32]
 800d98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d990:	623b      	str	r3, [r7, #32]
                }
                break;
 800d992:	e004      	b.n	800d99e <_ux_device_class_cdc_acm_ioctl+0x11a>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 800d994:	2353      	movs	r3, #83	; 0x53
 800d996:	627b      	str	r3, [r7, #36]	; 0x24
 800d998:	e002      	b.n	800d9a0 <_ux_device_class_cdc_acm_ioctl+0x11c>
                break;
 800d99a:	bf00      	nop
 800d99c:	e000      	b.n	800d9a0 <_ux_device_class_cdc_acm_ioctl+0x11c>
                break;
 800d99e:	bf00      	nop
            }
        
            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d9a0:	6a3b      	ldr	r3, [r7, #32]
 800d9a2:	3330      	adds	r3, #48	; 0x30
 800d9a4:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d12f      	bne.n	800da0e <_ux_device_class_cdc_acm_ioctl+0x18a>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800d9ae:	21f9      	movs	r1, #249	; 0xf9
 800d9b0:	69b8      	ldr	r0, [r7, #24]
 800d9b2:	f7fe ff8b 	bl	800c8cc <_ux_device_stack_transfer_abort>

            }
#endif
            break;
 800d9b6:	e02a      	b.n	800da0e <_ux_device_class_cdc_acm_ioctl+0x18a>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c2:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800d9c4:	6a3b      	ldr	r3, [r7, #32]
 800d9c6:	695b      	ldr	r3, [r3, #20]
 800d9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	2a08      	cmp	r2, #8
 800d9d0:	d101      	bne.n	800d9d6 <_ux_device_class_cdc_acm_ioctl+0x152>
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	e000      	b.n	800d9d8 <_ux_device_class_cdc_acm_ioctl+0x154>
 800d9d6:	2280      	movs	r2, #128	; 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d002      	beq.n	800d9e2 <_ux_device_class_cdc_acm_ioctl+0x15e>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 800d9dc:	6a3b      	ldr	r3, [r7, #32]
 800d9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e0:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	3330      	adds	r3, #48	; 0x30
 800d9e6:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d102      	bne.n	800d9f6 <_ux_device_class_cdc_acm_ioctl+0x172>
                status = UX_ERROR;
 800d9f0:	23ff      	movs	r3, #255	; 0xff
 800d9f2:	627b      	str	r3, [r7, #36]	; 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 800d9f4:	e00c      	b.n	800da10 <_ux_device_class_cdc_acm_ioctl+0x18c>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 800d9fc:	e008      	b.n	800da10 <_ux_device_class_cdc_acm_ioctl+0x18c>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800d9fe:	2254      	movs	r2, #84	; 0x54
 800da00:	2107      	movs	r1, #7
 800da02:	2002      	movs	r0, #2
 800da04:	f7ff f838 	bl	800ca78 <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 800da08:	2354      	movs	r3, #84	; 0x54
 800da0a:	627b      	str	r3, [r7, #36]	; 0x24
 800da0c:	e000      	b.n	800da10 <_ux_device_class_cdc_acm_ioctl+0x18c>
            break;
 800da0e:	bf00      	nop
    }   

    /* Return status to caller.  */
    return(status);
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
          
}
 800da12:	4618      	mov	r0, r3
 800da14:	3728      	adds	r7, #40	; 0x28
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop

0800da1c <_ux_device_class_cdc_acm_read>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08a      	sub	sp, #40	; 0x28
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]

UX_SLAVE_ENDPOINT           *endpoint;
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
UINT                        status= UX_SUCCESS;
 800da2a:	2300      	movs	r3, #0
 800da2c:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800da2e:	4b43      	ldr	r3, [pc, #268]	; (800db3c <_ux_device_class_cdc_acm_read+0x120>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	3320      	adds	r3, #32
 800da34:	61bb      	str	r3, [r7, #24]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b03      	cmp	r3, #3
 800da3c:	d006      	beq.n	800da4c <_ux_device_class_cdc_acm_read+0x30>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 800da3e:	2251      	movs	r2, #81	; 0x51
 800da40:	2107      	movs	r1, #7
 800da42:	2002      	movs	r0, #2
 800da44:	f7ff f818 	bl	800ca78 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800da48:	2351      	movs	r3, #81	; 0x51
 800da4a:	e073      	b.n	800db34 <_ux_device_class_cdc_acm_read+0x118>
    }
    
    /* This is the first time we are activated. We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	617b      	str	r3, [r7, #20]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da56:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <_ux_device_class_cdc_acm_read+0x4e>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	3344      	adds	r3, #68	; 0x44
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff fc33 	bl	800d2da <_ux_utility_mutex_on>
        
    /* All CDC reading  are on the endpoint OUT, from the host.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da76:	3330      	adds	r3, #48	; 0x30
 800da78:	613b      	str	r3, [r7, #16]
    
    /* Reset the actual length.  */
    *actual_length =  0;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2200      	movs	r2, #0
 800da7e:	601a      	str	r2, [r3, #0]
    
    /* Check if we need more transactions.  */
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800da80:	e040      	b.n	800db04 <_ux_device_class_cdc_acm_read+0xe8>
    { 
        
        /* Check if we have enough in the local buffer.  */
        if (requested_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da84:	69db      	ldr	r3, [r3, #28]
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d903      	bls.n	800da94 <_ux_device_class_cdc_acm_read+0x78>
    
            /* We have too much to transfer.  */
            local_requested_length = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8e:	69db      	ldr	r3, [r3, #28]
 800da90:	61fb      	str	r3, [r7, #28]
 800da92:	e001      	b.n	800da98 <_ux_device_class_cdc_acm_read+0x7c>
            
        else
        
            /* We can proceed with the demanded length.  */
            local_requested_length = requested_length;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	61fb      	str	r3, [r7, #28]
        
        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 800da98:	69fa      	ldr	r2, [r7, #28]
 800da9a:	69f9      	ldr	r1, [r7, #28]
 800da9c:	6938      	ldr	r0, [r7, #16]
 800da9e:	f7fe ff61 	bl	800c964 <_ux_device_stack_transfer_request>
 800daa2:	6238      	str	r0, [r7, #32]
        
        /* Check the status */    
        if (status == UX_SUCCESS)
 800daa4:	6a3b      	ldr	r3, [r7, #32]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d125      	bne.n	800daf6 <_ux_device_class_cdc_acm_read+0xda>
        {

            /* We need to copy the buffer locally.  */
            _ux_utility_memory_copy(buffer, transfer_request -> ux_slave_transfer_request_data_pointer,
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	68d9      	ldr	r1, [r3, #12]
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	461a      	mov	r2, r3
 800dab4:	68b8      	ldr	r0, [r7, #8]
 800dab6:	f7ff fac8 	bl	800d04a <_ux_utility_memory_copy>
                            transfer_request -> ux_slave_transfer_request_actual_length); /* Use case of memcpy is verified. */
    
            /* Next buffer address.  */
            buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	699b      	ldr	r3, [r3, #24]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	4413      	add	r3, r2
 800dac2:	60bb      	str	r3, [r7, #8]
    
            /* Set the length actually received. */
            *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	699b      	ldr	r3, [r3, #24]
 800dacc:	441a      	add	r2, r3
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	601a      	str	r2, [r3, #0]
    
            /* Decrement what left has to be done.  */
            requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	699b      	ldr	r3, [r3, #24]
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	607b      	str	r3, [r7, #4]


            /* Is this a short packet or a ZLP indicating we are done with this transfer ?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length < endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	699a      	ldr	r2, [r3, #24]
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	69db      	ldr	r3, [r3, #28]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d20d      	bcs.n	800db04 <_ux_device_class_cdc_acm_read+0xe8>
            {            

                /* We are done.  */
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	3344      	adds	r3, #68	; 0x44
 800daec:	4618      	mov	r0, r3
 800daee:	f7ff fbe9 	bl	800d2c4 <_ux_utility_mutex_off>
    
                /* Return with success.  */
                return(UX_SUCCESS);
 800daf2:	2300      	movs	r3, #0
 800daf4:	e01e      	b.n	800db34 <_ux_device_class_cdc_acm_read+0x118>
        }
        else
        {
            
            /* Free Mutex resource.  */
            _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	3344      	adds	r3, #68	; 0x44
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff fbe2 	bl	800d2c4 <_ux_utility_mutex_off>
    
            /* We got an error.  */
            return(status);
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	e017      	b.n	800db34 <_ux_device_class_cdc_acm_read+0x118>
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b03      	cmp	r3, #3
 800db0a:	d102      	bne.n	800db12 <_ux_device_class_cdc_acm_read+0xf6>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1b7      	bne.n	800da82 <_ux_device_class_cdc_acm_read+0x66>
        }            
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3344      	adds	r3, #68	; 0x44
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff fbd4 	bl	800d2c4 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b03      	cmp	r3, #3
 800db22:	d006      	beq.n	800db32 <_ux_device_class_cdc_acm_read+0x116>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 800db24:	2222      	movs	r2, #34	; 0x22
 800db26:	2107      	movs	r1, #7
 800db28:	2002      	movs	r0, #2
 800db2a:	f7fe ffa5 	bl	800ca78 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 800db2e:	2322      	movs	r3, #34	; 0x22
 800db30:	e000      	b.n	800db34 <_ux_device_class_cdc_acm_read+0x118>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 800db32:	6a3b      	ldr	r3, [r7, #32]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3728      	adds	r7, #40	; 0x28
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	24004cf4 	.word	0x24004cf4

0800db40 <_ux_device_class_cdc_acm_uninitialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a1b      	ldr	r3, [r3, #32]
 800db4c:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db52:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00c      	beq.n	800db74 <_ux_device_class_cdc_acm_uninitialize+0x34>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	3310      	adds	r3, #16
 800db5e:	4618      	mov	r0, r3
 800db60:	f7ff fba3 	bl	800d2aa <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	3344      	adds	r3, #68	; 0x44
 800db68:	4618      	mov	r0, r3
 800db6a:	f7ff fb9e 	bl	800d2aa <_ux_utility_mutex_delete>
        _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack);
#endif
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800db6e:	68b8      	ldr	r0, [r7, #8]
 800db70:	f7ff fa8a 	bl	800d088 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
	...

0800db80 <_ux_device_class_cdc_acm_write>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b08c      	sub	sp, #48	; 0x30
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	603b      	str	r3, [r7, #0]
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
ULONG                       local_requested_length;
ULONG                       local_host_length;
UINT                        status = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800db92:	4b49      	ldr	r3, [pc, #292]	; (800dcb8 <_ux_device_class_cdc_acm_write+0x138>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	3320      	adds	r3, #32
 800db98:	61fb      	str	r3, [r7, #28]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b03      	cmp	r3, #3
 800dba0:	d006      	beq.n	800dbb0 <_ux_device_class_cdc_acm_write+0x30>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 800dba2:	2251      	movs	r2, #81	; 0x51
 800dba4:	2107      	movs	r1, #7
 800dba6:	2002      	movs	r0, #2
 800dba8:	f7fe ff66 	bl	800ca78 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800dbac:	2351      	movs	r3, #81	; 0x51
 800dbae:	e07f      	b.n	800dcb0 <_ux_device_class_cdc_acm_write+0x130>
    }
        
    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	61bb      	str	r3, [r7, #24]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbba:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800dbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbbe:	695b      	ldr	r3, [r3, #20]
 800dbc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d102      	bne.n	800dbce <_ux_device_class_cdc_acm_write+0x4e>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3310      	adds	r3, #16
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff fb81 	bl	800d2da <_ux_utility_mutex_on>
        
    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	3330      	adds	r3, #48	; 0x30
 800dbdc:	617b      	str	r3, [r7, #20]

    /* Reset the actual length.  */
    *actual_length =  0;
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	601a      	str	r2, [r3, #0]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	d10f      	bne.n	800dc0c <_ux_device_class_cdc_acm_write+0x8c>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10c      	bne.n	800dc0c <_ux_device_class_cdc_acm_write+0x8c>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	6978      	ldr	r0, [r7, #20]
 800dbf8:	f7fe feb4 	bl	800c964 <_ux_device_stack_transfer_request>
 800dbfc:	6238      	str	r0, [r7, #32]

        /* Free Mutex resource.  */
        _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	3310      	adds	r3, #16
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7ff fb5e 	bl	800d2c4 <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 800dc08:	6a3b      	ldr	r3, [r7, #32]
 800dc0a:	e051      	b.n	800dcb0 <_ux_device_class_cdc_acm_write+0x130>

    }
    else
    {    
        /* Check if we need more transactions.  */
        local_host_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 800dc0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc10:	627b      	str	r3, [r7, #36]	; 0x24
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800dc12:	e035      	b.n	800dc80 <_ux_device_class_cdc_acm_write+0x100>
        { 
    
            /* Check if we have enough in the local buffer.  */
            if (requested_length > UX_SLAVE_REQUEST_DATA_MAX_LENGTH)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc1a:	d903      	bls.n	800dc24 <_ux_device_class_cdc_acm_write+0xa4>
    
                /* We have too much to transfer.  */
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 800dc1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc20:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc22:	e004      	b.n	800dc2e <_ux_device_class_cdc_acm_write+0xae>
                
            else
            {

                /* We can proceed with the demanded length.  */
                local_requested_length = requested_length;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Assume the length match expectation.  */
                local_host_length = requested_length;
#else

                /* Assume expecting more, so ZLP is appended in stack.  */
                local_host_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH + 1;
 800dc28:	f240 2301 	movw	r3, #513	; 0x201
 800dc2c:	627b      	str	r3, [r7, #36]	; 0x24
#endif
            }
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc34:	68b9      	ldr	r1, [r7, #8]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff fa07 	bl	800d04a <_ux_utility_memory_copy>
                                buffer, local_requested_length); /* Use case of memcpy is verified. */
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_host_length);
 800dc3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc40:	6978      	ldr	r0, [r7, #20]
 800dc42:	f7fe fe8f 	bl	800c964 <_ux_device_stack_transfer_request>
 800dc46:	6238      	str	r0, [r7, #32]
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d111      	bne.n	800dc72 <_ux_device_class_cdc_acm_write+0xf2>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	699b      	ldr	r3, [r3, #24]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	4413      	add	r3, r2
 800dc56:	60bb      	str	r3, [r7, #8]
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	699b      	ldr	r3, [r3, #24]
 800dc60:	441a      	add	r2, r3
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	601a      	str	r2, [r3, #0]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	699b      	ldr	r3, [r3, #24]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	607b      	str	r3, [r7, #4]
 800dc70:	e006      	b.n	800dc80 <_ux_device_class_cdc_acm_write+0x100>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	3310      	adds	r3, #16
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7ff fb24 	bl	800d2c4 <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 800dc7c:	6a3b      	ldr	r3, [r7, #32]
 800dc7e:	e017      	b.n	800dcb0 <_ux_device_class_cdc_acm_write+0x130>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b03      	cmp	r3, #3
 800dc86:	d102      	bne.n	800dc8e <_ux_device_class_cdc_acm_write+0x10e>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1c2      	bne.n	800dc14 <_ux_device_class_cdc_acm_write+0x94>
        }
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	3310      	adds	r3, #16
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7ff fb16 	bl	800d2c4 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	d006      	beq.n	800dcae <_ux_device_class_cdc_acm_write+0x12e>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 800dca0:	2222      	movs	r2, #34	; 0x22
 800dca2:	2107      	movs	r1, #7
 800dca4:	2002      	movs	r0, #2
 800dca6:	f7fe fee7 	bl	800ca78 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 800dcaa:	2322      	movs	r3, #34	; 0x22
 800dcac:	e000      	b.n	800dcb0 <_ux_device_class_cdc_acm_write+0x130>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 800dcae:	6a3b      	ldr	r3, [r7, #32]
          
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3730      	adds	r7, #48	; 0x30
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	24004cf4 	.word	0x24004cf4

0800dcbc <_ux_device_class_hid_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b088      	sub	sp, #32
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]

UX_SLAVE_INTERFACE                      *interface_ptr;
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6a1b      	ldr	r3, [r3, #32]
 800dccc:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcd2:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	60fb      	str	r3, [r7, #12]

    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)hid;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	609a      	str	r2, [r3, #8]

    /* Now the opposite, store the interface in the class instance.  */
    hid -> ux_slave_class_hid_interface =  interface_ptr;
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	601a      	str	r2, [r3, #0]

    /* Locate the endpoints.  */
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcea:	61fb      	str	r3, [r7, #28]

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
 800dcec:	e011      	b.n	800dd12 <_ux_device_class_hid_activate+0x56>
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	699b      	ldr	r3, [r3, #24]
 800dcf2:	f003 0303 	and.w	r3, r3, #3
 800dcf6:	2b03      	cmp	r3, #3
 800dcf8:	d108      	bne.n	800dd0c <_ux_device_class_hid_activate+0x50>
             UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT)
        {
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	695b      	ldr	r3, [r3, #20]
 800dcfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d002      	beq.n	800dd0c <_ux_device_class_hid_activate+0x50>
                 UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
            {

                /* It's interrupt IN endpoint we need.  */
                endpoint_in = endpoint_interrupt;
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
                if (endpoint_out != UX_NULL)
#endif
                    break;
 800dd0a:	e005      	b.n	800dd18 <_ux_device_class_hid_activate+0x5c>
            }
#endif
        }

        /* Try next endpoint.  */
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd10:	61fb      	str	r3, [r7, #28]
    while (endpoint_interrupt != UX_NULL)
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1ea      	bne.n	800dcee <_ux_device_class_hid_activate+0x32>
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d101      	bne.n	800dd22 <_ux_device_class_hid_activate+0x66>
        return (UX_ERROR);
 800dd1e:	23ff      	movs	r3, #255	; 0xff
 800dd20:	e013      	b.n	800dd4a <_ux_device_class_hid_activate+0x8e>
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH >=
              endpoint_in -> ux_slave_endpoint_transfer_request.
                            ux_slave_transfer_request_transfer_length);

    /* Default HID protocol is report protocol.  */
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	2201      	movs	r2, #1
 800dd26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Save the endpoints in the hid instance.  */
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	69ba      	ldr	r2, [r7, #24]
 800dd2c:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Resume thread.  */
    _ux_device_thread_resume(&class_ptr -> ux_slave_class_thread);
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	3350      	adds	r3, #80	; 0x50
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff fbd3 	bl	800d4de <_ux_utility_thread_resume>
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#endif


    /* If there is a activate function call it.  */
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	695b      	ldr	r3, [r3, #20]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d003      	beq.n	800dd48 <_ux_device_class_hid_activate+0x8c>
    {

        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_activate(hid);
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	695b      	ldr	r3, [r3, #20]
 800dd44:	6938      	ldr	r0, [r7, #16]
 800dd46:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3720      	adds	r7, #32
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
	...

0800dd54 <_ux_device_class_hid_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b08c      	sub	sp, #48	; 0x30
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800dd5c:	4b5a      	ldr	r3, [pc, #360]	; (800dec8 <_ux_device_class_hid_control_request+0x174>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	3320      	adds	r3, #32
 800dd62:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800dd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd66:	336c      	adds	r3, #108	; 0x6c
 800dd68:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dd70:	627b      	str	r3, [r7, #36]	; 0x24
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800dd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd74:	3354      	adds	r3, #84	; 0x54
 800dd76:	3302      	adds	r3, #2
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7ff fb32 	bl	800d3e2 <_ux_utility_short_get>
 800dd7e:	6238      	str	r0, [r7, #32]
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd82:	3354      	adds	r3, #84	; 0x54
 800dd84:	3304      	adds	r3, #4
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7ff fb2b 	bl	800d3e2 <_ux_utility_short_get>
 800dd8c:	61f8      	str	r0, [r7, #28]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800dd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd90:	3354      	adds	r3, #84	; 0x54
 800dd92:	3306      	adds	r3, #6
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7ff fb24 	bl	800d3e2 <_ux_utility_short_get>
 800dd9a:	61b8      	str	r0, [r7, #24]

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800dda2:	75fb      	strb	r3, [r7, #23]
    
     /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddae:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	2b0a      	cmp	r3, #10
 800ddb6:	d87e      	bhi.n	800deb6 <_ux_device_class_hid_control_request+0x162>
 800ddb8:	a201      	add	r2, pc, #4	; (adr r2, 800ddc0 <_ux_device_class_hid_control_request+0x6c>)
 800ddba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddbe:	bf00      	nop
 800ddc0:	0800dded 	.word	0x0800dded
 800ddc4:	0800de1f 	.word	0x0800de1f
 800ddc8:	0800de97 	.word	0x0800de97
 800ddcc:	0800deb7 	.word	0x0800deb7
 800ddd0:	0800deb7 	.word	0x0800deb7
 800ddd4:	0800de11 	.word	0x0800de11
 800ddd8:	0800deb7 	.word	0x0800deb7
 800dddc:	0800deb7 	.word	0x0800deb7
 800dde0:	0800ddfb 	.word	0x0800ddfb
 800dde4:	0800de1f 	.word	0x0800de1f
 800dde8:	0800deaf 	.word	0x0800deaf
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	69fa      	ldr	r2, [r7, #28]
 800ddf0:	6a39      	ldr	r1, [r7, #32]
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f000 fb8e 	bl	800e514 <_ux_device_class_hid_report_get>
            break;
 800ddf8:	e060      	b.n	800debc <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_REPORT:

            /* Extract the descriptor type.  */
            descriptor_type =  (request_value & 0xff00) >> 8;
 800ddfa:	6a3b      	ldr	r3, [r7, #32]
 800ddfc:	0a1b      	lsrs	r3, r3, #8
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	60bb      	str	r3, [r7, #8]

            /* Get the requested report from the host.  */
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	69fa      	ldr	r2, [r7, #28]
 800de06:	68b9      	ldr	r1, [r7, #8]
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	f000 fc07 	bl	800e61c <_ux_device_class_hid_report_set>
            break;
 800de0e:	e055      	b.n	800debc <_ux_device_class_hid_control_request+0x168>

        case UX_GET_DESCRIPTOR:

            /* Send the requested descriptor to the host.  */
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	69fa      	ldr	r2, [r7, #28]
 800de14:	6a39      	ldr	r1, [r7, #32]
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f000 f878 	bl	800df0c <_ux_device_class_hid_descriptor_send>
            break;            
 800de1c:	e04e      	b.n	800debc <_ux_device_class_hid_control_request+0x168>
        case UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE:
        case UX_DEVICE_CLASS_HID_COMMAND_SET_IDLE:

            /* Ignore Report ID for now.  */

            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	2b02      	cmp	r3, #2
 800de22:	d10b      	bne.n	800de3c <_ux_device_class_hid_control_request+0xe8>
            {

                /* Send the idle rate.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	b2d2      	uxtb	r2, r2
 800de2e:	701a      	strb	r2, [r3, #0]
                _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 800de30:	69ba      	ldr	r2, [r7, #24]
 800de32:	2101      	movs	r1, #1
 800de34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de36:	f7fe fd95 	bl	800c964 <_ux_device_stack_transfer_request>
                        _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
#endif
                    }
                }
            }
            break;
 800de3a:	e03e      	b.n	800deba <_ux_device_class_hid_control_request+0x166>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de40:	b2db      	uxtb	r3, r3
 800de42:	7dfa      	ldrb	r2, [r7, #23]
 800de44:	429a      	cmp	r2, r3
 800de46:	d038      	beq.n	800deba <_ux_device_class_hid_control_request+0x166>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 800de48:	7dfa      	ldrb	r2, [r7, #23]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	64da      	str	r2, [r3, #76]	; 0x4c
                    if (duration == 0)
 800de4e:	7dfb      	ldrb	r3, [r7, #23]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d104      	bne.n	800de5e <_ux_device_class_hid_control_request+0x10a>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f04f 32ff 	mov.w	r2, #4294967295
 800de5a:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 800de5c:	e02d      	b.n	800deba <_ux_device_class_hid_control_request+0x166>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800de64:	fb02 f303 	mul.w	r3, r2, r3
 800de68:	4a18      	ldr	r2, [pc, #96]	; (800decc <_ux_device_class_hid_control_request+0x178>)
 800de6a:	fba2 2303 	umull	r2, r3, r2, r3
 800de6e:	099a      	lsrs	r2, r3, #6
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	651a      	str	r2, [r3, #80]	; 0x50
                        if (hid -> ux_device_class_hid_event_wait_timeout == 0)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d104      	bne.n	800de86 <_ux_device_class_hid_control_request+0x132>
                            hid -> ux_device_class_hid_event_wait_timeout ++;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de80:	1c5a      	adds	r2, r3, #1
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	651a      	str	r2, [r3, #80]	; 0x50
                        _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	3328      	adds	r3, #40	; 0x28
 800de8a:	2200      	movs	r2, #0
 800de8c:	2102      	movs	r1, #2
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe ff57 	bl	800cd42 <_ux_utility_event_flags_set>
            break;
 800de94:	e011      	b.n	800deba <_ux_device_class_hid_control_request+0x166>

        case UX_DEVICE_CLASS_HID_COMMAND_GET_PROTOCOL:

            /* Send the protocol.  */
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	b2d2      	uxtb	r2, r2
 800dea0:	701a      	strb	r2, [r3, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 800dea2:	69ba      	ldr	r2, [r7, #24]
 800dea4:	2101      	movs	r1, #1
 800dea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dea8:	f7fe fd5c 	bl	800c964 <_ux_device_stack_transfer_request>
            break;
 800deac:	e006      	b.n	800debc <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_PROTOCOL:

            /* Accept the protocol.  */
            hid -> ux_device_class_hid_protocol = request_value;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6a3a      	ldr	r2, [r7, #32]
 800deb2:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 800deb4:	e002      	b.n	800debc <_ux_device_class_hid_control_request+0x168>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 800deb6:	23ff      	movs	r3, #255	; 0xff
 800deb8:	e001      	b.n	800debe <_ux_device_class_hid_control_request+0x16a>
            break;
 800deba:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3730      	adds	r7, #48	; 0x30
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	24004cf4 	.word	0x24004cf4
 800decc:	10624dd3 	.word	0x10624dd3

0800ded0 <_ux_device_class_hid_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID         *hid;
UX_SLAVE_CLASS             *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a1b      	ldr	r3, [r3, #32]
 800dedc:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dee2:	60bb      	str	r3, [r7, #8]

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	2126      	movs	r1, #38	; 0x26
 800deea:	4618      	mov	r0, r3
 800deec:	f7fe fd28 	bl	800c940 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d003      	beq.n	800df00 <_ux_device_class_hid_deactivate+0x30>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	699b      	ldr	r3, [r3, #24]
 800defc:	68b8      	ldr	r0, [r7, #8]
 800defe:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
	...

0800df0c <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b08e      	sub	sp, #56	; 0x38
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
 800df18:	603b      	str	r3, [r7, #0]
UX_SLAVE_TRANSFER               *transfer_request;
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR *                         device_framework;
UCHAR *                         device_framework_end;
ULONG                           descriptor_length;
UINT                            status =  UX_ERROR;
 800df1a:	23ff      	movs	r3, #255	; 0xff
 800df1c:	633b      	str	r3, [r7, #48]	; 0x30
ULONG                           length;
UCHAR                           interface_number = 0xFF;
 800df1e:	23ff      	movs	r3, #255	; 0xff
 800df20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800df24:	4b5a      	ldr	r3, [pc, #360]	; (800e090 <_ux_device_class_hid_descriptor_send+0x184>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800df2a:	4b59      	ldr	r3, [pc, #356]	; (800e090 <_ux_device_class_hid_descriptor_send+0x184>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3320      	adds	r3, #32
 800df30:	623b      	str	r3, [r7, #32]
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800df32:	6a3b      	ldr	r3, [r7, #32]
 800df34:	333c      	adds	r3, #60	; 0x3c
 800df36:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	3330      	adds	r3, #48	; 0x30
 800df3c:	61bb      	str	r3, [r7, #24]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	2203      	movs	r2, #3
 800df42:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	0a1b      	lsrs	r3, r3, #8
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	60bb      	str	r3, [r7, #8]

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2b21      	cmp	r3, #33	; 0x21
 800df50:	d003      	beq.n	800df5a <_ux_device_class_hid_descriptor_send+0x4e>
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2b22      	cmp	r3, #34	; 0x22
 800df56:	d060      	beq.n	800e01a <_ux_device_class_hid_descriptor_send+0x10e>
 800df58:	e08b      	b.n	800e072 <_ux_device_class_hid_descriptor_send+0x166>
    {

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_HID:
    
        /* We should have a HID descriptor as part of the config descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800df5a:	4b4d      	ldr	r3, [pc, #308]	; (800e090 <_ux_device_class_hid_descriptor_send+0x184>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800df62:	637b      	str	r3, [r7, #52]	; 0x34
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 800df64:	4b4a      	ldr	r3, [pc, #296]	; (800e090 <_ux_device_class_hid_descriptor_send+0x184>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800df6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df6e:	4413      	add	r3, r2
 800df70:	613b      	str	r3, [r7, #16]

        /* Parse the device framework and locate the HID descriptor.  
           There is only one HID descriptor.  */
        while (device_framework < device_framework_end)
 800df72:	e042      	b.n	800dffa <_ux_device_class_hid_descriptor_send+0xee>
        {

            /* Get the type of the current descriptor.  */
            descriptor_type =  *(device_framework + 1);
 800df74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df76:	3301      	adds	r3, #1
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	60bb      	str	r3, [r7, #8]

            /* And its length.  */
            descriptor_length =  (ULONG) *device_framework;
 800df7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	617b      	str	r3, [r7, #20]

            /* Save interface number for later check.  */
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b04      	cmp	r3, #4
 800df86:	d103      	bne.n	800df90 <_ux_device_class_hid_descriptor_send+0x84>
                interface_number = *(device_framework + 2);
 800df88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df8a:	789b      	ldrb	r3, [r3, #2]
 800df8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            /* Check if this is a HID report descriptor.  */
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	2b21      	cmp	r3, #33	; 0x21
 800df94:	d12d      	bne.n	800dff2 <_ux_device_class_hid_descriptor_send+0xe6>
                (interface_number == (UCHAR)request_index))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	b2db      	uxtb	r3, r3
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 800df9a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d127      	bne.n	800dff2 <_ux_device_class_hid_descriptor_send+0xe6>
            {

                /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                   and do not return more than what is allowed.  */
                if (descriptor_length < host_length)
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d202      	bcs.n	800dfb0 <_ux_device_class_hid_descriptor_send+0xa4>
                    length =  descriptor_length;
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dfae:	e001      	b.n	800dfb4 <_ux_device_class_hid_descriptor_send+0xa8>
                else                            
                    length =  host_length;                
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Check buffer length, since descriptor length may exceed buffer...  */
                if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800dfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfba:	d90c      	bls.n	800dfd6 <_ux_device_class_hid_descriptor_send+0xca>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 800dfbc:	2212      	movs	r2, #18
 800dfbe:	2107      	movs	r1, #7
 800dfc0:	2002      	movs	r0, #2
 800dfc2:	f7fe fd59 	bl	800ca78 <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* Stall the endpoint.  */
                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	69fa      	ldr	r2, [r7, #28]
 800dfcc:	2114      	movs	r1, #20
 800dfce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfd0:	4798      	blx	r3
 800dfd2:	6338      	str	r0, [r7, #48]	; 0x30
                    break;
 800dfd4:	e015      	b.n	800e002 <_ux_device_class_hid_descriptor_send+0xf6>
                }

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7ff f833 	bl	800d04a <_ux_utility_memory_copy>
                                            device_framework, length); /* Use case of memcpy is verified. */

                /* We can return the configuration descriptor.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfe8:	69b8      	ldr	r0, [r7, #24]
 800dfea:	f7fe fcbb 	bl	800c964 <_ux_device_stack_transfer_request>
 800dfee:	6338      	str	r0, [r7, #48]	; 0x30
                break;
 800dff0:	e007      	b.n	800e002 <_ux_device_class_hid_descriptor_send+0xf6>
                
            }

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800dff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	4413      	add	r3, r2
 800dff8:	637b      	str	r3, [r7, #52]	; 0x34
        while (device_framework < device_framework_end)
 800dffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d3b8      	bcc.n	800df74 <_ux_device_class_hid_descriptor_send+0x68>
        }

        /* Stall the endpoint if not found or corrupt.  */
        if (device_framework >= device_framework_end)
 800e002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	429a      	cmp	r2, r3
 800e008:	d33b      	bcc.n	800e082 <_ux_device_class_hid_descriptor_send+0x176>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	69fa      	ldr	r2, [r7, #28]
 800e010:	2114      	movs	r1, #20
 800e012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e014:	4798      	blx	r3
 800e016:	6338      	str	r0, [r7, #48]	; 0x30

        break;
 800e018:	e033      	b.n	800e082 <_ux_device_class_hid_descriptor_send+0x176>

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_REPORT:
        
        /* Get the length of entire configuration descriptor.  */
        descriptor_length =  hid -> ux_device_class_hid_report_length;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	617b      	str	r3, [r7, #20]

        /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
           and do not return more than what is allowed.  */
        if (descriptor_length < host_length)
 800e020:	697a      	ldr	r2, [r7, #20]
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	429a      	cmp	r2, r3
 800e026:	d202      	bcs.n	800e02e <_ux_device_class_hid_descriptor_send+0x122>
            length =  descriptor_length;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e02c:	e001      	b.n	800e032 <_ux_device_class_hid_descriptor_send+0x126>
        else                            
            length =  host_length;                
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check buffer length, since total descriptors length may exceed buffer...  */
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e038:	d90c      	bls.n	800e054 <_ux_device_class_hid_descriptor_send+0x148>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 800e03a:	2212      	movs	r2, #18
 800e03c:	2107      	movs	r1, #7
 800e03e:	2002      	movs	r0, #2
 800e040:	f7fe fd1a 	bl	800ca78 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Stall the endpoint.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	69fa      	ldr	r2, [r7, #28]
 800e04a:	2114      	movs	r1, #20
 800e04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e04e:	4798      	blx	r3
 800e050:	6338      	str	r0, [r7, #48]	; 0x30
            break;
 800e052:	e017      	b.n	800e084 <_ux_device_class_hid_descriptor_send+0x178>
        }

        /* Copy the device descriptor into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	68d8      	ldr	r0, [r3, #12]
                                    hid -> ux_device_class_hid_report_address, length); /* Use case of memcpy is verified. */
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	69db      	ldr	r3, [r3, #28]
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 800e05c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e05e:	4619      	mov	r1, r3
 800e060:	f7fe fff3 	bl	800d04a <_ux_utility_memory_copy>

        /* We can return the report descriptor.  */
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e068:	69b8      	ldr	r0, [r7, #24]
 800e06a:	f7fe fc7b 	bl	800c964 <_ux_device_stack_transfer_request>
 800e06e:	6338      	str	r0, [r7, #48]	; 0x30
        break;
 800e070:	e008      	b.n	800e084 <_ux_device_class_hid_descriptor_send+0x178>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	69fa      	ldr	r2, [r7, #28]
 800e078:	2114      	movs	r1, #20
 800e07a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e07c:	4798      	blx	r3
        return(UX_ERROR);
 800e07e:	23ff      	movs	r3, #255	; 0xff
 800e080:	e001      	b.n	800e086 <_ux_device_class_hid_descriptor_send+0x17a>
        break;
 800e082:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 800e084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800e086:	4618      	mov	r0, r3
 800e088:	3738      	adds	r7, #56	; 0x38
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	24004cf4 	.word	0x24004cf4

0800e094 <_ux_device_class_hid_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	2b06      	cmp	r3, #6
 800e0a4:	d836      	bhi.n	800e114 <_ux_device_class_hid_entry+0x80>
 800e0a6:	a201      	add	r2, pc, #4	; (adr r2, 800e0ac <_ux_device_class_hid_entry+0x18>)
 800e0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ac:	0800e0e1 	.word	0x0800e0e1
 800e0b0:	0800e0f1 	.word	0x0800e0f1
 800e0b4:	0800e0fd 	.word	0x0800e0fd
 800e0b8:	0800e109 	.word	0x0800e109
 800e0bc:	0800e0c9 	.word	0x0800e0c9
 800e0c0:	0800e115 	.word	0x0800e115
 800e0c4:	0800e0d5 	.word	0x0800e0d5
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_initialize(command);
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 f8dd 	bl	800e288 <_ux_device_class_hid_initialize>
 800e0ce:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	e020      	b.n	800e116 <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_uninitialize(command);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 faeb 	bl	800e6b0 <_ux_device_class_hid_uninitialize>
 800e0da:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	e01a      	b.n	800e116 <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	695b      	ldr	r3, [r3, #20]
 800e0e4:	2b03      	cmp	r3, #3
 800e0e6:	d101      	bne.n	800e0ec <_ux_device_class_hid_entry+0x58>
            return(UX_SUCCESS);
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	e014      	b.n	800e116 <_ux_device_class_hid_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 800e0ec:	2357      	movs	r3, #87	; 0x57
 800e0ee:	e012      	b.n	800e116 <_ux_device_class_hid_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the hid thread needs to be activated.  */
        status =  _ux_device_class_hid_activate(command);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f7ff fde3 	bl	800dcbc <_ux_device_class_hid_activate>
 800e0f6:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	e00c      	b.n	800e116 <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the hid thread canceled.  */
        status =  _ux_device_class_hid_deactivate(command);
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7ff fee7 	bl	800ded0 <_ux_device_class_hid_deactivate>
 800e102:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	e006      	b.n	800e116 <_ux_device_class_hid_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_hid_control_request(command);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff fe23 	bl	800dd54 <_ux_device_class_hid_control_request>
 800e10e:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	e000      	b.n	800e116 <_ux_device_class_hid_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800e114:	2354      	movs	r3, #84	; 0x54
    }   
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop

0800e120 <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */                   
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e12a:	4b21      	ldr	r3, [pc, #132]	; (800e1b0 <_ux_device_class_hid_event_get+0x90>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	3320      	adds	r3, #32
 800e130:	60fb      	str	r3, [r7, #12]
    
    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2b03      	cmp	r3, #3
 800e138:	d001      	beq.n	800e13e <_ux_device_class_hid_event_get+0x1e>
        return(UX_DEVICE_HANDLE_UNKNOWN);
 800e13a:	2350      	movs	r3, #80	; 0x50
 800e13c:	e033      	b.n	800e1a6 <_ux_device_class_hid_event_get+0x86>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head == 
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        hid -> ux_device_class_hid_event_array_tail)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    if (hid -> ux_device_class_hid_event_array_head == 
 800e146:	429a      	cmp	r2, r3
 800e148:	d101      	bne.n	800e14e <_ux_device_class_hid_event_get+0x2e>

        /* No event to report.  */
        return(UX_ERROR);        
 800e14a:	23ff      	movs	r3, #255	; 0xff
 800e14c:	e02b      	b.n	800e1a6 <_ux_device_class_hid_event_get+0x86>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_tail;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e152:	60bb      	str	r3, [r7, #8]

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e158:	2b20      	cmp	r3, #32
 800e15a:	d902      	bls.n	800e162 <_ux_device_class_hid_event_get+0x42>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	2220      	movs	r2, #32
 800e160:	629a      	str	r2, [r3, #40]	; 0x28

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	629a      	str	r2, [r3, #40]	; 0x28
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer, current_hid_event -> ux_device_class_hid_event_buffer,
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	f103 0008 	add.w	r0, r3, #8
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	f103 0108 	add.w	r1, r3, #8
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e17a:	461a      	mov	r2, r3
 800e17c:	f7fe ff65 	bl	800d04a <_ux_utility_memory_copy>
                                current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* Adjust the tail pointer.  Check if we are at the end.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d104      	bne.n	800e198 <_ux_device_class_hid_event_get+0x78>

        /* We are at the end, go back to the beginning.  */
        hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	661a      	str	r2, [r3, #96]	; 0x60
 800e196:	e005      	b.n	800e1a4 <_ux_device_class_hid_event_get+0x84>
        
    else        
        /* We are not at the end, increment the tail position.  */
        hid -> ux_device_class_hid_event_array_tail++;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e19c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	24004cf4 	.word	0x24004cf4

0800e1b4 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1c2:	60bb      	str	r3, [r7, #8]
    
    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <_ux_device_class_hid_event_set+0x1a>
        return (UX_ERROR);
 800e1ca:	23ff      	movs	r3, #255	; 0xff
 800e1cc:	e057      	b.n	800e27e <_ux_device_class_hid_event_set+0xca>
    
    /* Calculate the next position.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d103      	bne.n	800e1e4 <_ux_device_class_hid_event_set+0x30>

        /* We are at the end, go back to the beginning.  */
        next_hid_event =  hid -> ux_device_class_hid_event_array;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1e0:	60fb      	str	r3, [r7, #12]
 800e1e2:	e002      	b.n	800e1ea <_ux_device_class_hid_event_set+0x36>
        
    else        

        /* We are not at the end, increment the head position.  */
        next_hid_event = current_hid_event + 1;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	332c      	adds	r3, #44	; 0x2c
 800e1e8:	60fb      	str	r3, [r7, #12]
    

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d101      	bne.n	800e1f8 <_ux_device_class_hid_event_set+0x44>
        return (UX_ERROR);
 800e1f4:	23ff      	movs	r3, #255	; 0xff
 800e1f6:	e042      	b.n	800e27e <_ux_device_class_hid_event_set+0xca>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1fc:	60bb      	str	r3, [r7, #8]

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a1b      	ldr	r3, [r3, #32]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d121      	bne.n	800e250 <_ux_device_class_hid_event_set+0x9c>
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e210:	3301      	adds	r3, #1
 800e212:	2b20      	cmp	r3, #32
 800e214:	d906      	bls.n	800e224 <_ux_device_class_hid_event_set+0x70>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 800e216:	2212      	movs	r2, #18
 800e218:	2107      	movs	r1, #7
 800e21a:	2002      	movs	r0, #2
 800e21c:	f7fe fc2c 	bl	800ca78 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 800e220:	2312      	movs	r3, #18
 800e222:	e02c      	b.n	800e27e <_ux_device_class_hid_event_set+0xca>
        }

        /* Store the report ID.  */
        *current_hid_event -> ux_device_class_hid_event_buffer =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);  
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	721a      	strb	r2, [r3, #8]
                
        /* Store the data itself.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer + 1, hid_event -> ux_device_class_hid_event_buffer,
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	3308      	adds	r3, #8
 800e232:	1c58      	adds	r0, r3, #1
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	f103 0108 	add.w	r1, r3, #8
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e23e:	461a      	mov	r2, r3
 800e240:	f7fe ff03 	bl	800d04a <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
    
        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	629a      	str	r2, [r3, #40]	; 0x28
 800e24e:	e00e      	b.n	800e26e <_ux_device_class_hid_event_set+0xba>
    }
    else
    {
    
        /* No report ID to consider.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer, hid_event -> ux_device_class_hid_event_buffer,
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	f103 0008 	add.w	r0, r3, #8
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	f103 0108 	add.w	r1, r3, #8
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e260:	461a      	mov	r2, r3
 800e262:	f7fe fef2 	bl	800d04a <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	629a      	str	r2, [r3, #40]	; 0x28
        hid -> ux_device_class_hid_event_state != UX_STATE_EXIT)
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#else

    /* Set an event to wake up the interrupt thread.  */
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	3328      	adds	r3, #40	; 0x28
 800e272:	2200      	movs	r2, #0
 800e274:	2101      	movs	r1, #1
 800e276:	4618      	mov	r0, r3
 800e278:	f7fe fd63 	bl	800cd42 <_ux_utility_event_flags_set>
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
	...

0800e288 <_ux_device_class_hid_initialize>:
/*                                            fixed compile warnings,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b08c      	sub	sp, #48	; 0x30
 800e28c:	af06      	add	r7, sp, #24
 800e28e:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS_HID_PARAMETER            *hid_parameter;
UX_SLAVE_CLASS                          *class_ptr;
UINT                                    status = UX_SUCCESS;
 800e290:	2300      	movs	r3, #0
 800e292:	617b      	str	r3, [r7, #20]


    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6a1b      	ldr	r3, [r3, #32]
 800e298:	613b      	str	r3, [r7, #16]

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 800e29a:	2268      	movs	r2, #104	; 0x68
 800e29c:	2100      	movs	r1, #0
 800e29e:	2000      	movs	r0, #0
 800e2a0:	f7fe fdaa 	bl	800cdf8 <_ux_utility_memory_allocate>
 800e2a4:	60f8      	str	r0, [r7, #12]

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d101      	bne.n	800e2b0 <_ux_device_class_hid_initialize+0x28>
        return(UX_MEMORY_INSUFFICIENT);
 800e2ac:	2312      	movs	r3, #18
 800e2ae:	e0a0      	b.n	800e3f2 <_ux_device_class_hid_initialize+0x16a>

    /* Save the address of the HID instance inside the HID container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) hid;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	649a      	str	r2, [r3, #72]	; 0x48

#if !defined(UX_DEVICE_STANDALONE)

    /* Allocate some memory for the thread stack. */
    class_ptr -> ux_slave_class_thread_stack =  
            _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_DEVICE_CLASS_HID_THREAD_STACK_SIZE);
 800e2b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	2000      	movs	r0, #0
 800e2be:	f7fe fd9b 	bl	800cdf8 <_ux_utility_memory_allocate>
 800e2c2:	4602      	mov	r2, r0
    class_ptr -> ux_slave_class_thread_stack =  
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    
    /* Check for successful allocation.  */
    if (class_ptr -> ux_slave_class_thread_stack == UX_NULL)
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d101      	bne.n	800e2d8 <_ux_device_class_hid_initialize+0x50>
        status = UX_MEMORY_INSUFFICIENT;
 800e2d4:	2312      	movs	r3, #18
 800e2d6:	617b      	str	r3, [r7, #20]

    /* This instance needs to be running in a different thread. So start
       a new thread. We pass a pointer to the class to the new thread.  This thread
       does not start until we have a instance of the class. */
    if (status == UX_SUCCESS)
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d118      	bne.n	800e310 <_ux_device_class_hid_initialize+0x88>
        status =  _ux_device_thread_create(&class_ptr -> ux_slave_class_thread, "ux_slave_hid_thread", 
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	9105      	str	r1, [sp, #20]
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	9104      	str	r1, [sp, #16]
 800e2f4:	2114      	movs	r1, #20
 800e2f6:	9103      	str	r1, [sp, #12]
 800e2f8:	2114      	movs	r1, #20
 800e2fa:	9102      	str	r1, [sp, #8]
 800e2fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e300:	9101      	str	r1, [sp, #4]
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	4613      	mov	r3, r2
 800e306:	4a3d      	ldr	r2, [pc, #244]	; (800e3fc <_ux_device_class_hid_initialize+0x174>)
 800e308:	493d      	ldr	r1, [pc, #244]	; (800e400 <_ux_device_class_hid_initialize+0x178>)
 800e30a:	f7ff f8af 	bl	800d46c <_ux_utility_thread_create>
 800e30e:	6178      	str	r0, [r7, #20]
    /* Set task function.  */
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d159      	bne.n	800e3ca <_ux_device_class_hid_initialize+0x142>
#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&(class_ptr -> ux_slave_class_thread), class_ptr)
#endif

        /* Get the pointer to the application parameters for the hid class.  */
        hid_parameter =  command -> ux_slave_class_command_parameter;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31a:	60bb      	str	r3, [r7, #8]

        /* Store all the application parameter information about the report.  */
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	689a      	ldr	r2, [r3, #8]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	61da      	str	r2, [r3, #28]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	691a      	ldr	r2, [r3, #16]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	625a      	str	r2, [r3, #36]	; 0x24
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	68da      	ldr	r2, [r3, #12]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	621a      	str	r2, [r3, #32]

        /* Store the callback function.  */
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	695a      	ldr	r2, [r3, #20]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	60da      	str	r2, [r3, #12]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	699a      	ldr	r2, [r3, #24]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	611a      	str	r2, [r3, #16]

        /* Create the event array.  */
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID_EVENT), UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE);
 800e344:	2310      	movs	r3, #16
 800e346:	222c      	movs	r2, #44	; 0x2c
 800e348:	2100      	movs	r1, #0
 800e34a:	2000      	movs	r0, #0
 800e34c:	f7fe fe58 	bl	800d000 <_ux_utility_memory_allocate_mulc_safe>
 800e350:	4602      	mov	r2, r0
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	659a      	str	r2, [r3, #88]	; 0x58

        /* Check for successful allocation.  */
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d02d      	beq.n	800e3ba <_ux_device_class_hid_initialize+0x132>
        {

            /* Initialize the head and tail of the notification round robin buffers. 
               At first, the head and tail are pointing to the beginning of the array.  */
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	65da      	str	r2, [r3, #92]	; 0x5c
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	661a      	str	r2, [r3, #96]	; 0x60
            hid -> ux_device_class_hid_event_array_end  =  hid -> ux_device_class_hid_event_array + UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e372:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	665a      	str	r2, [r3, #100]	; 0x64

            /* Store the start and stop signals if needed by the application.  */
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	615a      	str	r2, [r3, #20]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	685a      	ldr	r2, [r3, #4]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	619a      	str	r2, [r3, #24]

            /* By default no event wait timeout.  */
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f04f 32ff 	mov.w	r2, #4294967295
 800e390:	651a      	str	r2, [r3, #80]	; 0x50

#if !defined(UX_DEVICE_STANDALONE)

            /* Create a event flag group for the hid class to synchronize with the event interrupt thread.  */
            status =  _ux_utility_event_flags_create(&hid -> ux_device_class_hid_event_flags_group, "ux_device_class_hid_event_flag");
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	3328      	adds	r3, #40	; 0x28
 800e396:	491b      	ldr	r1, [pc, #108]	; (800e404 <_ux_device_class_hid_initialize+0x17c>)
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fe fc93 	bl	800ccc4 <_ux_utility_event_flags_create>
 800e39e:	6178      	str	r0, [r7, #20]

            /* Check status.  */
            if (status != UX_SUCCESS)
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d007      	beq.n	800e3b6 <_ux_device_class_hid_initialize+0x12e>
                status = UX_EVENT_ERROR;
 800e3a6:	2318      	movs	r3, #24
 800e3a8:	617b      	str	r3, [r7, #20]
#if !defined(UX_DEVICE_STANDALONE) || defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)

            /* There is still initialization activities after array creation,
             * and some error occurs in this stage.  */
            /* Free allocated event array memory.  */
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fe fe6a 	bl	800d088 <_ux_utility_memory_free>
 800e3b4:	e003      	b.n	800e3be <_ux_device_class_hid_initialize+0x136>
                return(status);
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	e01b      	b.n	800e3f2 <_ux_device_class_hid_initialize+0x16a>
#endif

        }
        else
            status =  UX_MEMORY_INSUFFICIENT;
 800e3ba:	2312      	movs	r3, #18
 800e3bc:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete thread.  */
        _ux_device_thread_delete(&class_ptr -> ux_slave_class_thread);
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	3350      	adds	r3, #80	; 0x50
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff f87b 	bl	800d4be <_ux_utility_thread_delete>
 800e3c8:	e001      	b.n	800e3ce <_ux_device_class_hid_initialize+0x146>
#endif
    }
    else
        status = (UX_THREAD_ERROR);
 800e3ca:	2316      	movs	r3, #22
 800e3cc:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

    /* Free stack. */
    if (class_ptr -> ux_slave_class_thread_stack)
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d005      	beq.n	800e3e4 <_ux_device_class_hid_initialize+0x15c>
        _ux_utility_memory_free(class_ptr -> ux_slave_class_thread_stack);
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fe fe52 	bl	800d088 <_ux_utility_memory_free>
#endif

    /* Unmount instance. */
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	649a      	str	r2, [r3, #72]	; 0x48

    /* Free HID instance. */
    _ux_utility_memory_free(hid);
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f7fe fe4c 	bl	800d088 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800e3f0:	697b      	ldr	r3, [r7, #20]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3718      	adds	r7, #24
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	0800e409 	.word	0x0800e409
 800e400:	080109cc 	.word	0x080109cc
 800e404:	080109e0 	.word	0x080109e0

0800e408 <_ux_device_class_hid_interrupt_thread>:
/*                                            off for standalone compile, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_hid_interrupt_thread(ULONG hid_class)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b096      	sub	sp, #88	; 0x58
 800e40c:	af02      	add	r7, sp, #8
 800e40e:	6078      	str	r0, [r7, #4]
UCHAR                       *buffer;
ULONG                       actual_flags;


    /* Cast properly the hid instance.  */
    UX_THREAD_EXTENSION_PTR_GET(class_ptr, UX_SLAVE_CLASS, hid_class)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    /* Get the hid instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 800e414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e418:	64bb      	str	r3, [r7, #72]	; 0x48
    
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e41a:	4b3d      	ldr	r3, [pc, #244]	; (800e510 <_ux_device_class_hid_interrupt_thread+0x108>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3320      	adds	r3, #32
 800e420:	647b      	str	r3, [r7, #68]	; 0x44
    /* This thread runs forever but can be suspended or resumed.  */
    while(1)
    {

        /* All HID events are on the interrupt endpoint IN, from the host.  */
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 800e422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	3330      	adds	r3, #48	; 0x30
 800e428:	643b      	str	r3, [r7, #64]	; 0x40

        /* As long as the device is in the CONFIGURED state.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800e42a:	e064      	b.n	800e4f6 <_ux_device_class_hid_interrupt_thread+0xee>
        { 

            /* Wait until we have a event sent by the application
               or a change in the idle state to send last or empty report.  */
            status =  _ux_utility_event_flags_get(&hid -> ux_device_class_hid_event_flags_group,
 800e42c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e42e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800e432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e436:	f107 0208 	add.w	r2, r7, #8
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	4613      	mov	r3, r2
 800e43e:	2201      	movs	r2, #1
 800e440:	2103      	movs	r1, #3
 800e442:	f7fe fc64 	bl	800cd0e <_ux_utility_event_flags_get>
 800e446:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    UX_DEVICE_CLASS_HID_EVENTS_MASK, UX_OR_CLEAR, &actual_flags,
                                                    hid -> ux_device_class_hid_event_wait_timeout);

            /* If there is no event, check if we have timeout defined.  */
            if (status == UX_NO_EVENTS)
 800e448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e44a:	2b07      	cmp	r3, #7
 800e44c:	d124      	bne.n	800e498 <_ux_device_class_hid_interrupt_thread+0x90>
            {

                /* There is no event exists on timeout, insert last.  */

                /* Check if no request been ready.  */
                if (transfer_request_in -> ux_slave_transfer_request_requested_length == 0)
 800e44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e450:	695b      	ldr	r3, [r3, #20]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10b      	bne.n	800e46e <_ux_device_class_hid_interrupt_thread+0x66>
                {

                    /* Assume the request use whole interrupt transfer payload.  */
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
                            transfer_request_in -> ux_slave_transfer_request_transfer_length;
 800e456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e458:	6a1a      	ldr	r2, [r3, #32]
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
 800e45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e45c:	615a      	str	r2, [r3, #20]

                    /* Set the data to zeros.  */
                    _ux_utility_memory_set(
                        transfer_request_in -> ux_slave_transfer_request_data_pointer, 0,
 800e45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e460:	68d8      	ldr	r0, [r3, #12]
                    _ux_utility_memory_set(
 800e462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	461a      	mov	r2, r3
 800e468:	2100      	movs	r1, #0
 800e46a:	f7fe feeb 	bl	800d244 <_ux_utility_memory_set>
                        transfer_request_in -> ux_slave_transfer_request_requested_length); /* Use case of memset is verified. */
                }

                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, 
 800e46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e470:	6959      	ldr	r1, [r3, #20]
 800e472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e474:	695b      	ldr	r3, [r3, #20]
 800e476:	461a      	mov	r2, r3
 800e478:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e47a:	f7fe fa73 	bl	800c964 <_ux_device_stack_transfer_request>
 800e47e:	63f8      	str	r0, [r7, #60]	; 0x3c
                                transfer_request_in -> ux_slave_transfer_request_requested_length,
                                transfer_request_in -> ux_slave_transfer_request_requested_length);

                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 800e480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e482:	2b00      	cmp	r3, #0
 800e484:	d037      	beq.n	800e4f6 <_ux_device_class_hid_interrupt_thread+0xee>
 800e486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e488:	2b26      	cmp	r3, #38	; 0x26
 800e48a:	d034      	beq.n	800e4f6 <_ux_device_class_hid_interrupt_thread+0xee>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 800e48c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e48e:	2107      	movs	r1, #7
 800e490:	2002      	movs	r0, #2
 800e492:	f7fe faf1 	bl	800ca78 <_ux_system_error_handler>

                /* Next: check events.  */
                continue;
 800e496:	e02e      	b.n	800e4f6 <_ux_device_class_hid_interrupt_thread+0xee>
            }

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 800e498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d022      	beq.n	800e4e4 <_ux_device_class_hid_interrupt_thread+0xdc>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 800e49e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4a0:	2107      	movs	r1, #7
 800e4a2:	2002      	movs	r0, #2
 800e4a4:	f7fe fae8 	bl	800ca78 <_ux_system_error_handler>

                /* Do not proceed.  */
                return;
 800e4a8:	e02f      	b.n	800e50a <_ux_device_class_hid_interrupt_thread+0x102>
            /* Check if we have an event to report.  */
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
            {

                /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
                buffer =  transfer_request_in -> ux_slave_transfer_request_data_pointer;
 800e4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	63bb      	str	r3, [r7, #56]	; 0x38
            
                /* Copy the event buffer into the target buffer.  */
                _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 800e4b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4b2:	f107 030c 	add.w	r3, r7, #12
 800e4b6:	3308      	adds	r3, #8
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4bc:	f7fe fdc5 	bl	800d04a <_ux_utility_memory_copy>
            
                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, hid_event.ux_device_class_hid_event_length, 
 800e4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e4c8:	f7fe fa4c 	bl	800c964 <_ux_device_stack_transfer_request>
 800e4cc:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                                hid_event.ux_device_class_hid_event_length);
                
                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 800e4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d007      	beq.n	800e4e4 <_ux_device_class_hid_interrupt_thread+0xdc>
 800e4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d6:	2b26      	cmp	r3, #38	; 0x26
 800e4d8:	d004      	beq.n	800e4e4 <_ux_device_class_hid_interrupt_thread+0xdc>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 800e4da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4dc:	2107      	movs	r1, #7
 800e4de:	2002      	movs	r0, #2
 800e4e0:	f7fe faca 	bl	800ca78 <_ux_system_error_handler>
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
 800e4e4:	f107 030c 	add.w	r3, r7, #12
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e4ec:	f7ff fe18 	bl	800e120 <_ux_device_class_hid_event_get>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0d9      	beq.n	800e4aa <_ux_device_class_hid_interrupt_thread+0xa2>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800e4f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2b03      	cmp	r3, #3
 800e4fc:	d096      	beq.n	800e42c <_ux_device_class_hid_interrupt_thread+0x24>
            }                
        }
             
        /* We need to suspend ourselves. We will be resumed by the device enumeration module.  */
        _ux_device_thread_suspend(&class_ptr -> ux_slave_class_thread);
 800e4fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e500:	3350      	adds	r3, #80	; 0x50
 800e502:	4618      	mov	r0, r3
 800e504:	f7fe fff8 	bl	800d4f8 <_ux_utility_thread_suspend>
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 800e508:	e78b      	b.n	800e422 <_ux_device_class_hid_interrupt_thread+0x1a>
    }
}
 800e50a:	3750      	adds	r7, #80	; 0x50
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	24004cf4 	.word	0x24004cf4

0800e514 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b096      	sub	sp, #88	; 0x58
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
 800e520:	603b      	str	r3, [r7, #0]
UCHAR                           report_id;
UCHAR                           report_type;
UX_SLAVE_CLASS_HID_EVENT        hid_event;
ULONG                           hid_event_length;
UCHAR                           *buffer;
UINT                            status =  UX_ERROR;
 800e522:	23ff      	movs	r3, #255	; 0xff
 800e524:	653b      	str	r3, [r7, #80]	; 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e526:	4b3c      	ldr	r3, [pc, #240]	; (800e618 <_ux_device_class_hid_report_get+0x104>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	3320      	adds	r3, #32
 800e52c:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800e52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e530:	333c      	adds	r3, #60	; 0x3c
 800e532:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800e534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e536:	3330      	adds	r3, #48	; 0x30
 800e538:	647b      	str	r3, [r7, #68]	; 0x44

    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 800e53a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e53c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e540:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 800e544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e546:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800e54a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800e54e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e550:	2203      	movs	r2, #3
 800e552:	629a      	str	r2, [r3, #40]	; 0x28

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800e554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 800e55a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e55e:	613b      	str	r3, [r7, #16]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 800e560:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e564:	617b      	str	r3, [r7, #20]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 800e566:	2320      	movs	r3, #32
 800e568:	63bb      	str	r3, [r7, #56]	; 0x38

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 800e56a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d10b      	bne.n	800e58a <_ux_device_class_hid_report_get+0x76>
        hid -> ux_device_class_hid_report_id != UX_TRUE)
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6a1b      	ldr	r3, [r3, #32]
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 800e576:	2b01      	cmp	r3, #1
 800e578:	d007      	beq.n	800e58a <_ux_device_class_hid_report_get+0x76>

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 800e57a:	f107 0310 	add.w	r3, r7, #16
 800e57e:	4619      	mov	r1, r3
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7ff fdcd 	bl	800e120 <_ux_device_class_hid_event_get>
 800e586:	6538      	str	r0, [r7, #80]	; 0x50
 800e588:	e00b      	b.n	800e5a2 <_ux_device_class_hid_report_get+0x8e>
    /* Try to get event from application callback.  */
    else
    {
        
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d007      	beq.n	800e5a2 <_ux_device_class_hid_report_get+0x8e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	691b      	ldr	r3, [r3, #16]
 800e596:	f107 0210 	add.w	r2, r7, #16
 800e59a:	4611      	mov	r1, r2
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	4798      	blx	r3
 800e5a0:	6538      	str	r0, [r7, #80]	; 0x50
    }

    if (status == UX_SUCCESS)
 800e5a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d11d      	bne.n	800e5e4 <_ux_device_class_hid_report_get+0xd0>
    {

        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5aa:	683a      	ldr	r2, [r7, #0]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d202      	bcs.n	800e5b6 <_ux_device_class_hid_report_get+0xa2>
            hid_event_length =  host_length;
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	657b      	str	r3, [r7, #84]	; 0x54
 800e5b4:	e001      	b.n	800e5ba <_ux_device_class_hid_report_get+0xa6>
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b8:	657b      	str	r3, [r7, #84]	; 0x54
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e5ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5c0:	d902      	bls.n	800e5c8 <_ux_device_class_hid_report_get+0xb4>
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800e5c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5c6:	657b      	str	r3, [r7, #84]	; 0x54

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 800e5c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5ce:	f7fe fe39 	bl	800d244 <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 800e5d2:	f107 0310 	add.w	r3, r7, #16
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5de:	f7fe fd34 	bl	800d04a <_ux_utility_memory_copy>
 800e5e2:	e00d      	b.n	800e600 <_ux_device_class_hid_report_get+0xec>
    {

        /* There's no event, so send back zero'd memory.  */

        /* Get the length to send back to the host.  */
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	2bff      	cmp	r3, #255	; 0xff
 800e5e8:	d802      	bhi.n	800e5f0 <_ux_device_class_hid_report_get+0xdc>
            hid_event_length =  host_length;
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	657b      	str	r3, [r7, #84]	; 0x54
 800e5ee:	e002      	b.n	800e5f6 <_ux_device_class_hid_report_get+0xe2>
        else
            hid_event_length =  UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800e5f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5f4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 800e5f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5fc:	f7fe fe22 	bl	800d244 <_ux_utility_memory_set>
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 800e600:	683a      	ldr	r2, [r7, #0]
 800e602:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e604:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e606:	f7fe f9ad 	bl	800c964 <_ux_device_stack_transfer_request>
 800e60a:	6538      	str	r0, [r7, #80]	; 0x50

    /* Return the status to the caller.  */
    return(status);
 800e60c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3758      	adds	r7, #88	; 0x58
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	24004cf4 	.word	0x24004cf4

0800e61c <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b094      	sub	sp, #80	; 0x50
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e62a:	4b20      	ldr	r3, [pc, #128]	; (800e6ac <_ux_device_class_hid_report_set+0x90>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	3320      	adds	r3, #32
 800e630:	64bb      	str	r3, [r7, #72]	; 0x48
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800e632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e634:	333c      	adds	r3, #60	; 0x3c
 800e636:	647b      	str	r3, [r7, #68]	; 0x44

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800e638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e63a:	3330      	adds	r3, #48	; 0x30
 800e63c:	643b      	str	r3, [r7, #64]	; 0x40
    
    /* Set the event type to OUTPUT.  */
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	61bb      	str	r3, [r7, #24]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 800e642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	6a1b      	ldr	r3, [r3, #32]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d10a      	bne.n	800e666 <_ux_device_class_hid_report_set+0x4a>
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 800e650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	617b      	str	r3, [r7, #20]

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 800e656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e658:	699b      	ldr	r3, [r3, #24]
 800e65a:	3b01      	subs	r3, #1
 800e65c:	63fb      	str	r3, [r7, #60]	; 0x3c
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 800e65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e660:	3301      	adds	r3, #1
 800e662:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e664:	e004      	b.n	800e670 <_ux_device_class_hid_report_set+0x54>
    }
        
    else
    {    
        /* Set the report ID, not used here.  */
        hid_event.ux_device_class_hid_event_report_id = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	617b      	str	r3, [r7, #20]

        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
 800e66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e66c:	699b      	ldr	r3, [r3, #24]
 800e66e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 800e670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e672:	2b20      	cmp	r3, #32
 800e674:	d901      	bls.n	800e67a <_ux_device_class_hid_report_set+0x5e>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 800e676:	2320      	movs	r3, #32
 800e678:	63fb      	str	r3, [r7, #60]	; 0x3c
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 800e67a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e67c:	f107 0314 	add.w	r3, r7, #20
 800e680:	3308      	adds	r3, #8
 800e682:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e684:	4618      	mov	r0, r3
 800e686:	f7fe fce0 	bl	800d04a <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d006      	beq.n	800e6a0 <_ux_device_class_hid_report_set+0x84>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	f107 0214 	add.w	r2, r7, #20
 800e69a:	4611      	mov	r1, r2
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3750      	adds	r7, #80	; 0x50
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	24004cf4 	.word	0x24004cf4

0800e6b0 <_ux_device_class_hid_uninitialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class_ptr;


    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a1b      	ldr	r3, [r3, #32]
 800e6bc:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6c2:	60bb      	str	r3, [r7, #8]

#if !defined(UX_DEVICE_STANDALONE)

    /* Remove HID thread.  */
    _ux_device_thread_delete(&class_ptr -> ux_slave_class_thread);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	3350      	adds	r3, #80	; 0x50
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fe fef8 	bl	800d4be <_ux_utility_thread_delete>

    /* Remove the thread used by HID.  */
    _ux_utility_memory_free(class_ptr -> ux_slave_class_thread_stack);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fe fcd7 	bl	800d088 <_ux_utility_memory_free>

    /* Delete the event flag group for the hid class.  */
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	3328      	adds	r3, #40	; 0x28
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fe fb08 	bl	800ccf4 <_ux_utility_event_flags_delete>
#endif

    /* Free memory for the array. */
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fe fccd 	bl	800d088 <_ux_utility_memory_free>
        hid -> ux_device_class_hid_receiver ->
            ux_device_class_hid_receiver_uninitialize(hid -> ux_device_class_hid_receiver);
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 800e6ee:	68b8      	ldr	r0, [r7, #8]
 800e6f0:	f7fe fcca 	bl	800d088 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b082      	sub	sp, #8
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2280      	movs	r2, #128	; 0x80
 800e70c:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 800e714:	6838      	ldr	r0, [r7, #0]
 800e716:	f7fd f895 	bl	800b844 <_ux_device_stack_control_request_process>
}
 800e71a:	bf00      	nop
 800e71c:	3708      	adds	r7, #8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b084      	sub	sp, #16
 800e726:	af00      	add	r7, sp, #0
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	60b9      	str	r1, [r7, #8]
 800e72c:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2200      	movs	r2, #0
 800e732:	625a      	str	r2, [r3, #36]	; 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2280      	movs	r2, #128	; 0x80
 800e738:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800e73a:	68b8      	ldr	r0, [r7, #8]
 800e73c:	f7fd f882 	bl	800b844 <_ux_device_stack_control_request_process>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d108      	bne.n	800e758 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2203      	movs	r2, #3
 800e74a:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800e74c:	2300      	movs	r3, #0
 800e74e:	2200      	movs	r2, #0
 800e750:	2100      	movs	r1, #0
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f7f3 fd40 	bl	80021d8 <HAL_PCD_EP_Transmit>
    }
}
 800e758:	bf00      	nop
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2280      	movs	r2, #128	; 0x80
 800e770:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800e772:	68b8      	ldr	r0, [r7, #8]
 800e774:	f7fd f866 	bl	800b844 <_ux_device_stack_control_request_process>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d108      	bne.n	800e790 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2204      	movs	r2, #4
 800e782:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800e784:	2300      	movs	r3, #0
 800e786:	2200      	movs	r2, #0
 800e788:	2100      	movs	r1, #0
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7f3 fd24 	bl	80021d8 <HAL_PCD_EP_Transmit>
    }
}
 800e790:	bf00      	nop
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b088      	sub	sp, #32
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e7a0:	4b39      	ldr	r3, [pc, #228]	; (800e888 <HAL_PCD_SetupStageCallback+0xf0>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	69db      	ldr	r3, [r3, #28]
 800e7aa:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3330      	adds	r3, #48	; 0x30
 800e7b8:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e7c6:	2208      	movs	r2, #8
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	f7fe fc3e 	bl	800d04a <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	f023 020e 	bic.w	r2, r3, #14
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e7f2:	b25b      	sxtb	r3, r3
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	da04      	bge.n	800e802 <HAL_PCD_SetupStageCallback+0x6a>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 800e7f8:	6939      	ldr	r1, [r7, #16]
 800e7fa:	6978      	ldr	r0, [r7, #20]
 800e7fc:	f7ff ff7f 	bl	800e6fe <_ux_dcd_stm32_setup_in>
 800e800:	e03f      	b.n	800e882 <HAL_PCD_SetupStageCallback+0xea>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	2200      	movs	r2, #0
 800e806:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10a      	bne.n	800e828 <HAL_PCD_SetupStageCallback+0x90>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d105      	bne.n	800e828 <HAL_PCD_SetupStageCallback+0x90>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	6939      	ldr	r1, [r7, #16]
 800e820:	6978      	ldr	r0, [r7, #20]
 800e822:	f7ff ff9d 	bl	800e760 <_ux_dcd_stm32_setup_status>
 800e826:	e02c      	b.n	800e882 <HAL_PCD_SetupStageCallback+0xea>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	3354      	adds	r3, #84	; 0x54
 800e832:	3306      	adds	r3, #6
 800e834:	4618      	mov	r0, r3
 800e836:	f7fe fdd4 	bl	800d3e2 <_ux_utility_short_get>
 800e83a:	4602      	mov	r2, r0
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	695b      	ldr	r3, [r3, #20]
 800e844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e848:	d907      	bls.n	800e85a <HAL_PCD_SetupStageCallback+0xc2>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 800e84a:	68f9      	ldr	r1, [r7, #12]
 800e84c:	69b8      	ldr	r0, [r7, #24]
 800e84e:	f000 fad8 	bl	800ee02 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	2200      	movs	r2, #0
 800e856:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 800e858:	e013      	b.n	800e882 <HAL_PCD_SetupStageCallback+0xea>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	2200      	movs	r2, #0
 800e85e:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	68da      	ldr	r2, [r3, #12]
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 800e86c:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	695b      	ldr	r3, [r3, #20]
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7f3 fc5a 	bl	8002130 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	2202      	movs	r2, #2
 800e880:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 800e882:	3720      	adds	r7, #32
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	24004cf4 	.word	0x24004cf4

0800e88c <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	460b      	mov	r3, r1
 800e896:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e898:	4b57      	ldr	r3, [pc, #348]	; (800e9f8 <HAL_PCD_DataInStageCallback+0x16c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	69db      	ldr	r3, [r3, #28]
 800e8a2:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 800e8a4:	78fb      	ldrb	r3, [r7, #3]
 800e8a6:	f003 030f 	and.w	r3, r3, #15
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00b      	beq.n	800e8c6 <HAL_PCD_DataInStageCallback+0x3a>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800e8ae:	78fb      	ldrb	r3, [r7, #3]
 800e8b0:	f003 020f 	and.w	r2, r3, #15
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	005b      	lsls	r3, r3, #1
 800e8b8:	4413      	add	r3, r2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	3370      	adds	r3, #112	; 0x70
 800e8be:	693a      	ldr	r2, [r7, #16]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	61fb      	str	r3, [r7, #28]
 800e8c4:	e00a      	b.n	800e8dc <HAL_PCD_DataInStageCallback+0x50>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800e8c6:	78fb      	ldrb	r3, [r7, #3]
 800e8c8:	f003 020f 	and.w	r2, r3, #15
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	4413      	add	r3, r2
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	693a      	ldr	r2, [r7, #16]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	3304      	adds	r3, #4
 800e8da:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3330      	adds	r3, #48	; 0x30
 800e8e2:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800e8e4:	78fb      	ldrb	r3, [r7, #3]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d15d      	bne.n	800e9a6 <HAL_PCD_DataInStageCallback+0x11a>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	7a1b      	ldrb	r3, [r3, #8]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d17a      	bne.n	800e9ee <HAL_PCD_DataInStageCallback+0x162>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f7f3 fc16 	bl	8002130 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d825      	bhi.n	800e95c <HAL_PCD_DataInStageCallback+0xd0>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e914:	2b01      	cmp	r3, #1
 800e916:	d10b      	bne.n	800e930 <HAL_PCD_DataInStageCallback+0xa4>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 800e91c:	b2d9      	uxtb	r1, r3
 800e91e:	2300      	movs	r3, #0
 800e920:	2200      	movs	r2, #0
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7f3 fc58 	bl	80021d8 <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	651a      	str	r2, [r3, #80]	; 0x50
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 800e92e:	e05e      	b.n	800e9ee <HAL_PCD_DataInStageCallback+0x162>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2200      	movs	r2, #0
 800e934:	625a      	str	r2, [r3, #36]	; 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2202      	movs	r2, #2
 800e93a:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d003      	beq.n	800e954 <HAL_PCD_DataInStageCallback+0xc8>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	2204      	movs	r2, #4
 800e958:	721a      	strb	r2, [r3, #8]
}
 800e95a:	e048      	b.n	800e9ee <HAL_PCD_DataInStageCallback+0x162>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	69da      	ldr	r2, [r3, #28]
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	69db      	ldr	r3, [r3, #28]
 800e96c:	69ba      	ldr	r2, [r7, #24]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d902      	bls.n	800e978 <HAL_PCD_DataInStageCallback+0xec>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	69db      	ldr	r3, [r3, #28]
 800e976:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	691a      	ldr	r2, [r3, #16]
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	69db      	ldr	r3, [r3, #28]
 800e980:	441a      	add	r2, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	69da      	ldr	r2, [r3, #28]
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	1ad2      	subs	r2, r2, r3
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 800e996:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7f3 fc1a 	bl	80021d8 <HAL_PCD_EP_Transmit>
}
 800e9a4:	e023      	b.n	800e9ee <HAL_PCD_DataInStageCallback+0x162>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d010      	beq.n	800e9d0 <HAL_PCD_DataInStageCallback+0x144>
            transfer_request -> ux_slave_transfer_request_requested_length)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00c      	beq.n	800e9d0 <HAL_PCD_DataInStageCallback+0x144>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	651a      	str	r2, [r3, #80]	; 0x50
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800e9c2:	78f9      	ldrb	r1, [r7, #3]
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7f3 fc05 	bl	80021d8 <HAL_PCD_EP_Transmit>
}
 800e9ce:	e00e      	b.n	800e9ee <HAL_PCD_DataInStageCallback+0x162>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	625a      	str	r2, [r3, #36]	; 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2202      	movs	r2, #2
 800e9da:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	3330      	adds	r3, #48	; 0x30
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fe fced 	bl	800d3c8 <_ux_utility_semaphore_put>
}
 800e9ee:	bf00      	nop
 800e9f0:	3720      	adds	r7, #32
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	24004cf4 	.word	0x24004cf4

0800e9fc <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b088      	sub	sp, #32
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	460b      	mov	r3, r1
 800ea06:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800ea08:	4b3b      	ldr	r3, [pc, #236]	; (800eaf8 <HAL_PCD_DataOutStageCallback+0xfc>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	69db      	ldr	r3, [r3, #28]
 800ea12:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800ea14:	78fb      	ldrb	r3, [r7, #3]
 800ea16:	f003 020f 	and.w	r2, r3, #15
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	4413      	add	r3, r2
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	69ba      	ldr	r2, [r7, #24]
 800ea24:	4413      	add	r3, r2
 800ea26:	3304      	adds	r3, #4
 800ea28:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	3330      	adds	r3, #48	; 0x30
 800ea30:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800ea32:	78fb      	ldrb	r3, [r7, #3]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d147      	bne.n	800eac8 <HAL_PCD_DataOutStageCallback+0xcc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	7a1b      	ldrb	r3, [r3, #8]
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d156      	bne.n	800eaee <HAL_PCD_DataOutStageCallback+0xf2>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800ea46:	78fb      	ldrb	r3, [r7, #3]
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7f3 fbac 	bl	80021a8 <HAL_PCD_EP_GetRxCount>
 800ea50:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	699a      	ldr	r2, [r3, #24]
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	441a      	add	r2, r3
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d822      	bhi.n	800eab0 <HAL_PCD_DataOutStageCallback+0xb4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d004      	beq.n	800ea80 <HAL_PCD_DataOutStageCallback+0x84>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800ea7a:	68ba      	ldr	r2, [r7, #8]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d005      	beq.n	800ea8c <HAL_PCD_DataOutStageCallback+0x90>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	6939      	ldr	r1, [r7, #16]
 800ea84:	6978      	ldr	r0, [r7, #20]
 800ea86:	f7ff fe4c 	bl	800e722 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 800ea8a:	e030      	b.n	800eaee <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	691a      	ldr	r2, [r3, #16]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	69db      	ldr	r3, [r3, #28]
 800ea94:	441a      	add	r2, r3
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 800ea9e:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	69db      	ldr	r3, [r3, #28]
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7f3 fb41 	bl	8002130 <HAL_PCD_EP_Receive>
}
 800eaae:	e01e      	b.n	800eaee <HAL_PCD_DataOutStageCallback+0xf2>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	2227      	movs	r2, #39	; 0x27
 800eab4:	625a      	str	r2, [r3, #36]	; 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d017      	beq.n	800eaee <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac2:	6938      	ldr	r0, [r7, #16]
 800eac4:	4798      	blx	r3
}
 800eac6:	e012      	b.n	800eaee <HAL_PCD_DataOutStageCallback+0xf2>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800eac8:	78fb      	ldrb	r3, [r7, #3]
 800eaca:	4619      	mov	r1, r3
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7f3 fb6b 	bl	80021a8 <HAL_PCD_EP_GetRxCount>
 800ead2:	4602      	mov	r2, r0
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	2200      	movs	r2, #0
 800eadc:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	2202      	movs	r2, #2
 800eae2:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	3330      	adds	r3, #48	; 0x30
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fe fc6d 	bl	800d3c8 <_ux_utility_semaphore_put>
}
 800eaee:	bf00      	nop
 800eaf0:	3720      	adds	r7, #32
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	24004cf4 	.word	0x24004cf4

0800eafc <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800eb04:	4b14      	ldr	r3, [pc, #80]	; (800eb58 <HAL_PCD_ResetCallback+0x5c>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6a1b      	ldr	r3, [r3, #32]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800eb0e:	f7fd fa15 	bl	800bf3c <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	691b      	ldr	r3, [r3, #16]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d002      	beq.n	800eb20 <HAL_PCD_ResetCallback+0x24>
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d006      	beq.n	800eb2c <HAL_PCD_ResetCallback+0x30>
 800eb1e:	e00b      	b.n	800eb38 <HAL_PCD_ResetCallback+0x3c>
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 800eb20:	4b0d      	ldr	r3, [pc, #52]	; (800eb58 <HAL_PCD_ResetCallback+0x5c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2202      	movs	r2, #2
 800eb26:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        break;
 800eb2a:	e00b      	b.n	800eb44 <HAL_PCD_ResetCallback+0x48>
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800eb2c:	4b0a      	ldr	r3, [pc, #40]	; (800eb58 <HAL_PCD_ResetCallback+0x5c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2201      	movs	r2, #1
 800eb32:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        break;
 800eb36:	e005      	b.n	800eb44 <HAL_PCD_ResetCallback+0x48>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800eb38:	4b07      	ldr	r3, [pc, #28]	; (800eb58 <HAL_PCD_ResetCallback+0x5c>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        break;
 800eb42:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 800eb44:	f000 fa9a 	bl	800f07c <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800eb48:	4b03      	ldr	r3, [pc, #12]	; (800eb58 <HAL_PCD_ResetCallback+0x5c>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	621a      	str	r2, [r3, #32]
}
 800eb50:	bf00      	nop
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	24004cf4 	.word	0x24004cf4

0800eb5c <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800eb64:	4b07      	ldr	r3, [pc, #28]	; (800eb84 <HAL_PCD_ConnectCallback+0x28>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d005      	beq.n	800eb7c <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 800eb70:	4b04      	ldr	r3, [pc, #16]	; (800eb84 <HAL_PCD_ConnectCallback+0x28>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800eb78:	20f1      	movs	r0, #241	; 0xf1
 800eb7a:	4798      	blx	r3
    }
}
 800eb7c:	bf00      	nop
 800eb7e:	3708      	adds	r7, #8
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	24004cf4 	.word	0x24004cf4

0800eb88 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800eb90:	4b0b      	ldr	r3, [pc, #44]	; (800ebc0 <HAL_PCD_DisconnectCallback+0x38>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d005      	beq.n	800eba8 <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 800eb9c:	4b08      	ldr	r3, [pc, #32]	; (800ebc0 <HAL_PCD_DisconnectCallback+0x38>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800eba4:	20f2      	movs	r0, #242	; 0xf2
 800eba6:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800eba8:	4b05      	ldr	r3, [pc, #20]	; (800ebc0 <HAL_PCD_DisconnectCallback+0x38>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	6a1b      	ldr	r3, [r3, #32]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800ebb2:	f7fd f9c3 	bl	800bf3c <_ux_device_stack_disconnect>
    }
}
 800ebb6:	bf00      	nop
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	24004cf4 	.word	0x24004cf4

0800ebc4 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800ebcc:	4b07      	ldr	r3, [pc, #28]	; (800ebec <HAL_PCD_SuspendCallback+0x28>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d005      	beq.n	800ebe4 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 800ebd8:	4b04      	ldr	r3, [pc, #16]	; (800ebec <HAL_PCD_SuspendCallback+0x28>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ebe0:	20f4      	movs	r0, #244	; 0xf4
 800ebe2:	4798      	blx	r3
    }
}
 800ebe4:	bf00      	nop
 800ebe6:	3708      	adds	r7, #8
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	24004cf4 	.word	0x24004cf4

0800ebf0 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800ebf8:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <HAL_PCD_ResumeCallback+0x28>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d005      	beq.n	800ec10 <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 800ec04:	4b04      	ldr	r3, [pc, #16]	; (800ec18 <HAL_PCD_ResumeCallback+0x28>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ec0c:	20f3      	movs	r0, #243	; 0xf3
 800ec0e:	4798      	blx	r3
    }
}
 800ec10:	bf00      	nop
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	24004cf4 	.word	0x24004cf4

0800ec1c <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800ec24:	4b07      	ldr	r3, [pc, #28]	; (800ec44 <HAL_PCD_SOFCallback+0x28>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d005      	beq.n	800ec3c <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 800ec30:	4b04      	ldr	r3, [pc, #16]	; (800ec44 <HAL_PCD_SOFCallback+0x28>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ec38:	20f0      	movs	r0, #240	; 0xf0
 800ec3a:	4798      	blx	r3
    }
}
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	24004cf4 	.word	0x24004cf4

0800ec48 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b085      	sub	sp, #20
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec58:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec60:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	2b08      	cmp	r3, #8
 800ec66:	d806      	bhi.n	800ec76 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ec6e:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d301      	bcc.n	800ec7a <_stm32_ed_get+0x32>
        return(UX_NULL);
 800ec76:	2300      	movs	r3, #0
 800ec78:	e013      	b.n	800eca2 <_stm32_ed_get+0x5a>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d008      	beq.n	800ec92 <_stm32_ed_get+0x4a>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800ec80:	68ba      	ldr	r2, [r7, #8]
 800ec82:	4613      	mov	r3, r2
 800ec84:	005b      	lsls	r3, r3, #1
 800ec86:	4413      	add	r3, r2
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	3370      	adds	r3, #112	; 0x70
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	4413      	add	r3, r2
 800ec90:	e007      	b.n	800eca2 <_stm32_ed_get+0x5a>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	4613      	mov	r3, r2
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	4413      	add	r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	4413      	add	r3, r2
 800eca0:	3304      	adds	r3, #4
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3714      	adds	r7, #20
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr

0800ecae <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b084      	sub	sp, #16
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
 800ecb6:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	695b      	ldr	r3, [r3, #20]
 800ecbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecc0:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f7ff ffbd 	bl	800ec48 <_stm32_ed_get>
 800ecce:	60b8      	str	r0, [r7, #8]

    if (ed == UX_NULL)
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d101      	bne.n	800ecda <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 800ecd6:	2314      	movs	r3, #20
 800ecd8:	e034      	b.n	800ed44 <_ux_dcd_stm32_endpoint_create+0x96>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	f003 0301 	and.w	r3, r3, #1
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d12d      	bne.n	800ed42 <_ux_dcd_stm32_endpoint_create+0x94>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	f043 0201 	orr.w	r2, r3, #1
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	68ba      	ldr	r2, [r7, #8]
 800ecf6:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d010      	beq.n	800ed3e <_ux_dcd_stm32_endpoint_create+0x90>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	695b      	ldr	r3, [r3, #20]
 800ed26:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800ed2c:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	f003 0303 	and.w	r3, r3, #3
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	f7f3 f947 	bl	8001fcc <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 800ed3e:	2300      	movs	r3, #0
 800ed40:	e000      	b.n	800ed44 <_ux_dcd_stm32_endpoint_create+0x96>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 800ed42:	2314      	movs	r3, #20
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3710      	adds	r7, #16
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	689b      	ldr	r3, [r3, #8]
 800ed5a:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	4619      	mov	r1, r3
 800ed70:	4610      	mov	r0, r2
 800ed72:	f7f3 f993 	bl	800209c <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b088      	sub	sp, #32
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed90:	f3ef 8310 	mrs	r3, PRIMASK
 800ed94:	617b      	str	r3, [r7, #20]
    return(posture);
 800ed96:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ed98:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed9a:	b672      	cpsid	i
    return(int_posture);
 800ed9c:	693b      	ldr	r3, [r7, #16]

    UX_DISABLE
 800ed9e:	61bb      	str	r3, [r7, #24]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	f423 7243 	bic.w	r2, r3, #780	; 0x30c
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	2200      	movs	r2, #0
 800edb0:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	695b      	ldr	r3, [r3, #20]
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	4619      	mov	r1, r3
 800edc0:	4610      	mov	r0, r2
 800edc2:	f7f3 faa8 	bl	8002316 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	695b      	ldr	r3, [r3, #20]
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	4619      	mov	r1, r3
 800edd4:	4610      	mov	r0, r2
 800edd6:	f7f3 fb25 	bl	8002424 <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d004      	beq.n	800edec <_ux_dcd_stm32_endpoint_reset+0x6c>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	3360      	adds	r3, #96	; 0x60
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fe faee 	bl	800d3c8 <_ux_utility_semaphore_put>
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f383 8810 	msr	PRIMASK, r3
}
 800edf6:	bf00      	nop
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3720      	adds	r7, #32
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b084      	sub	sp, #16
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	f043 0204 	orr.w	r2, r3, #4
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	695b      	ldr	r3, [r3, #20]
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	7a9b      	ldrb	r3, [r3, #10]
 800ee2e:	4313      	orrs	r3, r2
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	4619      	mov	r1, r3
 800ee34:	f7f3 fa0b 	bl	800224e <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <_stm32_ed_get>:
{
 800ee42:	b480      	push	{r7}
 800ee44:	b085      	sub	sp, #20
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee52:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee5a:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	2b08      	cmp	r3, #8
 800ee60:	d806      	bhi.n	800ee70 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ee68:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800ee6a:	68ba      	ldr	r2, [r7, #8]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d301      	bcc.n	800ee74 <_stm32_ed_get+0x32>
        return(UX_NULL);
 800ee70:	2300      	movs	r3, #0
 800ee72:	e013      	b.n	800ee9c <_stm32_ed_get+0x5a>
    if (ep_dir)
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d008      	beq.n	800ee8c <_stm32_ed_get+0x4a>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	005b      	lsls	r3, r3, #1
 800ee80:	4413      	add	r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	3370      	adds	r3, #112	; 0x70
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	4413      	add	r3, r2
 800ee8a:	e007      	b.n	800ee9c <_stm32_ed_get+0x5a>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800ee8c:	68ba      	ldr	r2, [r7, #8]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	4413      	add	r3, r2
 800ee9a:	3304      	adds	r3, #4
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3714      	adds	r7, #20
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 800eeb2:	6839      	ldr	r1, [r7, #0]
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7ff ffc4 	bl	800ee42 <_stm32_ed_get>
 800eeba:	60f8      	str	r0, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	f003 0301 	and.w	r3, r3, #1
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d101      	bne.n	800eecc <_ux_dcd_stm32_endpoint_status+0x24>
        return(UX_ERROR);
 800eec8:	23ff      	movs	r3, #255	; 0xff
 800eeca:	e008      	b.n	800eede <_ux_dcd_stm32_endpoint_status+0x36>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	f003 0304 	and.w	r3, r3, #4
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d101      	bne.n	800eedc <_ux_dcd_stm32_endpoint_status+0x34>
        return(UX_FALSE);
 800eed8:	2300      	movs	r3, #0
 800eeda:	e000      	b.n	800eede <_ux_dcd_stm32_endpoint_status+0x36>
    else
        return(UX_TRUE);
 800eedc:	2301      	movs	r3, #1
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 800eee6:	b480      	push	{r7}
 800eee8:	b083      	sub	sp, #12
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
 800eeee:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	370c      	adds	r7, #12
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr
	...

0800ef00 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b086      	sub	sp, #24
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d106      	bne.n	800ef22 <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 800ef14:	2255      	movs	r2, #85	; 0x55
 800ef16:	2102      	movs	r1, #2
 800ef18:	2002      	movs	r0, #2
 800ef1a:	f7fd fdad 	bl	800ca78 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 800ef1e:	2355      	movs	r3, #85	; 0x55
 800ef20:	e077      	b.n	800f012 <_ux_dcd_stm32_function+0x112>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	69db      	ldr	r3, [r3, #28]
 800ef26:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	3b0a      	subs	r3, #10
 800ef2c:	2b0b      	cmp	r3, #11
 800ef2e:	d867      	bhi.n	800f000 <_ux_dcd_stm32_function+0x100>
 800ef30:	a201      	add	r2, pc, #4	; (adr r2, 800ef38 <_ux_dcd_stm32_function+0x38>)
 800ef32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef36:	bf00      	nop
 800ef38:	0800ef69 	.word	0x0800ef69
 800ef3c:	0800f001 	.word	0x0800f001
 800ef40:	0800ef75 	.word	0x0800ef75
 800ef44:	0800ef81 	.word	0x0800ef81
 800ef48:	0800ef8d 	.word	0x0800ef8d
 800ef4c:	0800ef99 	.word	0x0800ef99
 800ef50:	0800efa5 	.word	0x0800efa5
 800ef54:	0800efbd 	.word	0x0800efbd
 800ef58:	0800f001 	.word	0x0800f001
 800ef5c:	0800efd5 	.word	0x0800efd5
 800ef60:	0800efb1 	.word	0x0800efb1
 800ef64:	0800eff3 	.word	0x0800eff3
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 800ef68:	6879      	ldr	r1, [r7, #4]
 800ef6a:	6938      	ldr	r0, [r7, #16]
 800ef6c:	f7ff ffbb 	bl	800eee6 <_ux_dcd_stm32_frame_number_get>
 800ef70:	6178      	str	r0, [r7, #20]
        break;
 800ef72:	e04d      	b.n	800f010 <_ux_dcd_stm32_function+0x110>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 800ef74:	6879      	ldr	r1, [r7, #4]
 800ef76:	6938      	ldr	r0, [r7, #16]
 800ef78:	f000 f96b 	bl	800f252 <_ux_dcd_stm32_transfer_request>
 800ef7c:	6178      	str	r0, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 800ef7e:	e047      	b.n	800f010 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 800ef80:	6879      	ldr	r1, [r7, #4]
 800ef82:	6938      	ldr	r0, [r7, #16]
 800ef84:	f000 f944 	bl	800f210 <_ux_dcd_stm32_transfer_abort>
 800ef88:	6178      	str	r0, [r7, #20]
        break;
 800ef8a:	e041      	b.n	800f010 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 800ef8c:	6879      	ldr	r1, [r7, #4]
 800ef8e:	6938      	ldr	r0, [r7, #16]
 800ef90:	f7ff fe8d 	bl	800ecae <_ux_dcd_stm32_endpoint_create>
 800ef94:	6178      	str	r0, [r7, #20]
        break;
 800ef96:	e03b      	b.n	800f010 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 800ef98:	6879      	ldr	r1, [r7, #4]
 800ef9a:	6938      	ldr	r0, [r7, #16]
 800ef9c:	f7ff fed6 	bl	800ed4c <_ux_dcd_stm32_endpoint_destroy>
 800efa0:	6178      	str	r0, [r7, #20]
        break;
 800efa2:	e035      	b.n	800f010 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 800efa4:	6879      	ldr	r1, [r7, #4]
 800efa6:	6938      	ldr	r0, [r7, #16]
 800efa8:	f7ff feea 	bl	800ed80 <_ux_dcd_stm32_endpoint_reset>
 800efac:	6178      	str	r0, [r7, #20]
        break;
 800efae:	e02f      	b.n	800f010 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 800efb0:	6879      	ldr	r1, [r7, #4]
 800efb2:	6938      	ldr	r0, [r7, #16]
 800efb4:	f7ff ff25 	bl	800ee02 <_ux_dcd_stm32_endpoint_stall>
 800efb8:	6178      	str	r0, [r7, #20]
        break;
 800efba:	e029      	b.n	800f010 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	b2d2      	uxtb	r2, r2
 800efc6:	4611      	mov	r1, r2
 800efc8:	4618      	mov	r0, r3
 800efca:	f7f2 ffda 	bl	8001f82 <HAL_PCD_SetAddress>
 800efce:	4603      	mov	r3, r0
 800efd0:	617b      	str	r3, [r7, #20]
        break;
 800efd2:	e01d      	b.n	800f010 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b0b      	cmp	r3, #11
 800efd8:	d108      	bne.n	800efec <_ux_dcd_stm32_function+0xec>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7f2 faaf 	bl	8001544 <HAL_PCD_Stop>
 800efe6:	4603      	mov	r3, r0
 800efe8:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 800efea:	e011      	b.n	800f010 <_ux_dcd_stm32_function+0x110>
          status = UX_SUCCESS;
 800efec:	2300      	movs	r3, #0
 800efee:	617b      	str	r3, [r7, #20]
        break;
 800eff0:	e00e      	b.n	800f010 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	4619      	mov	r1, r3
 800eff6:	6938      	ldr	r0, [r7, #16]
 800eff8:	f7ff ff56 	bl	800eea8 <_ux_dcd_stm32_endpoint_status>
 800effc:	6178      	str	r0, [r7, #20]
        break;
 800effe:	e007      	b.n	800f010 <_ux_dcd_stm32_function+0x110>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 800f000:	2254      	movs	r2, #84	; 0x54
 800f002:	2102      	movs	r1, #2
 800f004:	2002      	movs	r0, #2
 800f006:	f7fd fd37 	bl	800ca78 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 800f00a:	2354      	movs	r3, #84	; 0x54
 800f00c:	617b      	str	r3, [r7, #20]
        break;
 800f00e:	bf00      	nop
    }

    /* Return completion status.  */
    return(status);
 800f010:	697b      	ldr	r3, [r7, #20]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3718      	adds	r7, #24
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop

0800f01c <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f026:	4b13      	ldr	r3, [pc, #76]	; (800f074 <_ux_dcd_stm32_initialize+0x58>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2280      	movs	r2, #128	; 0x80
 800f030:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 800f032:	22e0      	movs	r2, #224	; 0xe0
 800f034:	2100      	movs	r1, #0
 800f036:	2000      	movs	r0, #0
 800f038:	f7fd fede 	bl	800cdf8 <_ux_utility_memory_allocate>
 800f03c:	60b8      	str	r0, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d101      	bne.n	800f048 <_ux_dcd_stm32_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);
 800f044:	2312      	movs	r3, #18
 800f046:	e010      	b.n	800f06a <_ux_dcd_stm32_initialize+0x4e>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	4a08      	ldr	r2, [pc, #32]	; (800f078 <_ux_dcd_stm32_initialize+0x5c>)
 800f058:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 800f05a:	683a      	ldr	r2, [r7, #0]
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2201      	movs	r2, #1
 800f066:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800f068:	2300      	movs	r3, #0
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	24004cf4 	.word	0x24004cf4
 800f078:	0800ef01 	.word	0x0800ef01

0800f07c <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b086      	sub	sp, #24
 800f080:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f082:	4b61      	ldr	r3, [pc, #388]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	69db      	ldr	r3, [r3, #28]
 800f08c:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f08e:	4b5e      	ldr	r3, [pc, #376]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	3320      	adds	r3, #32
 800f094:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800f096:	4b5c      	ldr	r3, [pc, #368]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d110      	bne.n	800f0c4 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 800f0a2:	4b59      	ldr	r3, [pc, #356]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	4b58      	ldr	r3, [pc, #352]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
 800f0ae:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 800f0b2:	4b55      	ldr	r3, [pc, #340]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	4b54      	ldr	r3, [pc, #336]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
 800f0be:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800f0c2:	e02b      	b.n	800f11c <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800f0c4:	4b50      	ldr	r3, [pc, #320]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800f0ce:	4b4e      	ldr	r3, [pc, #312]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d110      	bne.n	800f0fc <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800f0da:	4b4b      	ldr	r3, [pc, #300]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	4b4a      	ldr	r3, [pc, #296]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 800f0e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800f0ea:	4b47      	ldr	r3, [pc, #284]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	4b46      	ldr	r3, [pc, #280]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
 800f0f6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800f0fa:	e00f      	b.n	800f11c <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 800f0fc:	4b42      	ldr	r3, [pc, #264]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	4b41      	ldr	r3, [pc, #260]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 800f108:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800f10c:	4b3e      	ldr	r3, [pc, #248]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	4b3d      	ldr	r3, [pc, #244]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
 800f118:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800f11c:	4b3a      	ldr	r3, [pc, #232]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800f124:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 800f12a:	220e      	movs	r2, #14
 800f12c:	4937      	ldr	r1, [pc, #220]	; (800f20c <_ux_dcd_stm32_initialize_complete+0x190>)
 800f12e:	68b8      	ldr	r0, [r7, #8]
 800f130:	f7fd fd90 	bl	800cc54 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	336c      	adds	r3, #108	; 0x6c
 800f138:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f140:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800f15c:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	323c      	adds	r2, #60	; 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800f178:	210e      	movs	r1, #14
 800f17a:	6978      	ldr	r0, [r7, #20]
 800f17c:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f184:	2100      	movs	r1, #0
 800f186:	4618      	mov	r0, r3
 800f188:	f7f3 f94c 	bl	8002424 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	69db      	ldr	r3, [r3, #28]
 800f196:	b29a      	uxth	r2, r3
 800f198:	2300      	movs	r3, #0
 800f19a:	2100      	movs	r1, #0
 800f19c:	f7f2 ff16 	bl	8001fcc <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f1a6:	2180      	movs	r1, #128	; 0x80
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7f3 f93b 	bl	8002424 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	69db      	ldr	r3, [r3, #28]
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	2180      	movs	r1, #128	; 0x80
 800f1be:	f7f2 ff05 	bl	8001fcc <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2208      	movs	r2, #8
 800f1d8:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2208      	movs	r2, #8
 800f1de:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f1e6:	4b08      	ldr	r3, [pc, #32]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d005      	beq.n	800f1fe <_ux_dcd_stm32_initialize_complete+0x182>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800f1f2:	4b05      	ldr	r3, [pc, #20]	; (800f208 <_ux_dcd_stm32_initialize_complete+0x18c>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800f1fa:	2001      	movs	r0, #1
 800f1fc:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3718      	adds	r7, #24
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	24004cf4 	.word	0x24004cf4
 800f20c:	24000048 	.word	0x24000048

0800f210 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]

UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	695b      	ldr	r3, [r3, #20]
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	4619      	mov	r1, r3
 800f22e:	4610      	mov	r0, r2
 800f230:	f7f3 f8c7 	bl	80023c2 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	695b      	ldr	r3, [r3, #20]
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	4619      	mov	r1, r3
 800f242:	4610      	mov	r0, r2
 800f244:	f7f3 f8ee 	bl	8002424 <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 800f248:	2300      	movs	r3, #0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3710      	adds	r7, #16
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800f252:	b580      	push	{r7, lr}
 800f254:	b084      	sub	sp, #16
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
 800f25a:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f266:	2b03      	cmp	r3, #3
 800f268:	d12d      	bne.n	800f2c6 <_ux_dcd_stm32_transfer_request+0x74>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800f274:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	695b      	ldr	r3, [r3, #20]
 800f27e:	f7f2 ffab 	bl	80021d8 <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	695b      	ldr	r3, [r3, #20]
 800f286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d045      	beq.n	800f31a <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800f298:	4619      	mov	r1, r3
 800f29a:	4610      	mov	r0, r2
 800f29c:	f7fe f85c 	bl	800d358 <_ux_utility_semaphore_get>
 800f2a0:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d001      	beq.n	800f2ac <_ux_dcd_stm32_transfer_request+0x5a>
                return(status);
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	e037      	b.n	800f31c <_ux_dcd_stm32_transfer_request+0xca>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	695a      	ldr	r2, [r3, #20]
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d002      	beq.n	800f2c2 <_ux_dcd_stm32_transfer_request+0x70>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c0:	e02c      	b.n	800f31c <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	e02a      	b.n	800f31c <_ux_dcd_stm32_transfer_request+0xca>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800f2d0:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	f7f2 ff29 	bl	8002130 <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	695b      	ldr	r3, [r3, #20]
 800f2e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d017      	beq.n	800f31a <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	f7fe f82e 	bl	800d358 <_ux_utility_semaphore_get>
 800f2fc:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d001      	beq.n	800f308 <_ux_dcd_stm32_transfer_request+0xb6>
                return(status);
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	e009      	b.n	800f31c <_ux_dcd_stm32_transfer_request+0xca>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d002      	beq.n	800f316 <_ux_dcd_stm32_transfer_request+0xc4>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f314:	e002      	b.n	800f31c <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 800f316:	2300      	movs	r3, #0
 800f318:	e000      	b.n	800f31c <_ux_dcd_stm32_transfer_request+0xca>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 800f31a:	2300      	movs	r3, #0
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3710      	adds	r7, #16
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  memory_ptr: memory pointer
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 800f324:	b590      	push	{r4, r7, lr}
 800f326:	b097      	sub	sp, #92	; 0x5c
 800f328:	af08      	add	r7, sp, #32
 800f32a:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 800f32c:	2300      	movs	r3, #0
 800f32e:	637b      	str	r3, [r7, #52]	; 0x34
  ULONG string_framework_length;
  ULONG languge_id_framework_length;
  UCHAR *string_framework;
  UCHAR *language_id_framework;
  UCHAR *pointer;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	633b      	str	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */

  /* Allocate the stack for USBX Memory */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 800f334:	f107 010c 	add.w	r1, r7, #12
 800f338:	2300      	movs	r3, #0
 800f33a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800f33e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f340:	f7fa fe9a 	bl	800a078 <_txe_byte_allocate>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <MX_USBX_Device_Init+0x2a>
                       USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_ALLOCATE_STACK_ERORR */
		return TX_POOL_ERROR;
 800f34a:	2302      	movs	r3, #2
 800f34c:	e13b      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>
    /* USER CODE END USBX_ALLOCATE_STACK_ERORR */
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	2300      	movs	r3, #0
 800f352:	2200      	movs	r2, #0
 800f354:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800f358:	f7fd fbb0 	bl	800cabc <_ux_system_initialize>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <MX_USBX_Device_Init+0x42>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERORR */
		return UX_ERROR;
 800f362:	23ff      	movs	r3, #255	; 0xff
 800f364:	e12f      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERORR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 800f366:	f107 031c 	add.w	r3, r7, #28
 800f36a:	4619      	mov	r1, r3
 800f36c:	2001      	movs	r0, #1
 800f36e:	f000 fa2f 	bl	800f7d0 <USBD_Get_Device_Framework_Speed>
 800f372:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 800f374:	f107 0318 	add.w	r3, r7, #24
 800f378:	4619      	mov	r1, r3
 800f37a:	2000      	movs	r0, #0
 800f37c:	f000 fa28 	bl	800f7d0 <USBD_Get_Device_Framework_Speed>
 800f380:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 800f382:	f107 0314 	add.w	r3, r7, #20
 800f386:	4618      	mov	r0, r3
 800f388:	f000 fa64 	bl	800f854 <USBD_Get_String_Framework>
 800f38c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&languge_id_framework_length);
 800f38e:	f107 0310 	add.w	r3, r7, #16
 800f392:	4618      	mov	r0, r3
 800f394:	f000 fae2 	bl	800f95c <USBD_Get_Language_Id_Framework>
 800f398:	6238      	str	r0, [r7, #32]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 800f39a:	69f9      	ldr	r1, [r7, #28]
 800f39c:	69b8      	ldr	r0, [r7, #24]
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	693a      	ldr	r2, [r7, #16]
 800f3a2:	2400      	movs	r4, #0
 800f3a4:	9404      	str	r4, [sp, #16]
 800f3a6:	9203      	str	r2, [sp, #12]
 800f3a8:	6a3a      	ldr	r2, [r7, #32]
 800f3aa:	9202      	str	r2, [sp, #8]
 800f3ac:	9301      	str	r3, [sp, #4]
 800f3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3b8:	f7fc fece 	bl	800c158 <_ux_device_stack_initialize>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <MX_USBX_Device_Init+0xa2>
                                 language_id_framework,
                                 languge_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERORR */
		return UX_ERROR;
 800f3c2:	23ff      	movs	r3, #255	; 0xff
 800f3c4:	e0ff      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERORR */
  }

  /* Initialize the hid mouse class parameters for the device */
  hid_mouse_parameter.ux_slave_class_hid_instance_activate         = USBD_HID_Mouse_Activate;
 800f3c6:	4b82      	ldr	r3, [pc, #520]	; (800f5d0 <MX_USBX_Device_Init+0x2ac>)
 800f3c8:	4a82      	ldr	r2, [pc, #520]	; (800f5d4 <MX_USBX_Device_Init+0x2b0>)
 800f3ca:	601a      	str	r2, [r3, #0]
  hid_mouse_parameter.ux_slave_class_hid_instance_deactivate       = USBD_HID_Mouse_Deactivate;
 800f3cc:	4b80      	ldr	r3, [pc, #512]	; (800f5d0 <MX_USBX_Device_Init+0x2ac>)
 800f3ce:	4a82      	ldr	r2, [pc, #520]	; (800f5d8 <MX_USBX_Device_Init+0x2b4>)
 800f3d0:	605a      	str	r2, [r3, #4]
  hid_mouse_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_MOUSE);
 800f3d2:	2002      	movs	r0, #2
 800f3d4:	f000 fb34 	bl	800fa40 <USBD_HID_ReportDesc>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	4a7d      	ldr	r2, [pc, #500]	; (800f5d0 <MX_USBX_Device_Init+0x2ac>)
 800f3dc:	6093      	str	r3, [r2, #8]
  hid_mouse_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 800f3de:	2002      	movs	r0, #2
 800f3e0:	f000 fb46 	bl	800fa70 <USBD_HID_ReportDesc_length>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	4b79      	ldr	r3, [pc, #484]	; (800f5d0 <MX_USBX_Device_Init+0x2ac>)
 800f3ea:	611a      	str	r2, [r3, #16]
  hid_mouse_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 800f3ec:	4b78      	ldr	r3, [pc, #480]	; (800f5d0 <MX_USBX_Device_Init+0x2ac>)
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	60da      	str	r2, [r3, #12]
  hid_mouse_parameter.ux_device_class_hid_parameter_callback       = USBD_HID_Mouse_SetReport;
 800f3f2:	4b77      	ldr	r3, [pc, #476]	; (800f5d0 <MX_USBX_Device_Init+0x2ac>)
 800f3f4:	4a79      	ldr	r2, [pc, #484]	; (800f5dc <MX_USBX_Device_Init+0x2b8>)
 800f3f6:	615a      	str	r2, [r3, #20]
  hid_mouse_parameter.ux_device_class_hid_parameter_get_callback   = USBD_HID_Mouse_GetReport;
 800f3f8:	4b75      	ldr	r3, [pc, #468]	; (800f5d0 <MX_USBX_Device_Init+0x2ac>)
 800f3fa:	4a79      	ldr	r2, [pc, #484]	; (800f5e0 <MX_USBX_Device_Init+0x2bc>)
 800f3fc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN HID_MOUSE_PARAMETER */

  /* USER CODE END HID_MOUSE_PARAMETER */

  /* Get hid mouse configuration number */
  hid_mouse_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 800f3fe:	2102      	movs	r1, #2
 800f400:	2001      	movs	r0, #1
 800f402:	f000 fb0b 	bl	800fa1c <USBD_Get_Configuration_Number>
 800f406:	4603      	mov	r3, r0
 800f408:	461a      	mov	r2, r3
 800f40a:	4b76      	ldr	r3, [pc, #472]	; (800f5e4 <MX_USBX_Device_Init+0x2c0>)
 800f40c:	601a      	str	r2, [r3, #0]

  /* Find hid mouse interface number */
  hid_mouse_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 800f40e:	2102      	movs	r1, #2
 800f410:	2001      	movs	r0, #1
 800f412:	f000 fac5 	bl	800f9a0 <USBD_Get_Interface_Number>
 800f416:	4603      	mov	r3, r0
 800f418:	461a      	mov	r2, r3
 800f41a:	4b73      	ldr	r3, [pc, #460]	; (800f5e8 <MX_USBX_Device_Init+0x2c4>)
 800f41c:	601a      	str	r2, [r3, #0]

  /* Initialize the device hid Mouse class */
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 800f41e:	4b71      	ldr	r3, [pc, #452]	; (800f5e4 <MX_USBX_Device_Init+0x2c0>)
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	4b71      	ldr	r3, [pc, #452]	; (800f5e8 <MX_USBX_Device_Init+0x2c4>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	496a      	ldr	r1, [pc, #424]	; (800f5d0 <MX_USBX_Device_Init+0x2ac>)
 800f428:	9100      	str	r1, [sp, #0]
 800f42a:	4970      	ldr	r1, [pc, #448]	; (800f5ec <MX_USBX_Device_Init+0x2c8>)
 800f42c:	4870      	ldr	r0, [pc, #448]	; (800f5f0 <MX_USBX_Device_Init+0x2cc>)
 800f42e:	f7fb ff4f 	bl	800b2d0 <_ux_device_stack_class_register>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d001      	beq.n	800f43c <MX_USBX_Device_Init+0x118>
                                     hid_mouse_configuration_number,
                                     hid_mouse_interface_number,
                                     &hid_mouse_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_HID_MOUSE_REGISTER_ERORR */
		return UX_ERROR;
 800f438:	23ff      	movs	r3, #255	; 0xff
 800f43a:	e0c4      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>
    /* USER CODE END USBX_DEVICE_HID_MOUSE_REGISTER_ERORR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 800f43c:	4b6d      	ldr	r3, [pc, #436]	; (800f5f4 <MX_USBX_Device_Init+0x2d0>)
 800f43e:	4a6e      	ldr	r2, [pc, #440]	; (800f5f8 <MX_USBX_Device_Init+0x2d4>)
 800f440:	601a      	str	r2, [r3, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 800f442:	4b6c      	ldr	r3, [pc, #432]	; (800f5f4 <MX_USBX_Device_Init+0x2d0>)
 800f444:	4a6d      	ldr	r2, [pc, #436]	; (800f5fc <MX_USBX_Device_Init+0x2d8>)
 800f446:	605a      	str	r2, [r3, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 800f448:	4b6a      	ldr	r3, [pc, #424]	; (800f5f4 <MX_USBX_Device_Init+0x2d0>)
 800f44a:	4a6d      	ldr	r2, [pc, #436]	; (800f600 <MX_USBX_Device_Init+0x2dc>)
 800f44c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 800f44e:	2100      	movs	r1, #0
 800f450:	2002      	movs	r0, #2
 800f452:	f000 fae3 	bl	800fa1c <USBD_Get_Configuration_Number>
 800f456:	4603      	mov	r3, r0
 800f458:	461a      	mov	r2, r3
 800f45a:	4b6a      	ldr	r3, [pc, #424]	; (800f604 <MX_USBX_Device_Init+0x2e0>)
 800f45c:	601a      	str	r2, [r3, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 800f45e:	2100      	movs	r1, #0
 800f460:	2002      	movs	r0, #2
 800f462:	f000 fa9d 	bl	800f9a0 <USBD_Get_Interface_Number>
 800f466:	4603      	mov	r3, r0
 800f468:	461a      	mov	r2, r3
 800f46a:	4b67      	ldr	r3, [pc, #412]	; (800f608 <MX_USBX_Device_Init+0x2e4>)
 800f46c:	601a      	str	r2, [r3, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 800f46e:	4b65      	ldr	r3, [pc, #404]	; (800f604 <MX_USBX_Device_Init+0x2e0>)
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	4b65      	ldr	r3, [pc, #404]	; (800f608 <MX_USBX_Device_Init+0x2e4>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	495f      	ldr	r1, [pc, #380]	; (800f5f4 <MX_USBX_Device_Init+0x2d0>)
 800f478:	9100      	str	r1, [sp, #0]
 800f47a:	4964      	ldr	r1, [pc, #400]	; (800f60c <MX_USBX_Device_Init+0x2e8>)
 800f47c:	4864      	ldr	r0, [pc, #400]	; (800f610 <MX_USBX_Device_Init+0x2ec>)
 800f47e:	f7fb ff27 	bl	800b2d0 <_ux_device_stack_class_register>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <MX_USBX_Device_Init+0x168>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
		return UX_ERROR;
 800f488:	23ff      	movs	r3, #255	; 0xff
 800f48a:	e09c      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
  }

  /* Allocate the stack for device application main thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 800f48c:	f107 010c 	add.w	r1, r7, #12
 800f490:	2300      	movs	r3, #0
 800f492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f498:	f7fa fdee 	bl	800a078 <_txe_byte_allocate>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d001      	beq.n	800f4a6 <MX_USBX_Device_Init+0x182>
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERORR */
		return TX_POOL_ERROR;
 800f4a2:	2302      	movs	r3, #2
 800f4a4:	e08f      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>
    /* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERORR */
  }

  /* Create the device application main thread */
  if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	22b0      	movs	r2, #176	; 0xb0
 800f4aa:	9206      	str	r2, [sp, #24]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	9205      	str	r2, [sp, #20]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	9204      	str	r2, [sp, #16]
 800f4b4:	220a      	movs	r2, #10
 800f4b6:	9203      	str	r2, [sp, #12]
 800f4b8:	220a      	movs	r2, #10
 800f4ba:	9202      	str	r2, [sp, #8]
 800f4bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f4c0:	9201      	str	r2, [sp, #4]
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4a53      	ldr	r2, [pc, #332]	; (800f614 <MX_USBX_Device_Init+0x2f0>)
 800f4c8:	4953      	ldr	r1, [pc, #332]	; (800f618 <MX_USBX_Device_Init+0x2f4>)
 800f4ca:	4854      	ldr	r0, [pc, #336]	; (800f61c <MX_USBX_Device_Init+0x2f8>)
 800f4cc:	f7fb fae0 	bl	800aa90 <_txe_thread_create>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d001      	beq.n	800f4da <MX_USBX_Device_Init+0x1b6>
                       0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
                       UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
                       UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_CREATE_ERORR */
		return TX_THREAD_ERROR;
 800f4d6:	230e      	movs	r3, #14
 800f4d8:	e075      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>
    /* USER CODE END MAIN_THREAD_CREATE_ERORR */
  }

  /* USER CODE BEGIN MX_USBX_Device_Init1 */
	if(tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT) != TX_SUCCESS)
 800f4da:	f107 010c 	add.w	r1, r7, #12
 800f4de:	2300      	movs	r3, #0
 800f4e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f4e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4e6:	f7fa fdc7 	bl	800a078 <_txe_byte_allocate>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d001      	beq.n	800f4f4 <MX_USBX_Device_Init+0x1d0>
		return TX_POOL_ERROR;
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	e068      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>

	if(tx_thread_create(&ux_hid_mouse_thread, "HID Mouse Thread", usbx_hid_mouse_thread_entry, 1, pointer, 1024, 20, 20, 1, TX_AUTO_START) != TX_SUCCESS)
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	22b0      	movs	r2, #176	; 0xb0
 800f4f8:	9206      	str	r2, [sp, #24]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	9205      	str	r2, [sp, #20]
 800f4fe:	2201      	movs	r2, #1
 800f500:	9204      	str	r2, [sp, #16]
 800f502:	2214      	movs	r2, #20
 800f504:	9203      	str	r2, [sp, #12]
 800f506:	2214      	movs	r2, #20
 800f508:	9202      	str	r2, [sp, #8]
 800f50a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f50e:	9201      	str	r2, [sp, #4]
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	2301      	movs	r3, #1
 800f514:	4a42      	ldr	r2, [pc, #264]	; (800f620 <MX_USBX_Device_Init+0x2fc>)
 800f516:	4943      	ldr	r1, [pc, #268]	; (800f624 <MX_USBX_Device_Init+0x300>)
 800f518:	4843      	ldr	r0, [pc, #268]	; (800f628 <MX_USBX_Device_Init+0x304>)
 800f51a:	f7fb fab9 	bl	800aa90 <_txe_thread_create>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d001      	beq.n	800f528 <MX_USBX_Device_Init+0x204>
		return TX_THREAD_ERROR;
 800f524:	230e      	movs	r3, #14
 800f526:	e04e      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>

	if(tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT) != TX_SUCCESS)
 800f528:	f107 010c 	add.w	r1, r7, #12
 800f52c:	2300      	movs	r3, #0
 800f52e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f534:	f7fa fda0 	bl	800a078 <_txe_byte_allocate>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <MX_USBX_Device_Init+0x21e>
		return TX_POOL_ERROR;
 800f53e:	2302      	movs	r3, #2
 800f540:	e041      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>

	if(tx_thread_create(&ux_cdc_acm_read_thread, "CDC Read Thread", usbx_cdc_read_thread_entry, 1, pointer, 1024, 20, 20, 1, TX_AUTO_START) != TX_SUCCESS)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	22b0      	movs	r2, #176	; 0xb0
 800f546:	9206      	str	r2, [sp, #24]
 800f548:	2201      	movs	r2, #1
 800f54a:	9205      	str	r2, [sp, #20]
 800f54c:	2201      	movs	r2, #1
 800f54e:	9204      	str	r2, [sp, #16]
 800f550:	2214      	movs	r2, #20
 800f552:	9203      	str	r2, [sp, #12]
 800f554:	2214      	movs	r2, #20
 800f556:	9202      	str	r2, [sp, #8]
 800f558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f55c:	9201      	str	r2, [sp, #4]
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	2301      	movs	r3, #1
 800f562:	4a32      	ldr	r2, [pc, #200]	; (800f62c <MX_USBX_Device_Init+0x308>)
 800f564:	4932      	ldr	r1, [pc, #200]	; (800f630 <MX_USBX_Device_Init+0x30c>)
 800f566:	4833      	ldr	r0, [pc, #204]	; (800f634 <MX_USBX_Device_Init+0x310>)
 800f568:	f7fb fa92 	bl	800aa90 <_txe_thread_create>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <MX_USBX_Device_Init+0x252>
		return TX_THREAD_ERROR;
 800f572:	230e      	movs	r3, #14
 800f574:	e027      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>

	if(tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT) != TX_SUCCESS)
 800f576:	f107 010c 	add.w	r1, r7, #12
 800f57a:	2300      	movs	r3, #0
 800f57c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f582:	f7fa fd79 	bl	800a078 <_txe_byte_allocate>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d001      	beq.n	800f590 <MX_USBX_Device_Init+0x26c>
		return TX_POOL_ERROR;
 800f58c:	2302      	movs	r3, #2
 800f58e:	e01a      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>

	if(tx_thread_create(&ux_cdc_acm_write_thread, "CDC Write Thread", usbx_cdc_write_thread_entry, 1, pointer, 1024, 20, 20, 1, TX_AUTO_START) != TX_SUCCESS)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	22b0      	movs	r2, #176	; 0xb0
 800f594:	9206      	str	r2, [sp, #24]
 800f596:	2201      	movs	r2, #1
 800f598:	9205      	str	r2, [sp, #20]
 800f59a:	2201      	movs	r2, #1
 800f59c:	9204      	str	r2, [sp, #16]
 800f59e:	2214      	movs	r2, #20
 800f5a0:	9203      	str	r2, [sp, #12]
 800f5a2:	2214      	movs	r2, #20
 800f5a4:	9202      	str	r2, [sp, #8]
 800f5a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5aa:	9201      	str	r2, [sp, #4]
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	4a21      	ldr	r2, [pc, #132]	; (800f638 <MX_USBX_Device_Init+0x314>)
 800f5b2:	4922      	ldr	r1, [pc, #136]	; (800f63c <MX_USBX_Device_Init+0x318>)
 800f5b4:	4822      	ldr	r0, [pc, #136]	; (800f640 <MX_USBX_Device_Init+0x31c>)
 800f5b6:	f7fb fa6b 	bl	800aa90 <_txe_thread_create>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d001      	beq.n	800f5c4 <MX_USBX_Device_Init+0x2a0>
		return TX_THREAD_ERROR;
 800f5c0:	230e      	movs	r3, #14
 800f5c2:	e000      	b.n	800f5c6 <MX_USBX_Device_Init+0x2a2>
  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 800f5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	373c      	adds	r7, #60	; 0x3c
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd90      	pop	{r4, r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	24004d0c 	.word	0x24004d0c
 800f5d4:	080107cd 	.word	0x080107cd
 800f5d8:	080107ed 	.word	0x080107ed
 800f5dc:	0801080d 	.word	0x0801080d
 800f5e0:	08010829 	.word	0x08010829
 800f5e4:	24004d00 	.word	0x24004d00
 800f5e8:	24004cfc 	.word	0x24004cfc
 800f5ec:	0800e095 	.word	0x0800e095
 800f5f0:	2400002c 	.word	0x2400002c
 800f5f4:	24004d28 	.word	0x24004d28
 800f5f8:	0800f6ad 	.word	0x0800f6ad
 800f5fc:	0800f6d5 	.word	0x0800f6d5
 800f600:	0800f6fd 	.word	0x0800f6fd
 800f604:	24004d08 	.word	0x24004d08
 800f608:	24004d04 	.word	0x24004d04
 800f60c:	0800d739 	.word	0x0800d739
 800f610:	24000014 	.word	0x24000014
 800f614:	0800f645 	.word	0x0800f645
 800f618:	08010a00 	.word	0x08010a00
 800f61c:	24004d34 	.word	0x24004d34
 800f620:	08010845 	.word	0x08010845
 800f624:	08010a1c 	.word	0x08010a1c
 800f628:	24004de4 	.word	0x24004de4
 800f62c:	0800f711 	.word	0x0800f711
 800f630:	08010a30 	.word	0x08010a30
 800f634:	24004e94 	.word	0x24004e94
 800f638:	0800f78d 	.word	0x0800f78d
 800f63c:	08010a40 	.word	0x08010a40
 800f640:	24004f44 	.word	0x24004f44

0800f644 <app_ux_device_thread_entry>:
  * @brief  Function implementing app_ux_device_thread_entry.
  * @param  thread_input: User thread input parameter.
  * @retval none
  */
static VOID app_ux_device_thread_entry(ULONG thread_input)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_ux_device_thread_entry */
	MX_USB_OTG_HS_PCD_Init();
 800f64c:	f7f1 fa1e 	bl	8000a8c <MX_USB_OTG_HS_PCD_Init>

	HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f650:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f654:	4813      	ldr	r0, [pc, #76]	; (800f6a4 <app_ux_device_thread_entry+0x60>)
 800f656:	f7f3 f914 	bl	8002882 <HAL_PCDEx_SetRxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x100);
 800f65a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f65e:	2100      	movs	r1, #0
 800f660:	4810      	ldr	r0, [pc, #64]	; (800f6a4 <app_ux_device_thread_entry+0x60>)
 800f662:	f7f3 f8c7 	bl	80027f4 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x100);
 800f666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f66a:	2101      	movs	r1, #1
 800f66c:	480d      	ldr	r0, [pc, #52]	; (800f6a4 <app_ux_device_thread_entry+0x60>)
 800f66e:	f7f3 f8c1 	bl	80027f4 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 2, 0x100);
 800f672:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f676:	2102      	movs	r1, #2
 800f678:	480a      	ldr	r0, [pc, #40]	; (800f6a4 <app_ux_device_thread_entry+0x60>)
 800f67a:	f7f3 f8bb 	bl	80027f4 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 3, 0x100);
 800f67e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f682:	2103      	movs	r1, #3
 800f684:	4807      	ldr	r0, [pc, #28]	; (800f6a4 <app_ux_device_thread_entry+0x60>)
 800f686:	f7f3 f8b5 	bl	80027f4 <HAL_PCDEx_SetTxFiFo>

	ux_dcd_stm32_initialize((ULONG)USB_OTG_HS, (ULONG)&hpcd_USB_OTG_HS);
 800f68a:	4b06      	ldr	r3, [pc, #24]	; (800f6a4 <app_ux_device_thread_entry+0x60>)
 800f68c:	4619      	mov	r1, r3
 800f68e:	4806      	ldr	r0, [pc, #24]	; (800f6a8 <app_ux_device_thread_entry+0x64>)
 800f690:	f7ff fcc4 	bl	800f01c <_ux_dcd_stm32_initialize>

	HAL_PCD_Start(&hpcd_USB_OTG_HS);
 800f694:	4803      	ldr	r0, [pc, #12]	; (800f6a4 <app_ux_device_thread_entry+0x60>)
 800f696:	f7f1 ff20 	bl	80014da <HAL_PCD_Start>
  /* USER CODE END app_ux_device_thread_entry */
}
 800f69a:	bf00      	nop
 800f69c:	3708      	adds	r7, #8
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	240041a4 	.word	0x240041a4
 800f6a8:	40040000 	.word	0x40040000

0800f6ac <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Activate */
	cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *)cdc_acm_instance;
 800f6b4:	4a05      	ldr	r2, [pc, #20]	; (800f6cc <USBD_CDC_ACM_Activate+0x20>)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	2101      	movs	r1, #1
 800f6be:	4804      	ldr	r0, [pc, #16]	; (800f6d0 <USBD_CDC_ACM_Activate+0x24>)
 800f6c0:	f7f1 fdce 	bl	8001260 <HAL_GPIO_WritePin>
  /* USER CODE END USBD_CDC_ACM_Activate */

  return;
 800f6c4:	bf00      	nop
}
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	24004ff4 	.word	0x24004ff4
 800f6d0:	58020400 	.word	0x58020400

0800f6d4 <USBD_CDC_ACM_Deactivate>:
  *         This function is called when extraction of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
	cdc_acm = UX_NULL;
 800f6dc:	4b05      	ldr	r3, [pc, #20]	; (800f6f4 <USBD_CDC_ACM_Deactivate+0x20>)
 800f6de:	2200      	movs	r2, #0
 800f6e0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	2101      	movs	r1, #1
 800f6e6:	4804      	ldr	r0, [pc, #16]	; (800f6f8 <USBD_CDC_ACM_Deactivate+0x24>)
 800f6e8:	f7f1 fdba 	bl	8001260 <HAL_GPIO_WritePin>
  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
 800f6ec:	bf00      	nop
}
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	24004ff4 	.word	0x24004ff4
 800f6f8:	58020400 	.word	0x58020400

0800f6fc <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_ParameterChange */
	UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
 800f704:	bf00      	nop
}
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <usbx_cdc_read_thread_entry>:

/* USER CODE BEGIN 1 */
VOID usbx_cdc_read_thread_entry(ULONG thread_input)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
	/* Local Variables */
	ULONG actual_length;
	UX_SLAVE_DEVICE *device;
	device = &_ux_system_slave->ux_system_slave_device;
 800f718:	4b18      	ldr	r3, [pc, #96]	; (800f77c <usbx_cdc_read_thread_entry+0x6c>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3320      	adds	r3, #32
 800f71e:	613b      	str	r3, [r7, #16]

	/* Infinite Loop */
	while(1)
	{
		/* Check if device is configured */
		if((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (cdc_acm != UX_NULL))
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b03      	cmp	r3, #3
 800f726:	d1fb      	bne.n	800f720 <usbx_cdc_read_thread_entry+0x10>
 800f728:	4b15      	ldr	r3, [pc, #84]	; (800f780 <usbx_cdc_read_thread_entry+0x70>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d0f7      	beq.n	800f720 <usbx_cdc_read_thread_entry+0x10>
		{
			ux_device_class_cdc_acm_read(cdc_acm, (UCHAR *)UserRxBuffer, 16, &actual_length);
 800f730:	4b13      	ldr	r3, [pc, #76]	; (800f780 <usbx_cdc_read_thread_entry+0x70>)
 800f732:	6818      	ldr	r0, [r3, #0]
 800f734:	f107 030c 	add.w	r3, r7, #12
 800f738:	2210      	movs	r2, #16
 800f73a:	4912      	ldr	r1, [pc, #72]	; (800f784 <usbx_cdc_read_thread_entry+0x74>)
 800f73c:	f7fe f96e 	bl	800da1c <_ux_device_class_cdc_acm_read>

			for(uint8_t i = 0; i < actual_length; i++)
 800f740:	2300      	movs	r3, #0
 800f742:	75fb      	strb	r3, [r7, #23]
 800f744:	e015      	b.n	800f772 <usbx_cdc_read_thread_entry+0x62>
			{
				switch(UserRxBuffer[i])
 800f746:	7dfb      	ldrb	r3, [r7, #23]
 800f748:	4a0e      	ldr	r2, [pc, #56]	; (800f784 <usbx_cdc_read_thread_entry+0x74>)
 800f74a:	5cd3      	ldrb	r3, [r2, r3]
 800f74c:	2b30      	cmp	r3, #48	; 0x30
 800f74e:	d007      	beq.n	800f760 <usbx_cdc_read_thread_entry+0x50>
 800f750:	2b31      	cmp	r3, #49	; 0x31
 800f752:	d10b      	bne.n	800f76c <usbx_cdc_read_thread_entry+0x5c>
				{
					case '1':
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800f754:	2201      	movs	r2, #1
 800f756:	2102      	movs	r1, #2
 800f758:	480b      	ldr	r0, [pc, #44]	; (800f788 <usbx_cdc_read_thread_entry+0x78>)
 800f75a:	f7f1 fd81 	bl	8001260 <HAL_GPIO_WritePin>
						break;
 800f75e:	e005      	b.n	800f76c <usbx_cdc_read_thread_entry+0x5c>
					case '0':
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800f760:	2200      	movs	r2, #0
 800f762:	2102      	movs	r1, #2
 800f764:	4808      	ldr	r0, [pc, #32]	; (800f788 <usbx_cdc_read_thread_entry+0x78>)
 800f766:	f7f1 fd7b 	bl	8001260 <HAL_GPIO_WritePin>
						break;
 800f76a:	bf00      	nop
			for(uint8_t i = 0; i < actual_length; i++)
 800f76c:	7dfb      	ldrb	r3, [r7, #23]
 800f76e:	3301      	adds	r3, #1
 800f770:	75fb      	strb	r3, [r7, #23]
 800f772:	7dfa      	ldrb	r2, [r7, #23]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	429a      	cmp	r2, r3
 800f778:	d3e5      	bcc.n	800f746 <usbx_cdc_read_thread_entry+0x36>
		if((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (cdc_acm != UX_NULL))
 800f77a:	e7d1      	b.n	800f720 <usbx_cdc_read_thread_entry+0x10>
 800f77c:	24004cf4 	.word	0x24004cf4
 800f780:	24004ff4 	.word	0x24004ff4
 800f784:	24004ff8 	.word	0x24004ff8
 800f788:	58021000 	.word	0x58021000

0800f78c <usbx_cdc_write_thread_entry>:
	/* Sleep for 10ms */
	tx_thread_sleep(1);
}

VOID usbx_cdc_write_thread_entry(ULONG thread_input)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
	/* Local Variables */
	ULONG actual_length;
	UX_SLAVE_DEVICE *device;
	device = &_ux_system_slave->ux_system_slave_device;
 800f794:	4b0b      	ldr	r3, [pc, #44]	; (800f7c4 <usbx_cdc_write_thread_entry+0x38>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	3320      	adds	r3, #32
 800f79a:	60fb      	str	r3, [r7, #12]

	/* Infinite Loop */
	while(1)
	{
		/* Check if device is configured */
		if((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (cdc_acm != UX_NULL))
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2b03      	cmp	r3, #3
 800f7a2:	d1fb      	bne.n	800f79c <usbx_cdc_write_thread_entry+0x10>
 800f7a4:	4b08      	ldr	r3, [pc, #32]	; (800f7c8 <usbx_cdc_write_thread_entry+0x3c>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d0f7      	beq.n	800f79c <usbx_cdc_write_thread_entry+0x10>
		{
			ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)UserTxMessage, sizeof(UserTxMessage), &actual_length);
 800f7ac:	4b06      	ldr	r3, [pc, #24]	; (800f7c8 <usbx_cdc_write_thread_entry+0x3c>)
 800f7ae:	6818      	ldr	r0, [r3, #0]
 800f7b0:	f107 0308 	add.w	r3, r7, #8
 800f7b4:	221b      	movs	r2, #27
 800f7b6:	4905      	ldr	r1, [pc, #20]	; (800f7cc <usbx_cdc_write_thread_entry+0x40>)
 800f7b8:	f7fe f9e2 	bl	800db80 <_ux_device_class_cdc_acm_write>

			/* Sleep for 1s */
			tx_thread_sleep(100);
 800f7bc:	2064      	movs	r0, #100	; 0x64
 800f7be:	f7f9 fcd5 	bl	800916c <_tx_thread_sleep>
		if((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (cdc_acm != UX_NULL))
 800f7c2:	e7eb      	b.n	800f79c <usbx_cdc_write_thread_entry+0x10>
 800f7c4:	24004cf4 	.word	0x24004cf4
 800f7c8:	24004ff4 	.word	0x24004ff4
 800f7cc:	08010a9c 	.word	0x08010a9c

0800f7d0 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	6039      	str	r1, [r7, #0]
 800f7da:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER TAG BEGIN Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 800f7e0:	79fb      	ldrb	r3, [r7, #7]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d113      	bne.n	800f80e <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 800f7e6:	4b16      	ldr	r3, [pc, #88]	; (800f840 <USBD_Get_Device_Framework_Speed+0x70>)
 800f7e8:	6819      	ldr	r1, [r3, #0]
 800f7ea:	79fb      	ldrb	r3, [r7, #7]
 800f7ec:	4a15      	ldr	r2, [pc, #84]	; (800f844 <USBD_Get_Device_Framework_Speed+0x74>)
 800f7ee:	4816      	ldr	r0, [pc, #88]	; (800f848 <USBD_Get_Device_Framework_Speed+0x78>)
 800f7f0:	f000 f9a0 	bl	800fb34 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 800f7f4:	4b14      	ldr	r3, [pc, #80]	; (800f848 <USBD_Get_Device_Framework_Speed+0x78>)
 800f7f6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800f7fa:	4b13      	ldr	r3, [pc, #76]	; (800f848 <USBD_Get_Device_Framework_Speed+0x78>)
 800f7fc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800f800:	441a      	add	r2, r3
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 800f806:	4b0e      	ldr	r3, [pc, #56]	; (800f840 <USBD_Get_Device_Framework_Speed+0x70>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	60fb      	str	r3, [r7, #12]
 800f80c:	e012      	b.n	800f834 <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 800f80e:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <USBD_Get_Device_Framework_Speed+0x7c>)
 800f810:	6819      	ldr	r1, [r3, #0]
 800f812:	79fb      	ldrb	r3, [r7, #7]
 800f814:	4a0b      	ldr	r2, [pc, #44]	; (800f844 <USBD_Get_Device_Framework_Speed+0x74>)
 800f816:	480e      	ldr	r0, [pc, #56]	; (800f850 <USBD_Get_Device_Framework_Speed+0x80>)
 800f818:	f000 f98c 	bl	800fb34 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 800f81c:	4b0c      	ldr	r3, [pc, #48]	; (800f850 <USBD_Get_Device_Framework_Speed+0x80>)
 800f81e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800f822:	4b0b      	ldr	r3, [pc, #44]	; (800f850 <USBD_Get_Device_Framework_Speed+0x80>)
 800f824:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800f828:	441a      	add	r2, r3
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 800f82e:	4b07      	ldr	r3, [pc, #28]	; (800f84c <USBD_Get_Device_Framework_Speed+0x7c>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE Device_Framework1 */

  /* USER CODE Device_Framework1 */
  return pFrameWork;
 800f834:	68fb      	ldr	r3, [r7, #12]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	24000080 	.word	0x24000080
 800f844:	24000070 	.word	0x24000070
 800f848:	24005008 	.word	0x24005008
 800f84c:	24000084 	.word	0x24000084
 800f850:	24005130 	.word	0x24005130

0800f854 <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 800f85c:	2300      	movs	r3, #0
 800f85e:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 800f860:	2300      	movs	r3, #0
 800f862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE String_Framework0 */

  /* USER CODE String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f864:	7bfb      	ldrb	r3, [r7, #15]
 800f866:	1c5a      	adds	r2, r3, #1
 800f868:	73fa      	strb	r2, [r7, #15]
 800f86a:	461a      	mov	r2, r3
 800f86c:	4b37      	ldr	r3, [pc, #220]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f86e:	2109      	movs	r1, #9
 800f870:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f872:	7bfb      	ldrb	r3, [r7, #15]
 800f874:	1c5a      	adds	r2, r3, #1
 800f876:	73fa      	strb	r2, [r7, #15]
 800f878:	461a      	mov	r2, r3
 800f87a:	4b34      	ldr	r3, [pc, #208]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f87c:	2104      	movs	r1, #4
 800f87e:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 800f880:	7bfb      	ldrb	r3, [r7, #15]
 800f882:	1c5a      	adds	r2, r3, #1
 800f884:	73fa      	strb	r2, [r7, #15]
 800f886:	461a      	mov	r2, r3
 800f888:	4b30      	ldr	r3, [pc, #192]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f88a:	2101      	movs	r1, #1
 800f88c:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 800f88e:	7bfb      	ldrb	r3, [r7, #15]
 800f890:	4a2e      	ldr	r2, [pc, #184]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f892:	4413      	add	r3, r2
 800f894:	f107 020c 	add.w	r2, r7, #12
 800f898:	4619      	mov	r1, r3
 800f89a:	482d      	ldr	r0, [pc, #180]	; (800f950 <USBD_Get_String_Framework+0xfc>)
 800f89c:	f000 f8fd 	bl	800fa9a <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 800f8a0:	89bb      	ldrh	r3, [r7, #12]
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	7bfb      	ldrb	r3, [r7, #15]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f8ae:	7bfb      	ldrb	r3, [r7, #15]
 800f8b0:	1c5a      	adds	r2, r3, #1
 800f8b2:	73fa      	strb	r2, [r7, #15]
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	4b25      	ldr	r3, [pc, #148]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f8b8:	2109      	movs	r1, #9
 800f8ba:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f8bc:	7bfb      	ldrb	r3, [r7, #15]
 800f8be:	1c5a      	adds	r2, r3, #1
 800f8c0:	73fa      	strb	r2, [r7, #15]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	4b21      	ldr	r3, [pc, #132]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f8c6:	2104      	movs	r1, #4
 800f8c8:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 800f8ca:	7bfb      	ldrb	r3, [r7, #15]
 800f8cc:	1c5a      	adds	r2, r3, #1
 800f8ce:	73fa      	strb	r2, [r7, #15]
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	4b1e      	ldr	r3, [pc, #120]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f8d4:	2102      	movs	r1, #2
 800f8d6:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 800f8d8:	7bfb      	ldrb	r3, [r7, #15]
 800f8da:	4a1c      	ldr	r2, [pc, #112]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f8dc:	4413      	add	r3, r2
 800f8de:	f107 020c 	add.w	r2, r7, #12
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	481b      	ldr	r0, [pc, #108]	; (800f954 <USBD_Get_String_Framework+0x100>)
 800f8e6:	f000 f8d8 	bl	800fa9a <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 800f8ea:	89bb      	ldrh	r3, [r7, #12]
 800f8ec:	b2da      	uxtb	r2, r3
 800f8ee:	7bfb      	ldrb	r3, [r7, #15]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f8f8:	7bfb      	ldrb	r3, [r7, #15]
 800f8fa:	1c5a      	adds	r2, r3, #1
 800f8fc:	73fa      	strb	r2, [r7, #15]
 800f8fe:	461a      	mov	r2, r3
 800f900:	4b12      	ldr	r3, [pc, #72]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f902:	2109      	movs	r1, #9
 800f904:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f906:	7bfb      	ldrb	r3, [r7, #15]
 800f908:	1c5a      	adds	r2, r3, #1
 800f90a:	73fa      	strb	r2, [r7, #15]
 800f90c:	461a      	mov	r2, r3
 800f90e:	4b0f      	ldr	r3, [pc, #60]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f910:	2104      	movs	r1, #4
 800f912:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800f914:	7bfb      	ldrb	r3, [r7, #15]
 800f916:	1c5a      	adds	r2, r3, #1
 800f918:	73fa      	strb	r2, [r7, #15]
 800f91a:	461a      	mov	r2, r3
 800f91c:	4b0b      	ldr	r3, [pc, #44]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f91e:	2103      	movs	r1, #3
 800f920:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 800f922:	7bfb      	ldrb	r3, [r7, #15]
 800f924:	4a09      	ldr	r2, [pc, #36]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f926:	4413      	add	r3, r2
 800f928:	f107 020c 	add.w	r2, r7, #12
 800f92c:	4619      	mov	r1, r3
 800f92e:	480a      	ldr	r0, [pc, #40]	; (800f958 <USBD_Get_String_Framework+0x104>)
 800f930:	f000 f8b3 	bl	800fa9a <USBD_Desc_GetString>
  /* USER CODE String_Framework1 */

  /* USER CODE String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 800f934:	4805      	ldr	r0, [pc, #20]	; (800f94c <USBD_Get_String_Framework+0xf8>)
 800f936:	f7f0 fe07 	bl	8000548 <strlen>
 800f93a:	4602      	mov	r2, r0
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 800f940:	4b02      	ldr	r3, [pc, #8]	; (800f94c <USBD_Get_String_Framework+0xf8>)
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	240053e8 	.word	0x240053e8
 800f950:	08010a54 	.word	0x08010a54
 800f954:	08010a68 	.word	0x08010a68
 800f958:	08010a7c 	.word	0x08010a7c

0800f95c <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 800f964:	2300      	movs	r3, #0
 800f966:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f968:	7bfb      	ldrb	r3, [r7, #15]
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	73fa      	strb	r2, [r7, #15]
 800f96e:	461a      	mov	r2, r3
 800f970:	4b0a      	ldr	r3, [pc, #40]	; (800f99c <USBD_Get_Language_Id_Framework+0x40>)
 800f972:	2109      	movs	r1, #9
 800f974:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 800f976:	7bfb      	ldrb	r3, [r7, #15]
 800f978:	1c5a      	adds	r2, r3, #1
 800f97a:	73fa      	strb	r2, [r7, #15]
 800f97c:	461a      	mov	r2, r3
 800f97e:	4b07      	ldr	r3, [pc, #28]	; (800f99c <USBD_Get_Language_Id_Framework+0x40>)
 800f980:	2104      	movs	r1, #4
 800f982:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 800f984:	4805      	ldr	r0, [pc, #20]	; (800f99c <USBD_Get_Language_Id_Framework+0x40>)
 800f986:	f7f0 fddf 	bl	8000548 <strlen>
 800f98a:	4602      	mov	r2, r0
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 800f990:	4b02      	ldr	r3, [pc, #8]	; (800f99c <USBD_Get_Language_Id_Framework+0x40>)
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	240054e8 	.word	0x240054e8

0800f9a0 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	460a      	mov	r2, r1
 800f9aa:	71fb      	strb	r3, [r7, #7]
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	73bb      	strb	r3, [r7, #14]
 800f9bc:	e021      	b.n	800fa02 <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800f9be:	7bbb      	ldrb	r3, [r7, #14]
 800f9c0:	4a15      	ldr	r2, [pc, #84]	; (800fa18 <USBD_Get_Interface_Number+0x78>)
 800f9c2:	215c      	movs	r1, #92	; 0x5c
 800f9c4:	fb01 f303 	mul.w	r3, r1, r3
 800f9c8:	4413      	add	r3, r2
 800f9ca:	330c      	adds	r3, #12
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	79fa      	ldrb	r2, [r7, #7]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d113      	bne.n	800f9fc <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 800f9d4:	7bbb      	ldrb	r3, [r7, #14]
 800f9d6:	4a10      	ldr	r2, [pc, #64]	; (800fa18 <USBD_Get_Interface_Number+0x78>)
 800f9d8:	215c      	movs	r1, #92	; 0x5c
 800f9da:	fb01 f303 	mul.w	r3, r1, r3
 800f9de:	4413      	add	r3, r2
 800f9e0:	3314      	adds	r3, #20
 800f9e2:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800f9e4:	79ba      	ldrb	r2, [r7, #6]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d108      	bne.n	800f9fc <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 800f9ea:	7bbb      	ldrb	r3, [r7, #14]
 800f9ec:	4a0a      	ldr	r2, [pc, #40]	; (800fa18 <USBD_Get_Interface_Number+0x78>)
 800f9ee:	215c      	movs	r1, #92	; 0x5c
 800f9f0:	fb01 f303 	mul.w	r3, r1, r3
 800f9f4:	4413      	add	r3, r2
 800f9f6:	335a      	adds	r3, #90	; 0x5a
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800f9fc:	7bbb      	ldrb	r3, [r7, #14]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	73bb      	strb	r3, [r7, #14]
 800fa02:	7bbb      	ldrb	r3, [r7, #14]
 800fa04:	2b02      	cmp	r3, #2
 800fa06:	d9da      	bls.n	800f9be <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  return itf_num;
 800fa08:	7bfb      	ldrb	r3, [r7, #15]
 800fa0a:	b29b      	uxth	r3, r3
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3714      	adds	r7, #20
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr
 800fa18:	24005008 	.word	0x24005008

0800fa1c <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b085      	sub	sp, #20
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	4603      	mov	r3, r0
 800fa24:	460a      	mov	r2, r1
 800fa26:	71fb      	strb	r3, [r7, #7]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
 800fa32:	b29b      	uxth	r3, r3
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3714      	adds	r7, #20
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <USBD_HID_ReportDesc>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Pointer to HID Report Descriptor buffer
  */
uint8_t *USBD_HID_ReportDesc(uint8_t hid_type)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b085      	sub	sp, #20
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	4603      	mov	r3, r0
 800fa48:	71fb      	strb	r3, [r7, #7]
  uint8_t *pHidReportDesc = NULL;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	60fb      	str	r3, [r7, #12]

  /* USER CODE HidReportDesc0 */

  /* USER CODE HidReportDesc0 */

  switch(hid_type)
 800fa4e:	79fb      	ldrb	r3, [r7, #7]
 800fa50:	2b02      	cmp	r3, #2
 800fa52:	d102      	bne.n	800fa5a <USBD_HID_ReportDesc+0x1a>
  {
    case INTERFACE_HID_MOUSE:
      pHidReportDesc = USBD_HID_MOUSE_ReportDesc;
 800fa54:	4b05      	ldr	r3, [pc, #20]	; (800fa6c <USBD_HID_ReportDesc+0x2c>)
 800fa56:	60fb      	str	r3, [r7, #12]
      break;
 800fa58:	e000      	b.n	800fa5c <USBD_HID_ReportDesc+0x1c>

    default:
      break;
 800fa5a:	bf00      	nop

  /* USER CODE HidReportDesc1 */

  /* USER CODE HidReportDesc1 */

  return pHidReportDesc;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3714      	adds	r7, #20
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop
 800fa6c:	24000088 	.word	0x24000088

0800fa70 <USBD_HID_ReportDesc_length>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Size of HID Report Descriptor buffer
  */
uint16_t USBD_HID_ReportDesc_length(uint8_t hid_type)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b085      	sub	sp, #20
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	4603      	mov	r3, r0
 800fa78:	71fb      	strb	r3, [r7, #7]
  uint16_t ReportDesc_Size = 0;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	81fb      	strh	r3, [r7, #14]

  /* USER CODE ReportDesc_Size0 */

  /* USER CODE ReportDesc_Size0 */

  switch(hid_type)
 800fa7e:	79fb      	ldrb	r3, [r7, #7]
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d102      	bne.n	800fa8a <USBD_HID_ReportDesc_length+0x1a>
  {
    case INTERFACE_HID_MOUSE:
      ReportDesc_Size = sizeof(USBD_HID_MOUSE_ReportDesc);
 800fa84:	234a      	movs	r3, #74	; 0x4a
 800fa86:	81fb      	strh	r3, [r7, #14]
      break;
 800fa88:	e000      	b.n	800fa8c <USBD_HID_ReportDesc_length+0x1c>

    default:
      break;
 800fa8a:	bf00      	nop

  /* USER CODE ReportDesc_Size1 */

  /* USER CODE ReportDesc_Size1 */

  return ReportDesc_Size;
 800fa8c:	89fb      	ldrh	r3, [r7, #14]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b086      	sub	sp, #24
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	60f8      	str	r0, [r7, #12]
 800faa2:	60b9      	str	r1, [r7, #8]
 800faa4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800faa6:	2300      	movs	r3, #0
 800faa8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d023      	beq.n	800faf8 <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 800fab4:	6938      	ldr	r0, [r7, #16]
 800fab6:	f000 f823 	bl	800fb00 <USBD_Desc_GetLen>
 800faba:	4603      	mov	r3, r0
 800fabc:	b29a      	uxth	r2, r3
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 800fac2:	7dfb      	ldrb	r3, [r7, #23]
 800fac4:	1c5a      	adds	r2, r3, #1
 800fac6:	75fa      	strb	r2, [r7, #23]
 800fac8:	461a      	mov	r2, r3
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	4413      	add	r3, r2
 800face:	687a      	ldr	r2, [r7, #4]
 800fad0:	7812      	ldrb	r2, [r2, #0]
 800fad2:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800fad4:	e00b      	b.n	800faee <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 800fad6:	7dfb      	ldrb	r3, [r7, #23]
 800fad8:	1c5a      	adds	r2, r3, #1
 800fada:	75fa      	strb	r2, [r7, #23]
 800fadc:	461a      	mov	r2, r3
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	4413      	add	r3, r2
 800fae2:	693a      	ldr	r2, [r7, #16]
 800fae4:	7812      	ldrb	r2, [r2, #0]
 800fae6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	3301      	adds	r3, #1
 800faec:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1ef      	bne.n	800fad6 <USBD_Desc_GetString+0x3c>
 800faf6:	e000      	b.n	800fafa <USBD_Desc_GetString+0x60>
    return;
 800faf8:	bf00      	nop
  }
}
 800fafa:	3718      	adds	r7, #24
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b085      	sub	sp, #20
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fb10:	e005      	b.n	800fb1e <USBD_Desc_GetLen+0x1e>
  {
    len++;
 800fb12:	7bfb      	ldrb	r3, [r7, #15]
 800fb14:	3301      	adds	r3, #1
 800fb16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1f5      	bne.n	800fb12 <USBD_Desc_GetLen+0x12>
  }

  return len;
 800fb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3714      	adds	r7, #20
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b088      	sub	sp, #32
 800fb38:	af02      	add	r7, sp, #8
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	607a      	str	r2, [r7, #4]
 800fb40:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 800fb42:	2300      	movs	r3, #0
 800fb44:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  pdev->CurrDevDescSz = 0U;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 800fb56:	4a73      	ldr	r2, [pc, #460]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 800fb5c:	4b71      	ldr	r3, [pc, #452]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2212      	movs	r2, #18
 800fb62:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 800fb64:	4b6f      	ldr	r3, [pc, #444]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 800fb6c:	4b6d      	ldr	r3, [pc, #436]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	2200      	movs	r2, #0
 800fb72:	709a      	strb	r2, [r3, #2]
 800fb74:	2200      	movs	r2, #0
 800fb76:	f042 0202 	orr.w	r2, r2, #2
 800fb7a:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 800fb7c:	4b69      	ldr	r3, [pc, #420]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2200      	movs	r2, #0
 800fb82:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 800fb84:	4b67      	ldr	r3, [pc, #412]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 800fb8c:	4b65      	ldr	r3, [pc, #404]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2200      	movs	r2, #0
 800fb92:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 800fb94:	4b63      	ldr	r3, [pc, #396]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2240      	movs	r2, #64	; 0x40
 800fb9a:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 800fb9c:	4b61      	ldr	r3, [pc, #388]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f062 027c 	orn	r2, r2, #124	; 0x7c
 800fba6:	721a      	strb	r2, [r3, #8]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	f042 0204 	orr.w	r2, r2, #4
 800fbae:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 800fbb0:	4b5c      	ldr	r3, [pc, #368]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f042 0210 	orr.w	r2, r2, #16
 800fbba:	729a      	strb	r2, [r3, #10]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800fbc2:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 800fbc4:	4b57      	ldr	r3, [pc, #348]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	731a      	strb	r2, [r3, #12]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f042 0202 	orr.w	r2, r2, #2
 800fbd2:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 800fbd4:	4b53      	ldr	r3, [pc, #332]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2201      	movs	r2, #1
 800fbda:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 800fbdc:	4b51      	ldr	r3, [pc, #324]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2202      	movs	r2, #2
 800fbe2:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 800fbe4:	4b4f      	ldr	r3, [pc, #316]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	2203      	movs	r2, #3
 800fbea:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 800fbec:	4b4d      	ldr	r3, [pc, #308]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fbfa:	f103 0212 	add.w	r2, r3, #18
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 800fc04:	78fb      	ldrb	r3, [r7, #3]
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d162      	bne.n	800fcd0 <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fc10:	68ba      	ldr	r2, [r7, #8]
 800fc12:	4413      	add	r3, r2
 800fc14:	4a44      	ldr	r2, [pc, #272]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc16:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 800fc18:	4b43      	ldr	r3, [pc, #268]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	220a      	movs	r2, #10
 800fc1e:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 800fc20:	4b41      	ldr	r3, [pc, #260]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2206      	movs	r2, #6
 800fc26:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 800fc28:	4b3f      	ldr	r3, [pc, #252]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	709a      	strb	r2, [r3, #2]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f042 0202 	orr.w	r2, r2, #2
 800fc36:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 800fc38:	4b3b      	ldr	r3, [pc, #236]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 800fc40:	4b39      	ldr	r3, [pc, #228]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2200      	movs	r2, #0
 800fc46:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 800fc48:	4b37      	ldr	r3, [pc, #220]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 800fc50:	4b35      	ldr	r3, [pc, #212]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	2240      	movs	r2, #64	; 0x40
 800fc56:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 800fc58:	4b33      	ldr	r3, [pc, #204]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 800fc60:	4b31      	ldr	r3, [pc, #196]	; (800fd28 <USBD_Device_Framework_Builder+0x1f4>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2200      	movs	r2, #0
 800fc66:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fc6e:	f103 020a 	add.w	r2, r3, #10
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800fc78:	e02a      	b.n	800fcd0 <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	2b02      	cmp	r3, #2
 800fc80:	d823      	bhi.n	800fcca <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800fc86:	2b02      	cmp	r3, #2
 800fc88:	d81f      	bhi.n	800fcca <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 800fc8a:	7dfb      	ldrb	r3, [r7, #23]
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	4413      	add	r3, r2
 800fc90:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d019      	beq.n	800fcca <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 800fc96:	7dfb      	ldrb	r3, [r7, #23]
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 800fc9c:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 800fca4:	68ba      	ldr	r2, [r7, #8]
 800fca6:	4413      	add	r3, r2
 800fca8:	78fa      	ldrb	r2, [r7, #3]
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	4613      	mov	r3, r2
 800fcae:	2200      	movs	r2, #0
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f000 f83b 	bl	800fd2c <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	1c5a      	adds	r2, r3, #1
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	1c5a      	adds	r2, r3, #1
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 800fcca:	7dfb      	ldrb	r3, [r7, #23]
 800fccc:	3301      	adds	r3, #1
 800fcce:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800fcd0:	7dfb      	ldrb	r3, [r7, #23]
 800fcd2:	2b02      	cmp	r3, #2
 800fcd4:	d9d1      	bls.n	800fc7a <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	689b      	ldr	r3, [r3, #8]
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d90c      	bls.n	800fcf8 <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 800fcde:	4b11      	ldr	r3, [pc, #68]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	22ef      	movs	r2, #239	; 0xef
 800fce4:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 800fce6:	4b0f      	ldr	r3, [pc, #60]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2202      	movs	r2, #2
 800fcec:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 800fcee:	4b0d      	ldr	r3, [pc, #52]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	719a      	strb	r2, [r3, #6]
 800fcf6:	e00f      	b.n	800fd18 <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d10b      	bne.n	800fd18 <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 800fd00:	4b08      	ldr	r3, [pc, #32]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2202      	movs	r2, #2
 800fd06:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 800fd08:	4b06      	ldr	r3, [pc, #24]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2202      	movs	r2, #2
 800fd0e:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 800fd10:	4b04      	ldr	r3, [pc, #16]	; (800fd24 <USBD_Device_Framework_Builder+0x1f0>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	2200      	movs	r2, #0
 800fd16:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 800fd18:	68bb      	ldr	r3, [r7, #8]
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3718      	adds	r7, #24
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	240054ec 	.word	0x240054ec
 800fd28:	240054f0 	.word	0x240054f0

0800fd2c <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	4608      	mov	r0, r1
 800fd36:	4611      	mov	r1, r2
 800fd38:	461a      	mov	r2, r3
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	70fb      	strb	r3, [r7, #3]
 800fd3e:	460b      	mov	r3, r1
 800fd40:	70bb      	strb	r3, [r7, #2]
 800fd42:	4613      	mov	r3, r2
 800fd44:	707b      	strb	r3, [r7, #1]
  static uint8_t interface_idx = 0U;

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	2b02      	cmp	r3, #2
 800fd4c:	d853      	bhi.n	800fdf6 <USBD_FrameWork_AddClass+0xca>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	215c      	movs	r1, #92	; 0x5c
 800fd56:	fb01 f303 	mul.w	r3, r1, r3
 800fd5a:	4413      	add	r3, r2
 800fd5c:	3318      	adds	r3, #24
 800fd5e:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d148      	bne.n	800fdf6 <USBD_FrameWork_AddClass+0xca>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	685b      	ldr	r3, [r3, #4]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	6852      	ldr	r2, [r2, #4]
 800fd6c:	6879      	ldr	r1, [r7, #4]
 800fd6e:	205c      	movs	r0, #92	; 0x5c
 800fd70:	fb00 f303 	mul.w	r3, r0, r3
 800fd74:	440b      	add	r3, r1
 800fd76:	3310      	adds	r3, #16
 800fd78:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	215c      	movs	r1, #92	; 0x5c
 800fd82:	fb01 f303 	mul.w	r3, r1, r3
 800fd86:	4413      	add	r3, r2
 800fd88:	3318      	adds	r3, #24
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	215c      	movs	r1, #92	; 0x5c
 800fd96:	fb01 f303 	mul.w	r3, r1, r3
 800fd9a:	4413      	add	r3, r2
 800fd9c:	330c      	adds	r3, #12
 800fd9e:	78fa      	ldrb	r2, [r7, #3]
 800fda0:	701a      	strb	r2, [r3, #0]

    if (class == CLASS_TYPE_HID)
 800fda2:	78fb      	ldrb	r3, [r7, #3]
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d11b      	bne.n	800fde0 <USBD_FrameWork_AddClass+0xb4>
    {
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 800fda8:	4b15      	ldr	r3, [pc, #84]	; (800fe00 <USBD_FrameWork_AddClass+0xd4>)
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	4619      	mov	r1, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	4a14      	ldr	r2, [pc, #80]	; (800fe04 <USBD_FrameWork_AddClass+0xd8>)
 800fdb4:	5c50      	ldrb	r0, [r2, r1]
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	215c      	movs	r1, #92	; 0x5c
 800fdba:	fb01 f303 	mul.w	r3, r1, r3
 800fdbe:	4413      	add	r3, r2
 800fdc0:	3314      	adds	r3, #20
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	701a      	strb	r2, [r3, #0]

      interface_idx++;
 800fdc6:	4b0e      	ldr	r3, [pc, #56]	; (800fe00 <USBD_FrameWork_AddClass+0xd4>)
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	b2da      	uxtb	r2, r3
 800fdce:	4b0c      	ldr	r3, [pc, #48]	; (800fe00 <USBD_FrameWork_AddClass+0xd4>)
 800fdd0:	701a      	strb	r2, [r3, #0]

      if (interface_idx == sizeof(UserHIDInterface))
 800fdd2:	4b0b      	ldr	r3, [pc, #44]	; (800fe00 <USBD_FrameWork_AddClass+0xd4>)
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d102      	bne.n	800fde0 <USBD_FrameWork_AddClass+0xb4>
      {
        interface_idx = 0U;
 800fdda:	4b09      	ldr	r3, [pc, #36]	; (800fe00 <USBD_FrameWork_AddClass+0xd4>)
 800fddc:	2200      	movs	r2, #0
 800fdde:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 800fde0:	787b      	ldrb	r3, [r7, #1]
 800fde2:	693a      	ldr	r2, [r7, #16]
 800fde4:	4619      	mov	r1, r3
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 f80e 	bl	800fe08 <USBD_FrameWork_AddToConfDesc>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d001      	beq.n	800fdf6 <USBD_FrameWork_AddClass+0xca>
    {
      return UX_ERROR;
 800fdf2:	23ff      	movs	r3, #255	; 0xff
 800fdf4:	e000      	b.n	800fdf8 <USBD_FrameWork_AddClass+0xcc>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 800fdf6:	2300      	movs	r3, #0
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	240054f4 	.word	0x240054f4
 800fe04:	2400007c 	.word	0x2400007c

0800fe08 <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b086      	sub	sp, #24
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	460b      	mov	r3, r1
 800fe12:	607a      	str	r2, [r7, #4]
 800fe14:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 800fe16:	2300      	movs	r3, #0
 800fe18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	7afa      	ldrb	r2, [r7, #11]
 800fe1e:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d107      	bne.n	800fe38 <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800fe30:	4619      	mov	r1, r3
 800fe32:	4610      	mov	r0, r2
 800fe34:	f000 f8ed 	bl	8010012 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	68fa      	ldr	r2, [r7, #12]
 800fe3e:	215c      	movs	r1, #92	; 0x5c
 800fe40:	fb01 f303 	mul.w	r3, r1, r3
 800fe44:	4413      	add	r3, r2
 800fe46:	330c      	adds	r3, #12
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d002      	beq.n	800fe54 <USBD_FrameWork_AddToConfDesc+0x4c>
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d04a      	beq.n	800fee8 <USBD_FrameWork_AddToConfDesc+0xe0>

    default:
      /* USER CODE FrameWork_AddToConfDesc_2 */

      /* USER CODE FrameWork_AddToConfDesc_2 */
      break;
 800fe52:	e0ac      	b.n	800ffae <USBD_FrameWork_AddToConfDesc+0x1a6>
      switch(pdev->tclasslist[pdev->classId].InterfaceType)
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	215c      	movs	r1, #92	; 0x5c
 800fe5c:	fb01 f303 	mul.w	r3, r1, r3
 800fe60:	4413      	add	r3, r2
 800fe62:	3314      	adds	r3, #20
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	d13c      	bne.n	800fee4 <USBD_FrameWork_AddToConfDesc+0xdc>
          interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f000 f8a4 	bl	800ffb8 <USBD_FrameWork_FindFreeIFNbr>
 800fe70:	4603      	mov	r3, r0
 800fe72:	75fb      	strb	r3, [r7, #23]
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	215c      	movs	r1, #92	; 0x5c
 800fe7c:	fb01 f303 	mul.w	r3, r1, r3
 800fe80:	4413      	add	r3, r2
 800fe82:	3320      	adds	r3, #32
 800fe84:	2201      	movs	r2, #1
 800fe86:	601a      	str	r2, [r3, #0]
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	215c      	movs	r1, #92	; 0x5c
 800fe90:	fb01 f303 	mul.w	r3, r1, r3
 800fe94:	4413      	add	r3, r2
 800fe96:	335a      	adds	r3, #90	; 0x5a
 800fe98:	7dfa      	ldrb	r2, [r7, #23]
 800fe9a:	701a      	strb	r2, [r3, #0]
          pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP_IN */
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	215c      	movs	r1, #92	; 0x5c
 800fea4:	fb01 f303 	mul.w	r3, r1, r3
 800fea8:	4413      	add	r3, r2
 800feaa:	331c      	adds	r3, #28
 800feac:	2201      	movs	r2, #1
 800feae:	601a      	str	r2, [r3, #0]
          if (pdev->Speed == USBD_HIGH_SPEED)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d106      	bne.n	800fec6 <USBD_FrameWork_AddToConfDesc+0xbe>
            USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 800feb8:	2304      	movs	r3, #4
 800feba:	2203      	movs	r2, #3
 800febc:	2181      	movs	r1, #129	; 0x81
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f000 f8d4 	bl	801006c <USBD_FrameWork_AssignEp>
 800fec4:	e005      	b.n	800fed2 <USBD_FrameWork_AddToConfDesc+0xca>
            USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 800fec6:	2304      	movs	r3, #4
 800fec8:	2203      	movs	r2, #3
 800feca:	2181      	movs	r1, #129	; 0x81
 800fecc:	68f8      	ldr	r0, [r7, #12]
 800fece:	f000 f8cd 	bl	801006c <USBD_FrameWork_AssignEp>
          USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800fed2:	6879      	ldr	r1, [r7, #4]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800feda:	461a      	mov	r2, r3
 800fedc:	68f8      	ldr	r0, [r7, #12]
 800fede:	f000 f939 	bl	8010154 <USBD_FrameWork_HID_Desc>
          break;
 800fee2:	e000      	b.n	800fee6 <USBD_FrameWork_AddToConfDesc+0xde>
          break;
 800fee4:	bf00      	nop
      break;
 800fee6:	e062      	b.n	800ffae <USBD_FrameWork_AddToConfDesc+0x1a6>
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f000 f865 	bl	800ffb8 <USBD_FrameWork_FindFreeIFNbr>
 800feee:	4603      	mov	r3, r0
 800fef0:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	68fa      	ldr	r2, [r7, #12]
 800fef8:	215c      	movs	r1, #92	; 0x5c
 800fefa:	fb01 f303 	mul.w	r3, r1, r3
 800fefe:	4413      	add	r3, r2
 800ff00:	3320      	adds	r3, #32
 800ff02:	2202      	movs	r2, #2
 800ff04:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	68fa      	ldr	r2, [r7, #12]
 800ff0c:	215c      	movs	r1, #92	; 0x5c
 800ff0e:	fb01 f303 	mul.w	r3, r1, r3
 800ff12:	4413      	add	r3, r2
 800ff14:	335a      	adds	r3, #90	; 0x5a
 800ff16:	7dfa      	ldrb	r2, [r7, #23]
 800ff18:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	7dfa      	ldrb	r2, [r7, #23]
 800ff20:	3201      	adds	r2, #1
 800ff22:	b2d0      	uxtb	r0, r2
 800ff24:	68fa      	ldr	r2, [r7, #12]
 800ff26:	215c      	movs	r1, #92	; 0x5c
 800ff28:	fb01 f303 	mul.w	r3, r1, r3
 800ff2c:	4413      	add	r3, r2
 800ff2e:	335b      	adds	r3, #91	; 0x5b
 800ff30:	4602      	mov	r2, r0
 800ff32:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	68fa      	ldr	r2, [r7, #12]
 800ff3a:	215c      	movs	r1, #92	; 0x5c
 800ff3c:	fb01 f303 	mul.w	r3, r1, r3
 800ff40:	4413      	add	r3, r2
 800ff42:	331c      	adds	r3, #28
 800ff44:	2203      	movs	r2, #3
 800ff46:	601a      	str	r2, [r3, #0]
      if (Speed == USBD_HIGH_SPEED)
 800ff48:	7afb      	ldrb	r3, [r7, #11]
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d114      	bne.n	800ff78 <USBD_FrameWork_AddToConfDesc+0x170>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800ff4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff52:	2202      	movs	r2, #2
 800ff54:	2102      	movs	r1, #2
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f000 f888 	bl	801006c <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800ff5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff60:	2202      	movs	r2, #2
 800ff62:	2182      	movs	r1, #130	; 0x82
 800ff64:	68f8      	ldr	r0, [r7, #12]
 800ff66:	f000 f881 	bl	801006c <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800ff6a:	2308      	movs	r3, #8
 800ff6c:	2203      	movs	r2, #3
 800ff6e:	2183      	movs	r1, #131	; 0x83
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f000 f87b 	bl	801006c <USBD_FrameWork_AssignEp>
 800ff76:	e011      	b.n	800ff9c <USBD_FrameWork_AddToConfDesc+0x194>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800ff78:	2340      	movs	r3, #64	; 0x40
 800ff7a:	2202      	movs	r2, #2
 800ff7c:	2102      	movs	r1, #2
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f000 f874 	bl	801006c <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800ff84:	2340      	movs	r3, #64	; 0x40
 800ff86:	2202      	movs	r2, #2
 800ff88:	2182      	movs	r1, #130	; 0x82
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f000 f86e 	bl	801006c <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800ff90:	2308      	movs	r3, #8
 800ff92:	2203      	movs	r2, #3
 800ff94:	2183      	movs	r1, #131	; 0x83
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	f000 f868 	bl	801006c <USBD_FrameWork_AssignEp>
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800ff9c:	6879      	ldr	r1, [r7, #4]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	f000 f9f2 	bl	8010390 <USBD_FrameWork_CDCDesc>
      break;
 800ffac:	bf00      	nop
  }

  return UX_SUCCESS;
 800ffae:	2300      	movs	r3, #0
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3718      	adds	r7, #24
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b087      	sub	sp, #28
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	613b      	str	r3, [r7, #16]
 800ffc8:	e016      	b.n	800fff8 <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800ffca:	2300      	movs	r3, #0
 800ffcc:	60fb      	str	r3, [r7, #12]
 800ffce:	e005      	b.n	800ffdc <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	60fb      	str	r3, [r7, #12]
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	215c      	movs	r1, #92	; 0x5c
 800ffe2:	fb01 f303 	mul.w	r3, r1, r3
 800ffe6:	4413      	add	r3, r2
 800ffe8:	3320      	adds	r3, #32
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d3ee      	bcc.n	800ffd0 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	3301      	adds	r3, #1
 800fff6:	613b      	str	r3, [r7, #16]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	693a      	ldr	r2, [r7, #16]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d3e3      	bcc.n	800ffca <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	b2db      	uxtb	r3, r3
}
 8010006:	4618      	mov	r0, r3
 8010008:	371c      	adds	r7, #28
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr

08010012 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 8010012:	b480      	push	{r7}
 8010014:	b085      	sub	sp, #20
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
 801001a:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2209      	movs	r2, #9
 8010024:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	2202      	movs	r2, #2
 801002a:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2200      	movs	r2, #0
 8010030:	709a      	strb	r2, [r3, #2]
 8010032:	2200      	movs	r2, #0
 8010034:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2200      	movs	r2, #0
 801003a:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2201      	movs	r2, #1
 8010040:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2200      	movs	r2, #0
 8010046:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	22c0      	movs	r2, #192	; 0xc0
 801004c:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2219      	movs	r2, #25
 8010052:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f103 0209 	add.w	r2, r3, #9
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	601a      	str	r2, [r3, #0]
}
 8010060:	bf00      	nop
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 801006c:	b490      	push	{r4, r7}
 801006e:	b086      	sub	sp, #24
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	607b      	str	r3, [r7, #4]
 8010076:	460b      	mov	r3, r1
 8010078:	72fb      	strb	r3, [r7, #11]
 801007a:	4613      	mov	r3, r2
 801007c:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 801007e:	2300      	movs	r3, #0
 8010080:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8010082:	e002      	b.n	801008a <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	3301      	adds	r3, #1
 8010088:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	215c      	movs	r1, #92	; 0x5c
 8010092:	fb01 f303 	mul.w	r3, r1, r3
 8010096:	4413      	add	r3, r2
 8010098:	331c      	adds	r3, #28
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	697a      	ldr	r2, [r7, #20]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d210      	bcs.n	80100c4 <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	6858      	ldr	r0, [r3, #4]
 80100a6:	68f9      	ldr	r1, [r7, #12]
 80100a8:	697a      	ldr	r2, [r7, #20]
 80100aa:	4613      	mov	r3, r2
 80100ac:	005b      	lsls	r3, r3, #1
 80100ae:	4413      	add	r3, r2
 80100b0:	005b      	lsls	r3, r3, #1
 80100b2:	225c      	movs	r2, #92	; 0x5c
 80100b4:	fb00 f202 	mul.w	r2, r0, r2
 80100b8:	4413      	add	r3, r2
 80100ba:	440b      	add	r3, r1
 80100bc:	3328      	adds	r3, #40	; 0x28
 80100be:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d1df      	bne.n	8010084 <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	6858      	ldr	r0, [r3, #4]
 80100c8:	68f9      	ldr	r1, [r7, #12]
 80100ca:	697a      	ldr	r2, [r7, #20]
 80100cc:	4613      	mov	r3, r2
 80100ce:	005b      	lsls	r3, r3, #1
 80100d0:	4413      	add	r3, r2
 80100d2:	005b      	lsls	r3, r3, #1
 80100d4:	225c      	movs	r2, #92	; 0x5c
 80100d6:	fb00 f202 	mul.w	r2, r0, r2
 80100da:	4413      	add	r3, r2
 80100dc:	440b      	add	r3, r1
 80100de:	3324      	adds	r3, #36	; 0x24
 80100e0:	7afa      	ldrb	r2, [r7, #11]
 80100e2:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6858      	ldr	r0, [r3, #4]
 80100e8:	68f9      	ldr	r1, [r7, #12]
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	4613      	mov	r3, r2
 80100ee:	005b      	lsls	r3, r3, #1
 80100f0:	4413      	add	r3, r2
 80100f2:	005b      	lsls	r3, r3, #1
 80100f4:	225c      	movs	r2, #92	; 0x5c
 80100f6:	fb00 f202 	mul.w	r2, r0, r2
 80100fa:	4413      	add	r3, r2
 80100fc:	440b      	add	r3, r1
 80100fe:	3325      	adds	r3, #37	; 0x25
 8010100:	7aba      	ldrb	r2, [r7, #10]
 8010102:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	6858      	ldr	r0, [r3, #4]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	b29c      	uxth	r4, r3
 801010c:	68f9      	ldr	r1, [r7, #12]
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	4613      	mov	r3, r2
 8010112:	005b      	lsls	r3, r3, #1
 8010114:	4413      	add	r3, r2
 8010116:	005b      	lsls	r3, r3, #1
 8010118:	225c      	movs	r2, #92	; 0x5c
 801011a:	fb00 f202 	mul.w	r2, r0, r2
 801011e:	4413      	add	r3, r2
 8010120:	440b      	add	r3, r1
 8010122:	3326      	adds	r3, #38	; 0x26
 8010124:	4622      	mov	r2, r4
 8010126:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	6858      	ldr	r0, [r3, #4]
 801012c:	68f9      	ldr	r1, [r7, #12]
 801012e:	697a      	ldr	r2, [r7, #20]
 8010130:	4613      	mov	r3, r2
 8010132:	005b      	lsls	r3, r3, #1
 8010134:	4413      	add	r3, r2
 8010136:	005b      	lsls	r3, r3, #1
 8010138:	225c      	movs	r2, #92	; 0x5c
 801013a:	fb00 f202 	mul.w	r2, r0, r2
 801013e:	4413      	add	r3, r2
 8010140:	440b      	add	r3, r1
 8010142:	3328      	adds	r3, #40	; 0x28
 8010144:	2201      	movs	r2, #1
 8010146:	701a      	strb	r2, [r3, #0]
}
 8010148:	bf00      	nop
 801014a:	3718      	adds	r7, #24
 801014c:	46bd      	mov	sp, r7
 801014e:	bc90      	pop	{r4, r7}
 8010150:	4770      	bx	lr
	...

08010154 <USBD_FrameWork_HID_Desc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_FrameWork_HID_Desc(USBD_DevClassHandleTypeDef *pdev,
                                     uint32_t pConf, uint32_t *Sze)
{
 8010154:	b590      	push	{r4, r7, lr}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	607a      	str	r2, [r7, #4]
  static USBD_IfDescTypedef       *pIfDesc;
  static USBD_EpDescTypedef       *pEpDesc;
  static USBD_HIDDescTypedef      *pHidDesc;

  switch(pdev->tclasslist[pdev->classId].InterfaceType)
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	68fa      	ldr	r2, [r7, #12]
 8010166:	215c      	movs	r1, #92	; 0x5c
 8010168:	fb01 f303 	mul.w	r3, r1, r3
 801016c:	4413      	add	r3, r2
 801016e:	3314      	adds	r3, #20
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	2b02      	cmp	r3, #2
 8010174:	f040 80f5 	bne.w	8010362 <USBD_FrameWork_HID_Desc+0x20e>

#if USBD_HID_MOUSE_ACTIVATED == 1U
    case INTERFACE_HID_MOUSE:

      /* Append HID Interface descriptor to Configuration descriptor */
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U,
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	4413      	add	r3, r2
 8010180:	461a      	mov	r2, r3
 8010182:	4b80      	ldr	r3, [pc, #512]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 8010184:	601a      	str	r2, [r3, #0]
 8010186:	4b7f      	ldr	r3, [pc, #508]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2209      	movs	r2, #9
 801018c:	701a      	strb	r2, [r3, #0]
 801018e:	4b7d      	ldr	r3, [pc, #500]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2204      	movs	r2, #4
 8010194:	705a      	strb	r2, [r3, #1]
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	685a      	ldr	r2, [r3, #4]
 801019a:	4b7a      	ldr	r3, [pc, #488]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	68f9      	ldr	r1, [r7, #12]
 80101a0:	205c      	movs	r0, #92	; 0x5c
 80101a2:	fb00 f202 	mul.w	r2, r0, r2
 80101a6:	440a      	add	r2, r1
 80101a8:	325a      	adds	r2, #90	; 0x5a
 80101aa:	7812      	ldrb	r2, [r2, #0]
 80101ac:	709a      	strb	r2, [r3, #2]
 80101ae:	4b75      	ldr	r3, [pc, #468]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2200      	movs	r2, #0
 80101b4:	70da      	strb	r2, [r3, #3]
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	215c      	movs	r1, #92	; 0x5c
 80101be:	fb01 f303 	mul.w	r3, r1, r3
 80101c2:	4413      	add	r3, r2
 80101c4:	331c      	adds	r3, #28
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	4b6e      	ldr	r3, [pc, #440]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	b2d2      	uxtb	r2, r2
 80101ce:	711a      	strb	r2, [r3, #4]
 80101d0:	4b6c      	ldr	r3, [pc, #432]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2203      	movs	r2, #3
 80101d6:	715a      	strb	r2, [r3, #5]
 80101d8:	4b6a      	ldr	r3, [pc, #424]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	2201      	movs	r2, #1
 80101de:	719a      	strb	r2, [r3, #6]
 80101e0:	4b68      	ldr	r3, [pc, #416]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2202      	movs	r2, #2
 80101e6:	71da      	strb	r2, [r3, #7]
 80101e8:	4b66      	ldr	r3, [pc, #408]	; (8010384 <USBD_FrameWork_HID_Desc+0x230>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2200      	movs	r2, #0
 80101ee:	721a      	strb	r2, [r3, #8]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f103 0209 	add.w	r2, r3, #9
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	601a      	str	r2, [r3, #0]
                              (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                              UX_DEVICE_CLASS_HID_CLASS,
                              0x01U, INTERFACE_HID_MOUSE, 0U);

      /* Append HID Functional descriptor to Configuration descriptor */
      pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681a      	ldr	r2, [r3, #0]
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	4413      	add	r3, r2
 8010204:	461a      	mov	r2, r3
 8010206:	4b60      	ldr	r3, [pc, #384]	; (8010388 <USBD_FrameWork_HID_Desc+0x234>)
 8010208:	601a      	str	r2, [r3, #0]
      pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 801020a:	4b5f      	ldr	r3, [pc, #380]	; (8010388 <USBD_FrameWork_HID_Desc+0x234>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	2209      	movs	r2, #9
 8010210:	701a      	strb	r2, [r3, #0]
      pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 8010212:	4b5d      	ldr	r3, [pc, #372]	; (8010388 <USBD_FrameWork_HID_Desc+0x234>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2221      	movs	r2, #33	; 0x21
 8010218:	705a      	strb	r2, [r3, #1]
      pHidDesc->bcdHID = 0x0111U;
 801021a:	4b5b      	ldr	r3, [pc, #364]	; (8010388 <USBD_FrameWork_HID_Desc+0x234>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2200      	movs	r2, #0
 8010220:	f042 0211 	orr.w	r2, r2, #17
 8010224:	709a      	strb	r2, [r3, #2]
 8010226:	2200      	movs	r2, #0
 8010228:	f042 0201 	orr.w	r2, r2, #1
 801022c:	70da      	strb	r2, [r3, #3]
      pHidDesc->bCountryCode = 0x00U;
 801022e:	4b56      	ldr	r3, [pc, #344]	; (8010388 <USBD_FrameWork_HID_Desc+0x234>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2200      	movs	r2, #0
 8010234:	711a      	strb	r2, [r3, #4]
      pHidDesc->bNumDescriptors = 0x01U;
 8010236:	4b54      	ldr	r3, [pc, #336]	; (8010388 <USBD_FrameWork_HID_Desc+0x234>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2201      	movs	r2, #1
 801023c:	715a      	strb	r2, [r3, #5]
      pHidDesc->bHIDDescriptorType = 0x22U;
 801023e:	4b52      	ldr	r3, [pc, #328]	; (8010388 <USBD_FrameWork_HID_Desc+0x234>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2222      	movs	r2, #34	; 0x22
 8010244:	719a      	strb	r2, [r3, #6]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 8010246:	4b50      	ldr	r3, [pc, #320]	; (8010388 <USBD_FrameWork_HID_Desc+0x234>)
 8010248:	681c      	ldr	r4, [r3, #0]
 801024a:	2002      	movs	r0, #2
 801024c:	f7ff fc10 	bl	800fa70 <USBD_HID_ReportDesc_length>
 8010250:	4603      	mov	r3, r0
 8010252:	f8a4 3007 	strh.w	r3, [r4, #7]
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f103 0209 	add.w	r2, r3, #9
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	601a      	str	r2, [r3, #0]

      if (pdev->Speed == USBD_HIGH_SPEED)
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	2b01      	cmp	r3, #1
 8010268:	d13d      	bne.n	80102e6 <USBD_FrameWork_HID_Desc+0x192>
      {
        /* Append Endpoint descriptor to Configuration descriptor */
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	4413      	add	r3, r2
 8010272:	461a      	mov	r2, r3
 8010274:	4b45      	ldr	r3, [pc, #276]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 8010276:	601a      	str	r2, [r3, #0]
 8010278:	4b44      	ldr	r3, [pc, #272]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2207      	movs	r2, #7
 801027e:	701a      	strb	r2, [r3, #0]
 8010280:	4b42      	ldr	r3, [pc, #264]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2205      	movs	r2, #5
 8010286:	705a      	strb	r2, [r3, #1]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	685a      	ldr	r2, [r3, #4]
 801028c:	4b3f      	ldr	r3, [pc, #252]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	68f9      	ldr	r1, [r7, #12]
 8010292:	205c      	movs	r0, #92	; 0x5c
 8010294:	fb00 f202 	mul.w	r2, r0, r2
 8010298:	440a      	add	r2, r1
 801029a:	3224      	adds	r2, #36	; 0x24
 801029c:	7812      	ldrb	r2, [r2, #0]
 801029e:	709a      	strb	r2, [r3, #2]
 80102a0:	4b3a      	ldr	r3, [pc, #232]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2203      	movs	r2, #3
 80102a6:	70da      	strb	r2, [r3, #3]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	685a      	ldr	r2, [r3, #4]
 80102ac:	4b37      	ldr	r3, [pc, #220]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	68f9      	ldr	r1, [r7, #12]
 80102b2:	205c      	movs	r0, #92	; 0x5c
 80102b4:	fb00 f202 	mul.w	r2, r0, r2
 80102b8:	440a      	add	r2, r1
 80102ba:	3226      	adds	r2, #38	; 0x26
 80102bc:	8812      	ldrh	r2, [r2, #0]
 80102be:	809a      	strh	r2, [r3, #4]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d104      	bne.n	80102d2 <USBD_FrameWork_HID_Desc+0x17e>
 80102c8:	4b30      	ldr	r3, [pc, #192]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2205      	movs	r2, #5
 80102ce:	719a      	strb	r2, [r3, #6]
 80102d0:	e003      	b.n	80102da <USBD_FrameWork_HID_Desc+0x186>
 80102d2:	4b2e      	ldr	r3, [pc, #184]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2205      	movs	r2, #5
 80102d8:	719a      	strb	r2, [r3, #6]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	1dda      	adds	r2, r3, #7
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	601a      	str	r2, [r3, #0]
                                (uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
                                USBD_HID_MOUSE_EPIN_HS_BINTERVAL,
                                USBD_HID_MOUSE_EPIN_FS_BINTERVAL);
      }

      break;
 80102e4:	e03e      	b.n	8010364 <USBD_FrameWork_HID_Desc+0x210>
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	4413      	add	r3, r2
 80102ee:	461a      	mov	r2, r3
 80102f0:	4b26      	ldr	r3, [pc, #152]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 80102f2:	601a      	str	r2, [r3, #0]
 80102f4:	4b25      	ldr	r3, [pc, #148]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2207      	movs	r2, #7
 80102fa:	701a      	strb	r2, [r3, #0]
 80102fc:	4b23      	ldr	r3, [pc, #140]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	2205      	movs	r2, #5
 8010302:	705a      	strb	r2, [r3, #1]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	685a      	ldr	r2, [r3, #4]
 8010308:	4b20      	ldr	r3, [pc, #128]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	68f9      	ldr	r1, [r7, #12]
 801030e:	205c      	movs	r0, #92	; 0x5c
 8010310:	fb00 f202 	mul.w	r2, r0, r2
 8010314:	440a      	add	r2, r1
 8010316:	3224      	adds	r2, #36	; 0x24
 8010318:	7812      	ldrb	r2, [r2, #0]
 801031a:	709a      	strb	r2, [r3, #2]
 801031c:	4b1b      	ldr	r3, [pc, #108]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2203      	movs	r2, #3
 8010322:	70da      	strb	r2, [r3, #3]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	685a      	ldr	r2, [r3, #4]
 8010328:	4b18      	ldr	r3, [pc, #96]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	68f9      	ldr	r1, [r7, #12]
 801032e:	205c      	movs	r0, #92	; 0x5c
 8010330:	fb00 f202 	mul.w	r2, r0, r2
 8010334:	440a      	add	r2, r1
 8010336:	3226      	adds	r2, #38	; 0x26
 8010338:	8812      	ldrh	r2, [r2, #0]
 801033a:	809a      	strh	r2, [r3, #4]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	2b01      	cmp	r3, #1
 8010342:	d104      	bne.n	801034e <USBD_FrameWork_HID_Desc+0x1fa>
 8010344:	4b11      	ldr	r3, [pc, #68]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2205      	movs	r2, #5
 801034a:	719a      	strb	r2, [r3, #6]
 801034c:	e003      	b.n	8010356 <USBD_FrameWork_HID_Desc+0x202>
 801034e:	4b0f      	ldr	r3, [pc, #60]	; (801038c <USBD_FrameWork_HID_Desc+0x238>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2205      	movs	r2, #5
 8010354:	719a      	strb	r2, [r3, #6]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	1dda      	adds	r2, r3, #7
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	601a      	str	r2, [r3, #0]
      break;
 8010360:	e000      	b.n	8010364 <USBD_FrameWork_HID_Desc+0x210>
#endif /* USBD_HID_MOUSE_ACTIVATED == 1U */

    default:
      break;
 8010362:	bf00      	nop
  }

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	791a      	ldrb	r2, [r3, #4]
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	3201      	adds	r2, #1
 801036c:	b2d2      	uxtb	r2, r2
 801036e:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	b292      	uxth	r2, r2
 8010378:	805a      	strh	r2, [r3, #2]

}
 801037a:	bf00      	nop
 801037c:	3714      	adds	r7, #20
 801037e:	46bd      	mov	sp, r7
 8010380:	bd90      	pop	{r4, r7, pc}
 8010382:	bf00      	nop
 8010384:	240054f8 	.word	0x240054f8
 8010388:	240054fc 	.word	0x240054fc
 801038c:	24005500 	.word	0x24005500

08010390 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 8010390:	b480      	push	{r7}
 8010392:	b085      	sub	sp, #20
 8010394:	af00      	add	r7, sp, #0
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	60b9      	str	r1, [r7, #8]
 801039a:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681a      	ldr	r2, [r3, #0]
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	4413      	add	r3, r2
 80103a4:	461a      	mov	r2, r3
 80103a6:	4b99      	ldr	r3, [pc, #612]	; (801060c <USBD_FrameWork_CDCDesc+0x27c>)
 80103a8:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 80103aa:	4b98      	ldr	r3, [pc, #608]	; (801060c <USBD_FrameWork_CDCDesc+0x27c>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2208      	movs	r2, #8
 80103b0:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 80103b2:	4b96      	ldr	r3, [pc, #600]	; (801060c <USBD_FrameWork_CDCDesc+0x27c>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	220b      	movs	r2, #11
 80103b8:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	685a      	ldr	r2, [r3, #4]
 80103be:	4b93      	ldr	r3, [pc, #588]	; (801060c <USBD_FrameWork_CDCDesc+0x27c>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	68f9      	ldr	r1, [r7, #12]
 80103c4:	205c      	movs	r0, #92	; 0x5c
 80103c6:	fb00 f202 	mul.w	r2, r0, r2
 80103ca:	440a      	add	r2, r1
 80103cc:	325a      	adds	r2, #90	; 0x5a
 80103ce:	7812      	ldrb	r2, [r2, #0]
 80103d0:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 80103d2:	4b8e      	ldr	r3, [pc, #568]	; (801060c <USBD_FrameWork_CDCDesc+0x27c>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2202      	movs	r2, #2
 80103d8:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 80103da:	4b8c      	ldr	r3, [pc, #560]	; (801060c <USBD_FrameWork_CDCDesc+0x27c>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	2202      	movs	r2, #2
 80103e0:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 80103e2:	4b8a      	ldr	r3, [pc, #552]	; (801060c <USBD_FrameWork_CDCDesc+0x27c>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2202      	movs	r2, #2
 80103e8:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 80103ea:	4b88      	ldr	r3, [pc, #544]	; (801060c <USBD_FrameWork_CDCDesc+0x27c>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2201      	movs	r2, #1
 80103f0:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 80103f2:	4b86      	ldr	r3, [pc, #536]	; (801060c <USBD_FrameWork_CDCDesc+0x27c>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2200      	movs	r2, #0
 80103f8:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f103 0208 	add.w	r2, r3, #8
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	4413      	add	r3, r2
 801040e:	461a      	mov	r2, r3
 8010410:	4b7f      	ldr	r3, [pc, #508]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 8010412:	601a      	str	r2, [r3, #0]
 8010414:	4b7e      	ldr	r3, [pc, #504]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2209      	movs	r2, #9
 801041a:	701a      	strb	r2, [r3, #0]
 801041c:	4b7c      	ldr	r3, [pc, #496]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2204      	movs	r2, #4
 8010422:	705a      	strb	r2, [r3, #1]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	685a      	ldr	r2, [r3, #4]
 8010428:	4b79      	ldr	r3, [pc, #484]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	68f9      	ldr	r1, [r7, #12]
 801042e:	205c      	movs	r0, #92	; 0x5c
 8010430:	fb00 f202 	mul.w	r2, r0, r2
 8010434:	440a      	add	r2, r1
 8010436:	325a      	adds	r2, #90	; 0x5a
 8010438:	7812      	ldrb	r2, [r2, #0]
 801043a:	709a      	strb	r2, [r3, #2]
 801043c:	4b74      	ldr	r3, [pc, #464]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2200      	movs	r2, #0
 8010442:	70da      	strb	r2, [r3, #3]
 8010444:	4b72      	ldr	r3, [pc, #456]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2201      	movs	r2, #1
 801044a:	711a      	strb	r2, [r3, #4]
 801044c:	4b70      	ldr	r3, [pc, #448]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2202      	movs	r2, #2
 8010452:	715a      	strb	r2, [r3, #5]
 8010454:	4b6e      	ldr	r3, [pc, #440]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2202      	movs	r2, #2
 801045a:	719a      	strb	r2, [r3, #6]
 801045c:	4b6c      	ldr	r3, [pc, #432]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	2201      	movs	r2, #1
 8010462:	71da      	strb	r2, [r3, #7]
 8010464:	4b6a      	ldr	r3, [pc, #424]	; (8010610 <USBD_FrameWork_CDCDesc+0x280>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2200      	movs	r2, #0
 801046a:	721a      	strb	r2, [r3, #8]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	f103 0209 	add.w	r2, r3, #9
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	4413      	add	r3, r2
 8010480:	461a      	mov	r2, r3
 8010482:	4b64      	ldr	r3, [pc, #400]	; (8010614 <USBD_FrameWork_CDCDesc+0x284>)
 8010484:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 8010486:	4b63      	ldr	r3, [pc, #396]	; (8010614 <USBD_FrameWork_CDCDesc+0x284>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2205      	movs	r2, #5
 801048c:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 801048e:	4b61      	ldr	r3, [pc, #388]	; (8010614 <USBD_FrameWork_CDCDesc+0x284>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2224      	movs	r2, #36	; 0x24
 8010494:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 8010496:	4b5f      	ldr	r3, [pc, #380]	; (8010614 <USBD_FrameWork_CDCDesc+0x284>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2200      	movs	r2, #0
 801049c:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 801049e:	4b5d      	ldr	r3, [pc, #372]	; (8010614 <USBD_FrameWork_CDCDesc+0x284>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2200      	movs	r2, #0
 80104a4:	f042 0210 	orr.w	r2, r2, #16
 80104a8:	70da      	strb	r2, [r3, #3]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f042 0201 	orr.w	r2, r2, #1
 80104b0:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	1d5a      	adds	r2, r3, #5
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	4413      	add	r3, r2
 80104c4:	461a      	mov	r2, r3
 80104c6:	4b54      	ldr	r3, [pc, #336]	; (8010618 <USBD_FrameWork_CDCDesc+0x288>)
 80104c8:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 80104ca:	4b53      	ldr	r3, [pc, #332]	; (8010618 <USBD_FrameWork_CDCDesc+0x288>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	2205      	movs	r2, #5
 80104d0:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 80104d2:	4b51      	ldr	r3, [pc, #324]	; (8010618 <USBD_FrameWork_CDCDesc+0x288>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2224      	movs	r2, #36	; 0x24
 80104d8:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 80104da:	4b4f      	ldr	r3, [pc, #316]	; (8010618 <USBD_FrameWork_CDCDesc+0x288>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2201      	movs	r2, #1
 80104e0:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 80104e2:	4b4d      	ldr	r3, [pc, #308]	; (8010618 <USBD_FrameWork_CDCDesc+0x288>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	2200      	movs	r2, #0
 80104e8:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	685a      	ldr	r2, [r3, #4]
 80104ee:	4b4a      	ldr	r3, [pc, #296]	; (8010618 <USBD_FrameWork_CDCDesc+0x288>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	68f9      	ldr	r1, [r7, #12]
 80104f4:	205c      	movs	r0, #92	; 0x5c
 80104f6:	fb00 f202 	mul.w	r2, r0, r2
 80104fa:	440a      	add	r2, r1
 80104fc:	325b      	adds	r2, #91	; 0x5b
 80104fe:	7812      	ldrb	r2, [r2, #0]
 8010500:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	1d5a      	adds	r2, r3, #5
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	4413      	add	r3, r2
 8010514:	461a      	mov	r2, r3
 8010516:	4b41      	ldr	r3, [pc, #260]	; (801061c <USBD_FrameWork_CDCDesc+0x28c>)
 8010518:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 801051a:	4b40      	ldr	r3, [pc, #256]	; (801061c <USBD_FrameWork_CDCDesc+0x28c>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2204      	movs	r2, #4
 8010520:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8010522:	4b3e      	ldr	r3, [pc, #248]	; (801061c <USBD_FrameWork_CDCDesc+0x28c>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	2224      	movs	r2, #36	; 0x24
 8010528:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 801052a:	4b3c      	ldr	r3, [pc, #240]	; (801061c <USBD_FrameWork_CDCDesc+0x28c>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	2202      	movs	r2, #2
 8010530:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 8010532:	4b3a      	ldr	r3, [pc, #232]	; (801061c <USBD_FrameWork_CDCDesc+0x28c>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	2202      	movs	r2, #2
 8010538:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	1d1a      	adds	r2, r3, #4
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	4413      	add	r3, r2
 801054c:	461a      	mov	r2, r3
 801054e:	4b34      	ldr	r3, [pc, #208]	; (8010620 <USBD_FrameWork_CDCDesc+0x290>)
 8010550:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 8010552:	4b33      	ldr	r3, [pc, #204]	; (8010620 <USBD_FrameWork_CDCDesc+0x290>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2205      	movs	r2, #5
 8010558:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 801055a:	4b31      	ldr	r3, [pc, #196]	; (8010620 <USBD_FrameWork_CDCDesc+0x290>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2224      	movs	r2, #36	; 0x24
 8010560:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 8010562:	4b2f      	ldr	r3, [pc, #188]	; (8010620 <USBD_FrameWork_CDCDesc+0x290>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2206      	movs	r2, #6
 8010568:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	685a      	ldr	r2, [r3, #4]
 801056e:	4b2c      	ldr	r3, [pc, #176]	; (8010620 <USBD_FrameWork_CDCDesc+0x290>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	68f9      	ldr	r1, [r7, #12]
 8010574:	205c      	movs	r0, #92	; 0x5c
 8010576:	fb00 f202 	mul.w	r2, r0, r2
 801057a:	440a      	add	r2, r1
 801057c:	325a      	adds	r2, #90	; 0x5a
 801057e:	7812      	ldrb	r2, [r2, #0]
 8010580:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	685a      	ldr	r2, [r3, #4]
 8010586:	4b26      	ldr	r3, [pc, #152]	; (8010620 <USBD_FrameWork_CDCDesc+0x290>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	68f9      	ldr	r1, [r7, #12]
 801058c:	205c      	movs	r0, #92	; 0x5c
 801058e:	fb00 f202 	mul.w	r2, r0, r2
 8010592:	440a      	add	r2, r1
 8010594:	325b      	adds	r2, #91	; 0x5b
 8010596:	7812      	ldrb	r2, [r2, #0]
 8010598:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	1d5a      	adds	r2, r3, #5
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	4413      	add	r3, r2
 80105ac:	461a      	mov	r2, r3
 80105ae:	4b1d      	ldr	r3, [pc, #116]	; (8010624 <USBD_FrameWork_CDCDesc+0x294>)
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	4b1c      	ldr	r3, [pc, #112]	; (8010624 <USBD_FrameWork_CDCDesc+0x294>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2207      	movs	r2, #7
 80105b8:	701a      	strb	r2, [r3, #0]
 80105ba:	4b1a      	ldr	r3, [pc, #104]	; (8010624 <USBD_FrameWork_CDCDesc+0x294>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	2205      	movs	r2, #5
 80105c0:	705a      	strb	r2, [r3, #1]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	685a      	ldr	r2, [r3, #4]
 80105c6:	4b17      	ldr	r3, [pc, #92]	; (8010624 <USBD_FrameWork_CDCDesc+0x294>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	68f9      	ldr	r1, [r7, #12]
 80105cc:	205c      	movs	r0, #92	; 0x5c
 80105ce:	fb00 f202 	mul.w	r2, r0, r2
 80105d2:	440a      	add	r2, r1
 80105d4:	3230      	adds	r2, #48	; 0x30
 80105d6:	7812      	ldrb	r2, [r2, #0]
 80105d8:	709a      	strb	r2, [r3, #2]
 80105da:	4b12      	ldr	r3, [pc, #72]	; (8010624 <USBD_FrameWork_CDCDesc+0x294>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2203      	movs	r2, #3
 80105e0:	70da      	strb	r2, [r3, #3]
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	685a      	ldr	r2, [r3, #4]
 80105e6:	4b0f      	ldr	r3, [pc, #60]	; (8010624 <USBD_FrameWork_CDCDesc+0x294>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	68f9      	ldr	r1, [r7, #12]
 80105ec:	205c      	movs	r0, #92	; 0x5c
 80105ee:	fb00 f202 	mul.w	r2, r0, r2
 80105f2:	440a      	add	r2, r1
 80105f4:	3232      	adds	r2, #50	; 0x32
 80105f6:	8812      	ldrh	r2, [r2, #0]
 80105f8:	809a      	strh	r2, [r3, #4]
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d112      	bne.n	8010628 <USBD_FrameWork_CDCDesc+0x298>
 8010602:	4b08      	ldr	r3, [pc, #32]	; (8010624 <USBD_FrameWork_CDCDesc+0x294>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2205      	movs	r2, #5
 8010608:	719a      	strb	r2, [r3, #6]
 801060a:	e011      	b.n	8010630 <USBD_FrameWork_CDCDesc+0x2a0>
 801060c:	24005504 	.word	0x24005504
 8010610:	24005508 	.word	0x24005508
 8010614:	2400550c 	.word	0x2400550c
 8010618:	24005510 	.word	0x24005510
 801061c:	24005514 	.word	0x24005514
 8010620:	24005518 	.word	0x24005518
 8010624:	2400551c 	.word	0x2400551c
 8010628:	4b66      	ldr	r3, [pc, #408]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2205      	movs	r2, #5
 801062e:	719a      	strb	r2, [r3, #6]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	1dda      	adds	r2, r3, #7
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	4413      	add	r3, r2
 8010642:	461a      	mov	r2, r3
 8010644:	4b60      	ldr	r3, [pc, #384]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 8010646:	601a      	str	r2, [r3, #0]
 8010648:	4b5f      	ldr	r3, [pc, #380]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2209      	movs	r2, #9
 801064e:	701a      	strb	r2, [r3, #0]
 8010650:	4b5d      	ldr	r3, [pc, #372]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	2204      	movs	r2, #4
 8010656:	705a      	strb	r2, [r3, #1]
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	685a      	ldr	r2, [r3, #4]
 801065c:	4b5a      	ldr	r3, [pc, #360]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	68f9      	ldr	r1, [r7, #12]
 8010662:	205c      	movs	r0, #92	; 0x5c
 8010664:	fb00 f202 	mul.w	r2, r0, r2
 8010668:	440a      	add	r2, r1
 801066a:	325b      	adds	r2, #91	; 0x5b
 801066c:	7812      	ldrb	r2, [r2, #0]
 801066e:	709a      	strb	r2, [r3, #2]
 8010670:	4b55      	ldr	r3, [pc, #340]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2200      	movs	r2, #0
 8010676:	70da      	strb	r2, [r3, #3]
 8010678:	4b53      	ldr	r3, [pc, #332]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2202      	movs	r2, #2
 801067e:	711a      	strb	r2, [r3, #4]
 8010680:	4b51      	ldr	r3, [pc, #324]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	220a      	movs	r2, #10
 8010686:	715a      	strb	r2, [r3, #5]
 8010688:	4b4f      	ldr	r3, [pc, #316]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2200      	movs	r2, #0
 801068e:	719a      	strb	r2, [r3, #6]
 8010690:	4b4d      	ldr	r3, [pc, #308]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2200      	movs	r2, #0
 8010696:	71da      	strb	r2, [r3, #7]
 8010698:	4b4b      	ldr	r3, [pc, #300]	; (80107c8 <USBD_FrameWork_CDCDesc+0x438>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2200      	movs	r2, #0
 801069e:	721a      	strb	r2, [r3, #8]
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	f103 0209 	add.w	r2, r3, #9
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	4413      	add	r3, r2
 80106b4:	461a      	mov	r2, r3
 80106b6:	4b43      	ldr	r3, [pc, #268]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	4b42      	ldr	r3, [pc, #264]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	2207      	movs	r2, #7
 80106c0:	701a      	strb	r2, [r3, #0]
 80106c2:	4b40      	ldr	r3, [pc, #256]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2205      	movs	r2, #5
 80106c8:	705a      	strb	r2, [r3, #1]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	685a      	ldr	r2, [r3, #4]
 80106ce:	4b3d      	ldr	r3, [pc, #244]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	68f9      	ldr	r1, [r7, #12]
 80106d4:	205c      	movs	r0, #92	; 0x5c
 80106d6:	fb00 f202 	mul.w	r2, r0, r2
 80106da:	440a      	add	r2, r1
 80106dc:	3224      	adds	r2, #36	; 0x24
 80106de:	7812      	ldrb	r2, [r2, #0]
 80106e0:	709a      	strb	r2, [r3, #2]
 80106e2:	4b38      	ldr	r3, [pc, #224]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2202      	movs	r2, #2
 80106e8:	70da      	strb	r2, [r3, #3]
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	685a      	ldr	r2, [r3, #4]
 80106ee:	4b35      	ldr	r3, [pc, #212]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	68f9      	ldr	r1, [r7, #12]
 80106f4:	205c      	movs	r0, #92	; 0x5c
 80106f6:	fb00 f202 	mul.w	r2, r0, r2
 80106fa:	440a      	add	r2, r1
 80106fc:	3226      	adds	r2, #38	; 0x26
 80106fe:	8812      	ldrh	r2, [r2, #0]
 8010700:	809a      	strh	r2, [r3, #4]
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	2b01      	cmp	r3, #1
 8010708:	d104      	bne.n	8010714 <USBD_FrameWork_CDCDesc+0x384>
 801070a:	4b2e      	ldr	r3, [pc, #184]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2200      	movs	r2, #0
 8010710:	719a      	strb	r2, [r3, #6]
 8010712:	e003      	b.n	801071c <USBD_FrameWork_CDCDesc+0x38c>
 8010714:	4b2b      	ldr	r3, [pc, #172]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2200      	movs	r2, #0
 801071a:	719a      	strb	r2, [r3, #6]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	1dda      	adds	r2, r3, #7
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	4413      	add	r3, r2
 801072e:	461a      	mov	r2, r3
 8010730:	4b24      	ldr	r3, [pc, #144]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 8010732:	601a      	str	r2, [r3, #0]
 8010734:	4b23      	ldr	r3, [pc, #140]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2207      	movs	r2, #7
 801073a:	701a      	strb	r2, [r3, #0]
 801073c:	4b21      	ldr	r3, [pc, #132]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2205      	movs	r2, #5
 8010742:	705a      	strb	r2, [r3, #1]
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	685a      	ldr	r2, [r3, #4]
 8010748:	4b1e      	ldr	r3, [pc, #120]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	68f9      	ldr	r1, [r7, #12]
 801074e:	205c      	movs	r0, #92	; 0x5c
 8010750:	fb00 f202 	mul.w	r2, r0, r2
 8010754:	440a      	add	r2, r1
 8010756:	322a      	adds	r2, #42	; 0x2a
 8010758:	7812      	ldrb	r2, [r2, #0]
 801075a:	709a      	strb	r2, [r3, #2]
 801075c:	4b19      	ldr	r3, [pc, #100]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	2202      	movs	r2, #2
 8010762:	70da      	strb	r2, [r3, #3]
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	685a      	ldr	r2, [r3, #4]
 8010768:	4b16      	ldr	r3, [pc, #88]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	68f9      	ldr	r1, [r7, #12]
 801076e:	205c      	movs	r0, #92	; 0x5c
 8010770:	fb00 f202 	mul.w	r2, r0, r2
 8010774:	440a      	add	r2, r1
 8010776:	322c      	adds	r2, #44	; 0x2c
 8010778:	8812      	ldrh	r2, [r2, #0]
 801077a:	809a      	strh	r2, [r3, #4]
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	2b01      	cmp	r3, #1
 8010782:	d104      	bne.n	801078e <USBD_FrameWork_CDCDesc+0x3fe>
 8010784:	4b0f      	ldr	r3, [pc, #60]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2200      	movs	r2, #0
 801078a:	719a      	strb	r2, [r3, #6]
 801078c:	e003      	b.n	8010796 <USBD_FrameWork_CDCDesc+0x406>
 801078e:	4b0d      	ldr	r3, [pc, #52]	; (80107c4 <USBD_FrameWork_CDCDesc+0x434>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2200      	movs	r2, #0
 8010794:	719a      	strb	r2, [r3, #6]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	1dda      	adds	r2, r3, #7
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	791a      	ldrb	r2, [r3, #4]
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	3202      	adds	r2, #2
 80107a8:	b2d2      	uxtb	r2, r2
 80107aa:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681a      	ldr	r2, [r3, #0]
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	b292      	uxth	r2, r2
 80107b4:	805a      	strh	r2, [r3, #2]
}
 80107b6:	bf00      	nop
 80107b8:	3714      	adds	r7, #20
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop
 80107c4:	2400551c 	.word	0x2400551c
 80107c8:	24005508 	.word	0x24005508

080107cc <USBD_HID_Mouse_Activate>:
  *         This function is called when insertion of a HID Mouse device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Mouse_Activate(VOID *hid_instance)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Mouse_Activate */
	hid_mouse = (UX_SLAVE_CLASS_HID *)hid_instance;
 80107d4:	4a04      	ldr	r2, [pc, #16]	; (80107e8 <USBD_HID_Mouse_Activate+0x1c>)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END USBD_HID_Mouse_Activate */

  return;
 80107da:	bf00      	nop
}
 80107dc:	370c      	adds	r7, #12
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop
 80107e8:	24005520 	.word	0x24005520

080107ec <USBD_HID_Mouse_Deactivate>:
  *         This function is called when extraction of a HID Mouse device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Mouse_Deactivate(VOID *hid_instance)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Mouse_Deactivate */
	hid_mouse = UX_NULL;
 80107f4:	4b04      	ldr	r3, [pc, #16]	; (8010808 <USBD_HID_Mouse_Deactivate+0x1c>)
 80107f6:	2200      	movs	r2, #0
 80107f8:	601a      	str	r2, [r3, #0]
  /* USER CODE END USBD_HID_Mouse_Deactivate */

  return;
 80107fa:	bf00      	nop
}
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop
 8010808:	24005520 	.word	0x24005520

0801080c <USBD_HID_Mouse_SetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Mouse_SetReport(UX_SLAVE_CLASS_HID *hid_instance,
                              UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 801080c:	b480      	push	{r7}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 8010816:	2300      	movs	r3, #0
 8010818:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Mouse_SetReport */
	UX_PARAMETER_NOT_USED(hid_instance);
	UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Mouse_SetReport */

  return status;
 801081a:	68fb      	ldr	r3, [r7, #12]
}
 801081c:	4618      	mov	r0, r3
 801081e:	3714      	adds	r7, #20
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <USBD_HID_Mouse_GetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Mouse_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
                              UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 8010832:	2300      	movs	r3, #0
 8010834:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Mouse_GetReport */
	UX_PARAMETER_NOT_USED(hid_instance);
	UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Mouse_GetReport */

  return status;
 8010836:	68fb      	ldr	r3, [r7, #12]
}
 8010838:	4618      	mov	r0, r3
 801083a:	3714      	adds	r7, #20
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <usbx_hid_mouse_thread_entry>:

/* USER CODE BEGIN 1 */
VOID usbx_hid_mouse_thread_entry(ULONG thread_input)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b08e      	sub	sp, #56	; 0x38
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
	/* Local Variables */
	UX_SLAVE_DEVICE *device;
	UX_SLAVE_CLASS_HID_EVENT hid_event;
	device = &_ux_system_slave->ux_system_slave_device;
 801084c:	4b14      	ldr	r3, [pc, #80]	; (80108a0 <usbx_hid_mouse_thread_entry+0x5c>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	3320      	adds	r3, #32
 8010852:	637b      	str	r3, [r7, #52]	; 0x34

	/* Infinite Loop */
	while(1)
	{
		/* Check if the Device is configured */
		if((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_mouse != UX_NULL))
 8010854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	2b03      	cmp	r3, #3
 801085a:	d11d      	bne.n	8010898 <usbx_hid_mouse_thread_entry+0x54>
 801085c:	4b11      	ldr	r3, [pc, #68]	; (80108a4 <usbx_hid_mouse_thread_entry+0x60>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d019      	beq.n	8010898 <usbx_hid_mouse_thread_entry+0x54>
		{
			/* Check if the User Button is pressed */
			if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8010864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010868:	480f      	ldr	r0, [pc, #60]	; (80108a8 <usbx_hid_mouse_thread_entry+0x64>)
 801086a:	f7f0 fce1 	bl	8001230 <HAL_GPIO_ReadPin>
 801086e:	4603      	mov	r3, r0
 8010870:	2b01      	cmp	r3, #1
 8010872:	d111      	bne.n	8010898 <usbx_hid_mouse_thread_entry+0x54>
			{
				/* Mouse event. Length is fixed to 4 */
				hid_event.ux_device_class_hid_event_length = 4;
 8010874:	2304      	movs	r3, #4
 8010876:	633b      	str	r3, [r7, #48]	; 0x30
				/* Set select position */
				hid_event.ux_device_class_hid_event_buffer[0] = 0;
 8010878:	2300      	movs	r3, #0
 801087a:	743b      	strb	r3, [r7, #16]
				/* Set X position */
				hid_event.ux_device_class_hid_event_buffer[1] = 5;
 801087c:	2305      	movs	r3, #5
 801087e:	747b      	strb	r3, [r7, #17]
				/* Set Y position */
				hid_event.ux_device_class_hid_event_buffer[2] = 5;
 8010880:	2305      	movs	r3, #5
 8010882:	74bb      	strb	r3, [r7, #18]
				/* Set wheel position */
				hid_event.ux_device_class_hid_event_buffer[3] = 0;
 8010884:	2300      	movs	r3, #0
 8010886:	74fb      	strb	r3, [r7, #19]

				/* Send an event to the hid */
				ux_device_class_hid_event_set(hid_mouse, &hid_event);
 8010888:	4b06      	ldr	r3, [pc, #24]	; (80108a4 <usbx_hid_mouse_thread_entry+0x60>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f107 0208 	add.w	r2, r7, #8
 8010890:	4611      	mov	r1, r2
 8010892:	4618      	mov	r0, r3
 8010894:	f7fd fc8e 	bl	800e1b4 <_ux_device_class_hid_event_set>
			}
		}
		/* Wait for 100ms */
		tx_thread_sleep(10);
 8010898:	200a      	movs	r0, #10
 801089a:	f7f8 fc67 	bl	800916c <_tx_thread_sleep>
		if((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_mouse != UX_NULL))
 801089e:	e7d9      	b.n	8010854 <usbx_hid_mouse_thread_entry+0x10>
 80108a0:	24004cf4 	.word	0x24004cf4
 80108a4:	24005520 	.word	0x24005520
 80108a8:	58020800 	.word	0x58020800

080108ac <memset>:
 80108ac:	4402      	add	r2, r0
 80108ae:	4603      	mov	r3, r0
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d100      	bne.n	80108b6 <memset+0xa>
 80108b4:	4770      	bx	lr
 80108b6:	f803 1b01 	strb.w	r1, [r3], #1
 80108ba:	e7f9      	b.n	80108b0 <memset+0x4>

080108bc <__libc_init_array>:
 80108bc:	b570      	push	{r4, r5, r6, lr}
 80108be:	4d0d      	ldr	r5, [pc, #52]	; (80108f4 <__libc_init_array+0x38>)
 80108c0:	4c0d      	ldr	r4, [pc, #52]	; (80108f8 <__libc_init_array+0x3c>)
 80108c2:	1b64      	subs	r4, r4, r5
 80108c4:	10a4      	asrs	r4, r4, #2
 80108c6:	2600      	movs	r6, #0
 80108c8:	42a6      	cmp	r6, r4
 80108ca:	d109      	bne.n	80108e0 <__libc_init_array+0x24>
 80108cc:	4d0b      	ldr	r5, [pc, #44]	; (80108fc <__libc_init_array+0x40>)
 80108ce:	4c0c      	ldr	r4, [pc, #48]	; (8010900 <__libc_init_array+0x44>)
 80108d0:	f000 f818 	bl	8010904 <_init>
 80108d4:	1b64      	subs	r4, r4, r5
 80108d6:	10a4      	asrs	r4, r4, #2
 80108d8:	2600      	movs	r6, #0
 80108da:	42a6      	cmp	r6, r4
 80108dc:	d105      	bne.n	80108ea <__libc_init_array+0x2e>
 80108de:	bd70      	pop	{r4, r5, r6, pc}
 80108e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80108e4:	4798      	blx	r3
 80108e6:	3601      	adds	r6, #1
 80108e8:	e7ee      	b.n	80108c8 <__libc_init_array+0xc>
 80108ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80108ee:	4798      	blx	r3
 80108f0:	3601      	adds	r6, #1
 80108f2:	e7f2      	b.n	80108da <__libc_init_array+0x1e>
 80108f4:	08010ab8 	.word	0x08010ab8
 80108f8:	08010ab8 	.word	0x08010ab8
 80108fc:	08010ab8 	.word	0x08010ab8
 8010900:	08010abc 	.word	0x08010abc

08010904 <_init>:
 8010904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010906:	bf00      	nop
 8010908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801090a:	bc08      	pop	{r3}
 801090c:	469e      	mov	lr, r3
 801090e:	4770      	bx	lr

08010910 <_fini>:
 8010910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010912:	bf00      	nop
 8010914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010916:	bc08      	pop	{r3}
 8010918:	469e      	mov	lr, r3
 801091a:	4770      	bx	lr
